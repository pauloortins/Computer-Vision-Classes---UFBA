 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../tdidt_clustering.hpp"
#include <cstddef>



/****** TClusteringTreeLearner *****/


TPropertyDescription TClusteringTreeLearner_properties[] = {
  {"min_majority", "the minimal majority each class variable must exceed to stop building", &typeid(float), NULL, offsetof(TClusteringTreeLearner, minMajority), false, false, 0},
  {"min_MSE", "the minimal MSE each class variable must be lower than to stop building", &typeid(float), NULL, offsetof(TClusteringTreeLearner, minMSE), false, false, 0},
  {"min_instances", "the minimal number of examples for division to continue", &typeid(int), NULL, offsetof(TClusteringTreeLearner, minInstances), false, false, 0},
  {"max_depth", "the maximal depth a tree can reach", &typeid(int), NULL, offsetof(TClusteringTreeLearner, maxDepth), false, false, 0},
  {"method", "", &typeid(int), NULL, offsetof(TClusteringTreeLearner, method), false, false, 0},
  {"skip_prob", "", &typeid(float), NULL, offsetof(TClusteringTreeLearner, skipProb), false, false, 0},
  {"random_generator", "", &typeid(POrange), &TRandomGenerator::st_classDescription, offsetof(TClusteringTreeLearner, randomGenerator), false, false, 0},
  {"needs", "the kind of data that learner needs", &typeid(int), NULL, offsetof(TClusteringTreeLearner, needs), true, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TClusteringTreeLearner, domain), false, false, 0},
  {NULL}
};

size_t const TClusteringTreeLearner_components[] = { offsetof(TClusteringTreeLearner, randomGenerator), offsetof(TClusteringTreeLearner, domain), 0};
TClassDescription TClusteringTreeLearner::st_classDescription = { "TClusteringTreeLearner", &typeid(TClusteringTreeLearner), &TMultiLearner::st_classDescription, TClusteringTreeLearner_properties, TClusteringTreeLearner_components };
TClassDescription const *TClusteringTreeLearner::classDescription() const { return &TClusteringTreeLearner::st_classDescription; }
TOrange *TClusteringTreeLearner::clone() const { return mlnew TClusteringTreeLearner(*this); }


/****** TClusteringTreeClassifier *****/


TPropertyDescription TClusteringTreeClassifier_properties[] = {
  {"class_vars", "class variables", &typeid(POrange), &TVarList::st_classDescription, offsetof(TClusteringTreeClassifier, classVars), false, false, 0},
  {"domain", "domain", &typeid(POrange), &TDomain::st_classDescription, offsetof(TClusteringTreeClassifier, domain), false, false, 0},
  {"computes_probabilities", "set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)", &typeid(bool), NULL, offsetof(TClusteringTreeClassifier, computesProbabilities), false, false, 0},
  {NULL}
};

size_t const TClusteringTreeClassifier_components[] = { offsetof(TClusteringTreeClassifier, classVars), offsetof(TClusteringTreeClassifier, domain), 0};
TClassDescription TClusteringTreeClassifier::st_classDescription = { "TClusteringTreeClassifier", &typeid(TClusteringTreeClassifier), &TMultiClassifier::st_classDescription, TClusteringTreeClassifier_properties, TClusteringTreeClassifier_components };
TClassDescription const *TClusteringTreeClassifier::classDescription() const { return &TClusteringTreeClassifier::st_classDescription; }
TOrange *TClusteringTreeClassifier::clone() const { return mlnew TClusteringTreeClassifier(*this); }
