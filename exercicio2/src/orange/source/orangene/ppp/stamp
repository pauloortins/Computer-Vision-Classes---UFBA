(dp0
S'TComputeDomainContingency_ImputeWithClassifier'
p1
(i__main__
ClassDefinition
p2
(dp3
S'extended'
p4
I1
sS'imported'
p5
I01
sS'name'
p6
g1
sS'parent'
p7
S'TComputeDomainContingency'
p8
sS'abstract'
p9
I00
sS'components'
p10
(lp11
sS'properties'
p12
(lp13
(S'TLearner'
p14
S'learnerForDiscrete'
p15
S'learner_for_discrete'
p16
S'constructs a classifier for imputation of discrete values'
p17
I0
I0
I00
Ntp18
a(S'TLearner'
p19
S'learnerForContinuous'
p20
S'learner_for_continuous'
p21
S'constructs a classifier for imputation of continuous values'
p22
I0
I0
I00
Ntp23
a(S'bool'
p24
S'classIsOuter'
p25
S'class_is_outer'
p26
S'tells whether the class is the outer variable in contingencies'
p27
I0
I0
I01
Ntp28
asS'constants'
p29
(dp30
sbsS'TRuleDataStoppingCriteria_NoPositives'
p31
(i__main__
ClassDefinition
p32
(dp33
g4
I1
sg5
I01
sg6
g31
sg7
S'TRuleDataStoppingCriteria'
p34
sg9
I00
sg10
(lp35
sg12
(lp36
sg29
(dp37
sbsS'TExampleCluster'
p38
(i__main__
ClassDefinition
p39
(dp40
g4
I1
sg5
I01
sg6
g38
sg7
S'TOrange'
p41
sg9
I00
sg10
(lp42
sg12
(lp43
(S'TExampleCluster'
p44
S'left'
p45
g45
S"'left' cluster"
p46
I0
I0
I00
Ntp47
a(S'TExampleCluster'
p48
S'right'
p49
g49
S"'right' cluster"
p50
I0
I0
I00
Ntp51
a(S'float'
p52
S'distance'
p53
g53
S'distance between the two clusters (not defined for leaves)'
p54
I0
I0
I01
Ntp55
a(S'TExample'
p56
S'centroid'
p57
g57
S"cluster's centroid (always defined for leaves)"
p58
I0
I0
I00
Ntp59
asg29
(dp60
sbsS'TClassifierByLookupTableN'
p61
(i__main__
ClassDefinition
p62
(dp63
g4
I1
sg5
I01
sg6
g61
sg7
S'TClassifierByLookupTable'
p64
sg9
I00
sg10
(lp65
sg12
(lp66
(S'TVarList'
p67
S'variables'
p68
g68
S'attributes'
p69
I01
I0
I00
Ntp70
a(S'TIntList'
p71
S'noOfValues'
p72
S'no_of_values'
p73
S'number of values for each attribute'
p74
I01
I0
I00
Ntp75
a(S'TEFMDataDescription'
p76
S'dataDescription'
p77
S'data_description'
p78
S'data description'
p79
I0
I0
I00
Ntp80
a(S'TValueList'
p81
S'lookupTable'
p82
S'lookup_table'
p83
S'a list of class values, one for each attribute value'
p84
I01
I0
I00
Ntp85
a(S'TDistributionList'
p86
S'distributions'
p87
g87
S'a list of class distributions, one for each attribute value'
p88
I01
I0
I00
Ntp89
a(S'TVariable'
p90
S'classVar'
p91
S'class_var'
p92
S'class variable'
p93
I0
I0
I00
Ntp94
a(S'bool'
p95
S'computesProbabilities'
p96
S'computes_probabilities'
p97
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p98
I0
I0
I01
Ntp99
asg29
(dp100
sbsS'TLearner_Python'
p101
(i__main__
ClassDefinition
p102
(dp103
g4
I1
sg5
I01
sg6
g101
sg7
S'TLearner'
p104
sg9
I00
sg10
(lp105
sg12
(lp106
(S'int'
p107
S'needs'
p108
g108
S'the kind of data that learner needs'
p109
I01
I0
I01
Ntp110
asg29
(dp111
sbsS'TConditionalProbabilityEstimator_FromDistribution'
p112
(i__main__
ClassDefinition
p113
(dp114
g4
I1
sg5
I01
sg6
g112
sg7
S'TConditionalProbabilityEstimator'
p115
sg9
I00
sg10
(lp116
sg12
(lp117
(S'TContingency'
p118
S'probabilities'
p119
g119
S'Contingency that stores conditional probabilities'
p120
I0
I0
I00
Ntp121
a(S'bool'
p122
S'supportsDiscrete'
p123
S'supports_discrete'
p124
S'can estimate probabilities of discrete attributes'
p125
I01
I0
I01
Ntp126
a(S'bool'
p127
S'supportsContinuous'
p128
S'supports_continuous'
p129
S'can estimate probabilities of continuous attributes'
p130
I01
I0
I01
Ntp131
asg29
(dp132
sbsS'THeatmapList'
p133
(ipyprops
ClassDefinition
p134
(dp135
g4
I0
sg5
I01
sg6
g133
sg7
S'TOrange'
p136
sg9
I0
sg10
(lp137
sg12
(lp138
sg29
(dp139
sbsS'TFeatureInducer'
p140
(i__main__
ClassDefinition
p141
(dp142
g4
I1
sg5
I01
sg6
g140
sg7
S'TOrange'
p143
sg9
I01
sg10
(lp144
sg12
(lp145
sg29
(dp146
sbsS'TImputerConstruct_Python'
p147
(i__main__
ClassDefinition
p148
(dp149
g4
I1
sg5
I01
sg6
g147
sg7
S'TImputerConstructor'
p150
sg9
I00
sg10
(lp151
sg12
(lp152
(S'bool'
p153
S'imputeClass'
p154
S'impute_class'
p155
S'tells whether to impute the class value (default: true)'
p156
I0
I0
I01
Ntp157
asg29
(dp158
sbsS'TExampleGeneratorList'
p159
(ipyprops
ClassDefinition
p160
(dp161
g4
I0
sg5
I01
sg6
g159
sg7
g136
sg9
I0
sg10
(lp162
sg12
(lp163
sg29
(dp164
sbsS'TIMByRowsConstructor'
p165
(i__main__
ClassDefinition
p166
(dp167
g4
I1
sg5
I01
sg6
g165
sg7
S'TOrange'
p168
sg9
I01
sg10
(lp169
sg12
(lp170
sg29
(dp171
sbsS'TSubsetsGenerator_withRestrictions'
p172
(i__main__
ClassDefinition
p173
(dp174
g4
I1
sg5
I01
sg6
g172
sg7
S'TSubsetsGenerator'
p175
sg9
I00
sg10
(lp176
sg12
(lp177
(S'TSubsetsGenerator'
p178
S'subGenerator'
p179
S'sub_generator'
p180
S'subset generator'
p181
I0
I0
I00
Ntp182
a(S'TVarList'
p183
S'required'
p184
g184
S'set of required attributes'
p185
I0
I0
I00
Ntp186
a(S'TVarList'
p187
S'forbidden'
p188
g188
S'set of forbidden attributes'
p189
I0
I0
I00
Ntp190
a(S'TVarListList'
p191
S'forbiddenSubSubsets'
p192
S'forbidden_sub_subsets'
p193
S'set of forbidden subsets (attributes that must not occur together)'
p194
I0
I0
I00
Ntp195
a(S'TVarList'
p196
S'varList'
p197
S'var_list'
p198
S'a set of attributes from which subsets are generated'
p199
I0
I0
I00
Ntp200
asg29
(dp201
sbsS'TEVDistList'
p202
(ipyprops
ClassDefinition
p203
(dp204
g4
I0
sg5
I01
sg6
g202
sg7
g136
sg9
I0
sg10
(lp205
sg12
(lp206
sg29
(dp207
sbsS'TValueFilterList'
p208
(ipyprops
ClassDefinition
p209
(dp210
g4
I0
sg5
I01
sg6
g208
sg7
g136
sg9
I0
sg10
(lp211
sg12
(lp212
sg29
(dp213
sbsS'TRuleBeamFilter_Python'
p214
(i__main__
ClassDefinition
p215
(dp216
g4
I1
sg5
I01
sg6
g214
sg7
S'TRuleBeamFilter'
p217
sg9
I00
sg10
(lp218
sg12
(lp219
sg29
(dp220
sbsS'TTreeExampleSplitter'
p221
(i__main__
ClassDefinition
p222
(dp223
g4
I1
sg5
I01
sg6
g221
sg7
S'TOrange'
p224
sg9
I01
sg10
(lp225
sg12
(lp226
sg29
(dp227
sbsS'TSVMClassifier'
p228
(i__main__
ClassDefinition
p229
(dp230
g4
I1
sg5
I01
sg6
g228
sg7
S'TClassifierFD'
p231
sg9
I00
sg10
(lp232
sg12
(lp233
(S'TIntList'
p234
S'nSV'
p235
S'n_SV'
p236
S'nSV'
p237
I0
I0
I00
Ntp238
a(S'TFloatList'
p239
S'rho'
p240
g240
S'rho'
p241
I0
I0
I00
Ntp242
a(S'TFloatListList'
p243
S'coef'
p244
g244
S'coef'
p245
I0
I0
I00
Ntp246
a(S'TFloatList'
p247
S'probA'
p248
S'prob_a'
p249
S'probA - pairwise probability information'
p250
I0
I0
I00
Ntp251
a(S'TFloatList'
p252
S'probB'
p253
S'prob_b'
p254
S'probB - pairwise probability information'
p255
I0
I0
I00
Ntp256
a(S'TExampleTable'
p257
S'supportVectors'
p258
S'support_vectors'
p259
S'support vectors'
p260
I0
I0
I00
Ntp261
a(S'TExampleTable'
p262
S'examples'
p263
g263
S'examples used to train the classifier'
p264
I0
I0
I00
Ntp265
a(S'TKernelFunc'
p266
S'kernelFunc'
p267
S'kernel_func'
p268
S'custom kernel function'
p269
I0
I0
I00
Ntp270
a(S'int'
p271
S'svm_type'
p272
g272
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p273
I0
I0
I01
S'SVMLearner_SVMType'
p274
tp275
a(S'int'
p276
S'kernel_type'
p277
g277
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p278
I0
I0
I01
S'SVMLearner_Kernel'
p279
tp280
a(S'TDomain'
p281
S'domain'
p282
g282
S'domain'
p283
I0
I0
I00
Ntp284
ag94
ag99
asg29
(dp285
sbsS'TFilteredGenerator'
p286
(i__main__
ClassDefinition
p287
(dp288
g4
I1
sg5
I01
sg6
g286
sg7
S'TAdapterGenerator'
p289
sg9
I00
sg10
(lp290
sg12
(lp291
(S'TFilter'
p292
S'filter'
p293
g293
S'decides which examples are skipped'
p294
I0
I0
I00
Ntp295
a(S'TDomain'
p296
S'domain'
p297
g297
S'domain'
p298
I0
I0
I00
Ntp299
a(S'int'
p300
S'version'
p301
g301
S'unique version identifier'
p302
I01
I0
I01
Ntp303
asg29
(dp304
sbsS'TPythonVariable'
p305
(i__main__
ClassDefinition
p306
(dp307
g4
I1
sg5
I01
sg6
g305
sg7
S'TVariable'
p308
sg9
I00
sg10
(lp309
sg12
(lp310
(S'bool'
p311
S'usePickle'
p312
S'use_pickle'
p313
S'tells whether to use pickle for saving to/loading from files'
p314
I0
I0
I01
Ntp315
a(S'bool'
p316
S'useSomeValue'
p317
S'use_some_value'
p318
S'tells whether the Variable will operate on Value or SomeValue (default)'
p319
I0
I0
I01
Ntp320
a(S'int'
p321
S'varType'
p322
S'var_type'
p323
S' variable type'
p324
I0
I0
I01
S'Variable_Type'
p325
tp326
a(S'bool'
p327
S'ordered'
p328
g328
S'variable values are ordered'
p329
I0
I0
I01
Ntp330
a(S'bool'
p331
S'distributed'
p332
g332
S'variable values are distributions'
p333
I0
I0
I01
Ntp334
a(S'int'
p335
S'defaultMetaId'
p336
S'default_meta_id'
p337
S'default (proposed, suggested...) meta id for this variable'
p338
I0
I0
I01
Ntp339
a(S'TRandomGenerator'
p340
S'randomGenerator'
p341
S'random_generator'
p342
S'random generator for random values (initialized when first needed)'
p343
I0
I0
I00
Ntp344
a(S'TVariable'
p345
S'sourceVariable'
p346
S'source_variable'
p347
S'The attribute that this attribute is computed from (when applicable)'
p348
I0
I0
I00
Ntp349
a(S'TClassifier'
p350
S'getValueFrom'
p351
S'get_value_from'
p352
S'Function to compute the value from values of other variables'
p353
I0
I0
I00
Ntp354
asg29
(dp355
sbsS'TTreeLearner'
p356
(i__main__
ClassDefinition
p357
(dp358
g4
I1
sg5
I01
sg6
g356
sg7
S'TLearner'
p359
sg9
I00
sg10
(lp360
sg12
(lp361
(S'TTreeSplitConstructor'
p362
S'split'
p363
g363
S'split criterion'
p364
I0
I0
I00
Ntp365
a(S'TTreeStopCriteria'
p366
S'stop'
p367
g367
S'stop criterion'
p368
I0
I0
I00
Ntp369
a(S'TComputeDomainContingency'
p370
S'contingencyComputer'
p371
S'contingency_computer'
p372
S'computes contingency matrix'
p373
I0
I0
I00
Ntp374
a(S'TLearner'
p375
S'nodeLearner'
p376
S'node_learner'
p377
S'node learner'
p378
I0
I0
I00
Ntp379
a(S'TTreeExampleSplitter'
p380
S'exampleSplitter'
p381
S'example_splitter'
p382
S'splits examples to branches'
p383
I0
I0
I00
Ntp384
a(S'int'
p385
S'maxDepth'
p386
S'max_depth'
p387
S'maximal tree depth (0 = root only, -1 = no limit)'
p388
I0
I0
I01
Ntp389
a(S'bool'
p390
S'storeExamples'
p391
S'store_examples'
p392
S'if true (default: false), learning examples in nodes are stored'
p393
I0
I0
I01
Ntp394
a(S'bool'
p395
S'storeDistributions'
p396
S'store_distributions'
p397
S'if true (default), class distributions of learning examples in nodes are stored'
p398
I0
I0
I01
Ntp399
a(S'bool'
p400
S'storeContingencies'
p401
S'store_contingencies'
p402
S'if true (default), contingency matrices for examples are stored'
p403
I0
I0
I01
Ntp404
a(S'bool'
p405
S'storeNodeClassifier'
p406
S'store_node_classifier'
p407
S'if true (default), the internal nodes have classifiers; needed for pruning'
p408
I0
I0
I01
Ntp409
a(S'TTreeDescender'
p410
S'descender'
p411
g411
S'descends down the tree'
p412
I0
I0
I00
Ntp413
ag110
asg29
(dp414
sbsS'TPreprocessor_shuffle'
p415
(i__main__
ClassDefinition
p416
(dp417
g4
I1
sg5
I01
sg6
g415
sg7
S'TPreprocessor'
p418
sg9
I00
sg10
(lp419
sg12
(lp420
(S'TVarList'
p421
S'attributes'
p422
g422
S'tells which attributes to shuffle'
p423
I0
I0
I00
Ntp424
a(S'TRandomGenerator'
p425
S'randomGenerator'
p426
S'random_generator'
p427
S'random number generator'
p428
I0
I0
I00
Ntp429
asg29
(dp430
sbsS'TLearner'
p431
(i__main__
ClassDefinition
p432
(dp433
g4
I1
sg5
I01
sg6
g431
sg7
S'TOrange'
p434
sg9
I00
sg10
(lp435
sg12
(lp436
g110
asg29
(dp437
sbsS'TExamplesDistance_Maximal'
p438
(i__main__
ClassDefinition
p439
(dp440
g4
I1
sg5
I01
sg6
g438
sg7
S'TExamplesDistance_Normalized'
p441
sg9
I00
sg10
(lp442
sg12
(lp443
(S'TAttributedFloatList'
p444
S'normalizers'
p445
g445
S'normalizing factors for attributes'
p446
I0
I0
I00
Ntp447
a(S'TAttributedFloatList'
p448
S'bases'
p449
g449
S'lowest values for attributes'
p450
I0
I0
I00
Ntp451
a(S'TAttributedFloatList'
p452
S'averages'
p453
g453
S'average values for continuous attribute values'
p454
I0
I0
I00
Ntp455
a(S'TAttributedFloatList'
p456
S'variances'
p457
g457
S'variations for continuous attribute values'
p458
I0
I0
I00
Ntp459
a(S'int'
p460
S'domainVersion'
p461
S'domain_version'
p462
S'version of domain on which the ranges were computed'
p463
I0
I0
I01
Ntp464
a(S'bool'
p465
S'normalize'
p466
g466
S'tells whether to normalize distances between attributes'
p467
I0
I0
I01
Ntp468
a(S'bool'
p469
S'ignoreUnknowns'
p470
S'ignore_unknowns'
p471
S'if true (default: false) unknown values are ignored in computation'
p472
I0
I0
I01
Ntp473
asg29
(dp474
sbsS'TSubsetsGenerator_withRestrictions_iterator'
p475
(i__main__
ClassDefinition
p476
(dp477
g4
I1
sg5
I01
sg6
g475
sg7
S'TSubsetsGenerator_iterator'
p478
sg9
I00
sg10
(lp479
sg12
(lp480
(S'TSubsetsGenerator_iterator'
p481
S'subGenerator_iterator'
p482
S'sub_generator_iterator'
p483
S'subset generator'
p484
I0
I0
I00
Ntp485
a(S'TVarList'
p486
S'required'
p487
g487
S'set of required attributes'
p488
I0
I0
I00
Ntp489
a(S'TVarList'
p490
S'forbidden'
p491
g491
S'set of forbidden attributes'
p492
I0
I0
I00
Ntp493
a(S'TVarListList'
p494
S'forbiddenSubSubsets'
p495
S'forbidden_sub_subsets'
p496
S'set of forbidden subsets (attributes that must not occur together)'
p497
I0
I0
I00
Ntp498
a(S'TVarList'
p499
S'varList'
p500
S'var_list'
p501
S'a set of attributes from which subsets are generated'
p502
I0
I0
I00
Ntp503
asg29
(dp504
sbsS'TPreprocessor_discretize'
p505
(i__main__
ClassDefinition
p506
(dp507
g4
I1
sg5
I01
sg6
g505
sg7
S'TPreprocessor'
p508
sg9
I00
sg10
(lp509
sg12
(lp510
(S'TVarList'
p511
S'attributes'
p512
g512
S'attributes to be discretized (all, if not defined or empty)'
p513
I0
I0
I00
Ntp514
a(S'bool'
p515
S'discretizeClass'
p516
S'discretize_class'
p517
S'also discretize the class attribute (default: false)'
p518
I0
I0
I01
Ntp519
a(S'TDiscretization'
p520
S'method'
p521
g521
S'discretization method'
p522
I0
I0
I00
Ntp523
asg29
(dp524
sbsS'TRuleClassifier_logit'
p525
(i__main__
ClassDefinition
p526
(dp527
g4
I1
sg5
I01
sg6
g525
sg7
S'TRuleClassifier'
p528
sg9
I00
sg10
(lp529
sg12
(lp530
(S'TDistribution'
p531
S'prior'
p532
g532
S'prior distribution'
p533
I0
I0
I00
Ntp534
a(S'TDomain'
p535
S'domain'
p536
g536
S'Domain'
p537
I0
I0
I00
Ntp538
a(S'TFloatList'
p539
S'ruleBetas'
p540
S'rule_betas'
p541
S'Rule betas'
p542
I0
I0
I00
Ntp543
a(S'float'
p544
S'minSignificance'
p545
S'min_significance'
p546
S'minimum requested significance for betas. '
p547
I0
I0
I01
Ntp548
a(S'float'
p549
S'minBeta'
p550
S'min_beta'
p551
S'minimum beta by rule to be included in the model. '
p552
I0
I0
I01
Ntp553
a(S'bool'
p554
S'setPrefixRules'
p555
S'set_prefix_rules'
p556
S'should we order prefix rules ? '
p557
I0
I0
I01
Ntp558
a(S'bool'
p559
S'optimizeBetasFlag'
p560
S'optimize_betas_flag'
p561
S'should we assign betas to rules ? '
p562
I0
I0
I01
Ntp563
a(S'float'
p564
S'penalty'
p565
g565
S''
p566
I0
I0
I01
Ntp567
a(S'TClassifier'
p568
S'priorClassifier'
p569
S'prior_classifier'
p570
S'prior classifier used if provided'
p571
I0
I0
I00
Ntp572
a(S'TLogitClassifierState'
p573
S'currentState'
p574
S'current_state'
p575
g566
I0
I0
I00
Ntp576
a(S'TFloatList'
p577
S'wsd'
p578
g578
g566
I0
I0
I00
Ntp579
a(S'TFloatList'
p580
S'wavgCov'
p581
S'wavg_cov'
p582
g566
I0
I0
I00
Ntp583
a(S'TFloatList'
p584
S'wSatQ'
p585
S'w_sat_q'
p586
g566
I0
I0
I00
Ntp587
a(S'TFloatList'
p588
S'wsig'
p589
g589
g566
I0
I0
I00
Ntp590
a(S'TRuleList'
p591
S'prefixRules'
p592
S'prefix_rules'
p593
S'rules that trigger before logit sum.'
p594
I0
I0
I00
Ntp595
a(S'TRuleList'
p596
S'rules'
p597
g597
g566
I0
I0
I00
Ntp598
a(S'TExampleTable'
p599
S'examples'
p600
g600
g566
I0
I0
I00
Ntp601
a(S'int'
p602
S'weightID'
p603
S'weight_ID'
p604
g566
I0
I0
I01
Ntp605
ag94
ag99
asg29
(dp606
sbsS'TProgressCallback_Python'
p607
(i__main__
ClassDefinition
p608
(dp609
g4
I1
sg5
I01
sg6
g607
sg7
S'TProgressCallback'
p610
sg9
I00
sg10
(lp611
sg12
(lp612
sg29
(dp613
sbsS'TImputeClassifier'
p614
(i__main__
ClassDefinition
p615
(dp616
g4
I1
sg5
I01
sg6
g614
sg7
S'TClassifier'
p617
sg9
I00
sg10
(lp618
sg12
(lp619
(S'TClassifierFromVar'
p620
S'classifierFromVar'
p621
S'classifier_from_var'
p622
S'ClassifierFromVar that is used to retrieve defined values'
p623
I0
I0
I00
Ntp624
a(S'TClassifier'
p625
S'imputer'
p626
g626
S'classifier that is used to determine the missing values '
p627
I0
I0
I00
Ntp628
ag94
ag99
asg29
(dp629
sbsS'TRuleCovererAndRemover'
p630
(i__main__
ClassDefinition
p631
(dp632
g4
I1
sg5
I01
sg6
g630
sg7
S'TOrange'
p633
sg9
I01
sg10
(lp634
sg12
(lp635
sg29
(dp636
sbsS'TFilterList'
p637
(ipyprops
ClassDefinition
p638
(dp639
g4
I0
sg5
I01
sg6
g637
sg7
g136
sg9
I0
sg10
(lp640
sg12
(lp641
sg29
(dp642
sbsS'TPythonValue'
p643
(i__main__
ClassDefinition
p644
(dp645
g4
I1
sg5
I01
sg6
g643
sg7
S'TSomeValue'
p646
sg9
I00
sg10
(lp647
sg12
(lp648
sg29
(dp649
sbsS'TAssociationRulesSparseInducer'
p650
(i__main__
ClassDefinition
p651
(dp652
g4
I1
sg5
I01
sg6
g650
sg7
S'TOrange'
p653
sg9
I00
sg10
(lp654
sg12
(lp655
(S'int'
p656
S'maxItemSets'
p657
S'max_item_sets'
p658
S'maximal number of itemsets (increase if you want)'
p659
I0
I0
I01
Ntp660
a(S'float'
p661
S'confidence'
p662
g662
S'required confidence'
p663
I0
I0
I01
Ntp664
a(S'float'
p665
S'support'
p666
g666
S'required support'
p667
I0
I0
I01
Ntp668
a(S'bool'
p669
S'storeExamples'
p670
S'store_examples'
p671
S'stores examples corresponding to rules'
p672
I0
I0
I01
Ntp673
asg29
(dp674
sbsS'TFilter_sameExample'
p675
(i__main__
ClassDefinition
p676
(dp677
g4
I1
sg5
I01
sg6
g675
sg7
S'TFilter'
p678
sg9
I00
sg10
(lp679
sg12
(lp680
(S'TExample'
p681
S'example'
p682
g682
S'example with which examples are compared'
p683
I0
I0
I00
Ntp684
a(S'bool'
p685
S'negate'
p686
g686
S'if true, filter output should be negated.'
p687
I0
I0
I01
Ntp688
a(S'TDomain'
p689
S'domain'
p690
g690
S'domain to which the examples are converted (if needed)'
p691
I0
I0
I00
Ntp692
asg29
(dp693
sbsS'TRuleClassifierConstructor'
p694
(i__main__
ClassDefinition
p695
(dp696
g4
I1
sg5
I01
sg6
g694
sg7
S'TOrange'
p697
sg9
I01
sg10
(lp698
sg12
(lp699
sg29
(dp700
sbsS'TMakeRandomIndicesMultiple'
p701
(i__main__
ClassDefinition
p702
(dp703
g4
I1
sg5
I01
sg6
g701
sg7
S'TMakeRandomIndices'
p704
sg9
I00
sg10
(lp705
sg12
(lp706
(S'int'
p707
S'stratified'
p708
g708
S' requests stratified distributions'
p709
I0
I0
I01
S'MakeRandomIndices_Stratification'
p710
tp711
a(S'int'
p712
S'randseed'
p713
g713
S'a seed for random generator'
p714
I0
I0
I01
Ntp715
a(S'TRandomGenerator'
p716
S'randomGenerator'
p717
S'random_generator'
p718
S'a random generator'
p719
I0
I0
I00
Ntp720
asg29
(dp721
sbsS'TLearnerFD'
p722
(i__main__
ClassDefinition
p723
(dp724
g4
I1
sg5
I01
sg6
g722
sg7
S'TLearner'
p725
sg9
I00
sg10
(lp726
sg12
(lp727
(S'TDomain'
p728
S'domain'
p729
g729
S'domain'
p730
I0
I0
I00
Ntp731
ag110
asg29
(dp732
sbsS'TP2NN'
p733
(i__main__
ClassDefinition
p734
(dp735
g4
I1
sg5
I01
sg6
g733
sg7
S'TPNN'
p736
sg9
I00
sg10
(lp737
sg12
(lp738
(S'int'
p739
S'dimensions'
p740
g740
S'the number of dimensions'
p741
I01
I0
I01
Ntp742
a(S'TFloatList'
p743
S'offsets'
p744
g744
S'offsets to subtract from the attribute values'
p745
I0
I0
I00
Ntp746
a(S'TFloatList'
p747
S'normalizers'
p748
g748
S'number to divide the values by'
p749
I0
I0
I00
Ntp750
a(S'TFloatList'
p751
S'averages'
p752
g752
S'numbers to use instead of the missing'
p753
I0
I0
I00
Ntp754
a(S'bool'
p755
S'normalizeExamples'
p756
S'normalize_examples'
p757
S'if true, attribute values are divided to sum up to 1'
p758
I0
I0
I01
Ntp759
a(S'int'
p760
S'nExamples'
p761
S'n_examples'
p762
S'the number of examples'
p763
I01
I0
I01
Ntp764
a(S'int'
p765
S'law'
p766
g766
S'law'
p767
I0
I0
I01
Ntp768
ag284
ag94
ag99
asg29
(dp769
sbsS'TTreeSplitConstructor'
p770
(i__main__
ClassDefinition
p771
(dp772
g4
I1
sg5
I01
sg6
g770
sg7
S'TOrange'
p773
sg9
I01
sg10
(lp774
sg12
(lp775
(S'float'
p776
S'minSubset'
p777
S'min_subset'
p778
S'minimal number of examples in a subset'
p779
I0
I0
I01
Ntp780
asg29
(dp781
sbsS'TMultiClassifier'
p782
(i__main__
ClassDefinition
p783
(dp784
g4
I1
sg5
I01
sg6
g782
sg7
S'TOrange'
p785
sg9
I00
sg10
(lp786
sg12
(lp787
(S'TVarList'
p788
S'classVars'
p789
S'class_vars'
p790
S'class variables'
p791
I0
I0
I00
Ntp792
a(S'TDomain'
p793
S'domain'
p794
g794
S'domain'
p795
I0
I0
I00
Ntp796
a(S'bool'
p797
S'computesProbabilities'
p798
S'computes_probabilities'
p799
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p800
I0
I0
I01
Ntp801
asg29
(dp802
sbsS'TMapIntValue'
p803
(i__main__
ClassDefinition
p804
(dp805
g4
I1
sg5
I01
sg6
g803
sg7
S'TTransformValue'
p806
sg9
I00
sg10
(lp807
sg12
(lp808
(S'TIntList'
p809
S'mapping'
p810
g810
S'a lookup table'
p811
I0
I0
I00
Ntp812
a(S'TTransformValue'
p813
S'subTransform'
p814
S'sub_transform'
p815
S'transformation executed prior to this'
p816
I0
I0
I00
Ntp817
asg29
(dp818
sbsS'TDistributionAssessor_Kramer'
p819
(i__main__
ClassDefinition
p820
(dp821
g4
I1
sg5
I01
sg6
g819
sg7
S'TDistributionAssessor'
p822
sg9
I00
sg10
(lp823
sg12
(lp824
sg29
(dp825
sbsS'TTreeExampleSplitter_UnknownsToBranch'
p826
(i__main__
ClassDefinition
p827
(dp828
g4
I1
sg5
I01
sg6
g826
sg7
S'TTreeExampleSplitter'
p829
sg9
I00
sg10
(lp830
sg12
(lp831
sg29
(dp832
sbsS'TMajorityLearner'
p833
(i__main__
ClassDefinition
p834
(dp835
g4
I1
sg5
I01
sg6
g833
sg7
S'TLearner'
p836
sg9
I00
sg10
(lp837
sg12
(lp838
(S'TProbabilityEstimatorConstructor'
p839
S'estimatorConstructor'
p840
S'estimator_constructor'
p841
S'constructs probability estimator'
p842
I0
I0
I00
Ntp843
a(S'TDistribution'
p844
S'aprioriDistribution'
p845
S'apriori_distribution'
p846
S'apriori class distribution'
p847
I0
I0
I00
Ntp848
ag110
asg29
(dp849
sbsS'TEVDistGetter_Standard'
p850
(i__main__
ClassDefinition
p851
(dp852
g4
I1
sg5
I01
sg6
g850
sg7
S'TEVDistGetter'
p853
sg9
I00
sg10
(lp854
sg12
(lp855
(S'TEVDistList'
p856
S'dists'
p857
g857
S'EVC distribution (sorted by rule length, 0 = for rules without conditions)'
p858
I0
I0
I00
Ntp859
asg29
(dp860
sbsS'TFeatureByIM'
p861
(i__main__
ClassDefinition
p862
(dp863
g4
I1
sg5
I01
sg6
g861
sg7
S'TFeatureInducer'
p864
sg9
I00
sg10
(lp865
sg12
(lp866
(S'TIMConstructor'
p867
S'IMconstructor'
p868
g868
S'incompatibility matrix constructor'
p869
I0
I0
I00
Ntp870
a(S'TClustersFromIM'
p871
S'clustersFromIM'
p872
S'clusters_from_IM'
p873
S'clustering algorithm'
p874
I0
I0
I00
Ntp875
a(S'int'
p876
S'completion'
p877
g877
S' decides how to determine the class for points not covered by any cluster'
p878
I0
I0
I01
S'FeatureByIM_Completion'
p879
tp880
asg29
(dp881
S'Completion'
p882
(lp883
(S'NoCompletion'
p884
S'completion_no'
p885
tp886
a(S'CompletionByDefault'
p887
S'completion_default'
p888
tp889
a(S'CompletionByBayes'
p890
S'completion_bayes'
p891
tp892
assbsS'TMeasureAttributeFromProbabilities'
p893
(i__main__
ClassDefinition
p894
(dp895
g4
I1
sg5
I01
sg6
g893
sg7
S'TMeasureAttribute'
p896
sg9
I01
sg10
(lp897
sg12
(lp898
(S'TProbabilityEstimatorConstructor'
p899
S'estimatorConstructor'
p900
S'estimator_constructor'
p901
S'probability estimator (none by default)'
p902
I0
I0
I00
Ntp903
a(S'TConditionalProbabilityEstimatorConstructor'
p904
S'conditionalEstimatorConstructor'
p905
S'conditional_estimator_constructor'
p906
S'conditional probability estimator (none by default)'
p907
I0
I0
I00
Ntp908
a(S'int'
p909
S'unknownsTreatment'
p910
S'unknowns_treatment'
p911
S' treatment of unknown values'
p912
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p913
tp914
a(S'int'
p915
S'needs'
p916
g916
S' describes what kind of data is needed for computation'
p917
I0
I0
I01
S'MeasureAttribute_Needs'
p918
tp919
a(S'bool'
p920
S'handlesDiscrete'
p921
S'handles_discrete'
p922
S'tells whether the measure can handle discrete attributes'
p923
I0
I0
I01
Ntp924
a(S'bool'
p925
S'handlesContinuous'
p926
S'handles_continuous'
p927
S'tells whether the measure can handle continuous attributes'
p928
I0
I0
I01
Ntp929
a(S'bool'
p930
S'computesThresholds'
p931
S'computes_thresholds'
p932
S'tells whether the measure can compute threshold functions/maxima for continuous attributes'
p933
I0
I0
I01
Ntp934
asg29
(dp935
sbsS'TProbabilityEstimatorConstructor_relative'
p936
(i__main__
ClassDefinition
p937
(dp938
g4
I1
sg5
I01
sg6
g936
sg7
S'TProbabilityEstimatorConstructor'
p939
sg9
I00
sg10
(lp940
sg12
(lp941
sg29
(dp942
sbsS'TClassifierByLookupTable3'
p943
(i__main__
ClassDefinition
p944
(dp945
g4
I1
sg5
I01
sg6
g943
sg7
S'TClassifierByLookupTable'
p946
sg9
I00
sg10
(lp947
sg12
(lp948
(S'TVariable'
p949
S'variable1'
p950
g950
S'the first attribute used for classification'
p951
I01
I0
I00
Ntp952
a(S'TVariable'
p953
S'variable2'
p954
g954
S'the second attribute used for classification'
p955
I01
I0
I00
Ntp956
a(S'TVariable'
p957
S'variable3'
p958
g958
S'the third attribute used for classification'
p959
I01
I0
I00
Ntp960
a(S'int'
p961
S'noOfValues1'
p962
S'no_of_values1'
p963
S'number of values of the first attribute'
p964
I01
I0
I01
Ntp965
a(S'int'
p966
S'noOfValues2'
p967
S'no_of_values2'
p968
S'number of values of the second attribute'
p969
I01
I0
I01
Ntp970
a(S'int'
p971
S'noOfValues3'
p972
S'no_of_values3'
p973
S'number of values of the third attribute'
p974
I01
I0
I01
Ntp975
a(S'TEFMDataDescription'
p976
S'dataDescription'
p977
S'data_description'
p978
S'data description'
p979
I0
I0
I00
Ntp980
ag85
ag89
ag94
ag99
asg29
(dp981
sbsS'TImputerConstructor_maximal'
p982
(i__main__
ClassDefinition
p983
(dp984
g4
I1
sg5
I01
sg6
g982
sg7
S'TImputerConstructor'
p985
sg9
I00
sg10
(lp986
sg12
(lp987
g157
asg29
(dp988
sbsS'TRuleBeamRefiner'
p989
(i__main__
ClassDefinition
p990
(dp991
g4
I1
sg5
I01
sg6
g989
sg7
S'TOrange'
p992
sg9
I01
sg10
(lp993
sg12
(lp994
sg29
(dp995
sbsS'TSubsetsGenerator_iterator'
p996
(i__main__
ClassDefinition
p997
(dp998
g4
I1
sg5
I01
sg6
g996
sg7
S'TOrange'
p999
sg9
I01
sg10
(lp1000
sg12
(lp1001
g503
asg29
(dp1002
sbsS'TEquiDistDiscretizer'
p1003
(i__main__
ClassDefinition
p1004
(dp1005
g4
I1
sg5
I01
sg6
g1003
sg7
S'TDiscretizer'
p1006
sg9
I00
sg10
(lp1007
sg12
(lp1008
(S'int'
p1009
S'numberOfIntervals'
p1010
(g1010
S'n'
p1011
tp1012
S' number of intervals'
p1013
I0
I0
I01
Ntp1014
a(S'float'
p1015
S'firstCut'
p1016
S'first_cut'
p1017
S'the first cut-off point'
p1018
I0
I0
I01
Ntp1019
a(S'float'
p1020
S'step'
p1021
g1021
S'step (width of interval)'
p1022
I0
I0
I01
Ntp1023
ag817
asg29
(dp1024
sbsS'TValueFilter_string'
p1025
(i__main__
ClassDefinition
p1026
(dp1027
g4
I1
sg5
I01
sg6
g1025
sg7
S'TValueFilter'
p1028
sg9
I00
sg10
(lp1029
sg12
(lp1030
(S'string'
p1031
S'min'
p1032
(g1032
S'ref'
p1033
tp1034
S' reference value (lower bound for interval operators)'
p1035
I0
I0
I01
Ntp1036
a(S'string'
p1037
S'max'
p1038
g1038
S'upper bound for interval operators'
p1039
I0
I0
I01
Ntp1040
a(S'int'
p1041
S'oper'
p1042
g1042
S' operator'
p1043
I0
I0
I01
S'ValueFilter_Operator'
p1044
tp1045
a(S'bool'
p1046
S'caseSensitive'
p1047
S'case_sensitive'
p1048
S'if true (default), the operator is case sensitive'
p1049
I0
I0
I01
Ntp1050
a(S'int'
p1051
S'position'
p1052
g1052
S"attribute's position in domain"
p1053
I0
I0
I01
Ntp1054
a(S'int'
p1055
S'acceptSpecial'
p1056
S'accept_special'
p1057
S'tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)'
p1058
I0
I0
I01
Ntp1059
asg29
(dp1060
sbsS'TFindNearest_BruteForce'
p1061
(i__main__
ClassDefinition
p1062
(dp1063
g4
I1
sg5
I01
sg6
g1061
sg7
S'TFindNearest'
p1064
sg9
I00
sg10
(lp1065
sg12
(lp1066
(S'TExamplesDistance'
p1067
S'distance'
p1068
g1068
S'metrics'
p1069
I0
I0
I00
Ntp1070
a(S'TExampleGenerator'
p1071
S'examples'
p1072
g1072
S'a list of stored examples'
p1073
I0
I0
I00
Ntp1074
a(S'int'
p1075
S'weightID'
p1076
S'weight_ID'
p1077
S'weight to use when counting examples'
p1078
I0
I0
I01
Ntp1079
a(S'int'
p1080
S'distanceID'
p1081
S'distance_ID'
p1082
S'id of meta attribute where the distance should be stored (0 = no storing)'
p1083
I0
I0
I01
Ntp1084
a(S'bool'
p1085
S'includeSame'
p1086
S'include_same'
p1087
S'tells whether to include examples that are same as the reference example'
p1088
I0
I0
I01
Ntp1089
asg29
(dp1090
sbsS'TRuleBeamInitializer'
p1091
(i__main__
ClassDefinition
p1092
(dp1093
g4
I1
sg5
I01
sg6
g1091
sg7
S'TOrange'
p1094
sg9
I01
sg10
(lp1095
sg12
(lp1096
sg29
(dp1097
sbsS'TMeasureAttribute_relevance'
p1098
(i__main__
ClassDefinition
p1099
(dp1100
g4
I1
sg5
I01
sg6
g1098
sg7
S'TMeasureAttributeFromProbabilities'
p1101
sg9
I00
sg10
(lp1102
sg12
(lp1103
g903
ag908
ag914
ag919
ag924
ag929
ag934
asg29
(dp1104
sbsS'TFilter_hasSpecial'
p1105
(i__main__
ClassDefinition
p1106
(dp1107
g4
I1
sg5
I01
sg6
g1105
sg7
S'TFilter'
p1108
sg9
I00
sg10
(lp1109
sg12
(lp1110
g688
ag692
asg29
(dp1111
sbsS'TDiscDistribution'
p1112
(i__main__
ClassDefinition
p1113
(dp1114
g4
I1
sg5
I01
sg6
g1112
sg7
S'TDistribution'
p1115
sg9
I00
sg10
(lp1116
sg12
(lp1117
(S'TFloatList'
p1118
S'variances'
p1119
g1119
S'variances'
p1120
I0
I0
I00
Ntp1121
a(S'TVariable'
p1122
S'variable'
p1123
g1123
S'attribute descriptor (optional)'
p1124
I0
I0
I00
Ntp1125
a(S'float'
p1126
S'unknowns'
p1127
g1127
S'number of unknown values'
p1128
I0
I0
I01
Ntp1129
a(S'float'
p1130
S'abs'
p1131
g1131
S'sum of frequencies (not including unknown values!)'
p1132
I0
I0
I01
Ntp1133
a(S'float'
p1134
S'cases'
p1135
g1135
S"number of cases; as abs, but doesn't change at *= and normalize()"
p1136
I0
I0
I01
Ntp1137
a(S'bool'
p1138
S'normalized'
p1139
g1139
S'distribution is normalized'
p1140
I0
I0
I01
Ntp1141
a(S'bool'
p1142
S'supportsDiscrete'
p1143
S'supports_discrete'
p1144
S'distribution supports discrete interface'
p1145
I01
I0
I01
Ntp1146
a(S'bool'
p1147
S'supportsContinuous'
p1148
S'supports_continuous'
p1149
S'distribution supports continuous interface'
p1150
I01
I0
I01
Ntp1151
a(S'TRandomGenerator'
p1152
S'randomGenerator'
p1153
S'random_generator'
p1154
S'random generator; initialized when needed, if not given earlier'
p1155
I0
I0
I00
Ntp1156
asg29
(dp1157
sbsS'TBayesLearner'
p1158
(i__main__
ClassDefinition
p1159
(dp1160
g4
I1
sg5
I01
sg6
g1158
sg7
S'TLearner'
p1161
sg9
I00
sg10
(lp1162
sg12
(lp1163
(S'TProbabilityEstimatorConstructor'
p1164
S'estimatorConstructor'
p1165
S'estimator_constructor'
p1166
S'constructs a probability estimator for P(C)'
p1167
I0
I0
I00
Ntp1168
a(S'TConditionalProbabilityEstimatorConstructor'
p1169
S'conditionalEstimatorConstructor'
p1170
S'conditional_estimator_constructor'
p1171
S'constructs a probability estimator for P(C|A) '
p1172
I0
I0
I00
Ntp1173
a(S'TConditionalProbabilityEstimatorConstructor'
p1174
S'conditionalEstimatorConstructorContinuous'
p1175
S'conditional_estimator_constructor_continuous'
p1176
S'constructs a probability estimator for P(C|A) for continuous attributes'
p1177
I0
I0
I00
Ntp1178
a(S'bool'
p1179
S'normalizePredictions'
p1180
S'normalize_predictions'
p1181
S'instructs learner to construct a classifier that normalizes probabilities'
p1182
I0
I0
I01
Ntp1183
a(S'bool'
p1184
S'adjustThreshold'
p1185
S'adjust_threshold'
p1186
S'adjust probability thresholds (for binary classes only)'
p1187
I0
I0
I01
Ntp1188
ag110
asg29
(dp1189
sbsS'TIMByRelief'
p1190
(i__main__
ClassDefinition
p1191
(dp1192
g4
I1
sg5
I01
sg6
g1190
sg7
S'TIMConstructor'
p1193
sg9
I00
sg10
(lp1194
sg12
(lp1195
(S'TExamplesDistance_Relief'
p1196
S'distance'
p1197
g1197
S'distance measure'
p1198
I0
I0
I00
Ntp1199
a(S'float'
p1200
S'k'
p1201
g1201
S'number of neighbours'
p1202
I0
I0
I01
Ntp1203
a(S'float'
p1204
S'm'
p1205
g1205
S'number of reference examples'
p1206
I0
I0
I01
Ntp1207
a(S'float'
p1208
S'kFromColumns'
p1209
S'k_from_columns'
p1210
S'if positive, number of neighbours is #columns*kFromColumns'
p1211
I0
I0
I01
Ntp1212
a(S'bool'
p1213
S'ignoreSameExample'
p1214
S'ignore_same_example'
p1215
S'does not put reference example into M'
p1216
I0
I0
I01
Ntp1217
a(S'bool'
p1218
S'convertToBinary'
p1219
S'convert_to_binary'
p1220
S'convert to binary class (hit-miss)'
p1221
I0
I0
I01
Ntp1222
a(S'bool'
p1223
S'correctClassFirst'
p1224
S'correct_class_first'
p1225
S'puts the correct class proportion to the first place'
p1226
I0
I0
I01
Ntp1227
a(S'bool'
p1228
S'allExamples'
p1229
S'all_examples'
p1230
S'uses all examples for reference examples'
p1231
I0
I0
I01
Ntp1232
a(S'bool'
p1233
S'allSameNeighbours'
p1234
S'all_same_neighbours'
p1235
S'uses all the examples same to the reference as neighbours'
p1236
I0
I0
I01
Ntp1237
a(S'bool'
p1238
S'recordRowExamples'
p1239
S'record_row_examples'
p1240
S'enables creation of rowExample list'
p1241
I0
I0
I01
Ntp1242
asg29
(dp1243
sbsS'TConditionalProbabilityEstimator'
p1244
(i__main__
ClassDefinition
p1245
(dp1246
g4
I1
sg5
I01
sg6
g1244
sg7
S'TOrange'
p1247
sg9
I01
sg10
(lp1248
sg12
(lp1249
g126
ag131
asg29
(dp1250
sbsS'TColumnAssessor_Laplace'
p1251
(i__main__
ClassDefinition
p1252
(dp1253
g4
I1
sg5
I01
sg6
g1251
sg7
S'TColumnAssessor'
p1254
sg9
I00
sg10
(lp1255
sg12
(lp1256
sg29
(dp1257
sbsS'TPreprocessor_addGaussianNoise'
p1258
(i__main__
ClassDefinition
p1259
(dp1260
g4
I1
sg5
I01
sg6
g1258
sg7
S'TPreprocessor'
p1261
sg9
I00
sg10
(lp1262
sg12
(lp1263
(S'TVariableFloatMap'
p1264
S'deviations'
p1265
g1265
S'deviations individual attribute values'
p1266
I0
I0
I00
Ntp1267
a(S'float'
p1268
S'defaultDeviation'
p1269
S'default_deviation'
p1270
S'default deviation'
p1271
I0
I0
I01
Ntp1272
a(S'TRandomGenerator'
p1273
S'randomGenerator'
p1274
S'random_generator'
p1275
S'random number generator'
p1276
I0
I0
I00
Ntp1277
asg29
(dp1278
sbsS'TRuleStoppingCriteria_NegativeDistribution'
p1279
(i__main__
ClassDefinition
p1280
(dp1281
g4
I1
sg5
I01
sg6
g1279
sg7
S'TRuleStoppingCriteria'
p1282
sg9
I00
sg10
(lp1283
sg12
(lp1284
sg29
(dp1285
sbsS'TTreeSplitConstructor_ExhaustiveBinary'
p1286
(i__main__
ClassDefinition
p1287
(dp1288
g4
I1
sg5
I01
sg6
g1286
sg7
S'TTreeSplitConstructor_Measure'
p1289
sg9
I00
sg10
(lp1290
sg12
(lp1291
(S'TMeasureAttribute'
p1292
S'measure'
p1293
g1293
S'attribute quality measure'
p1294
I0
I0
I00
Ntp1295
a(S'float'
p1296
S'worstAcceptable'
p1297
S'worst_acceptable'
p1298
S'the worst acceptable quality of the attribute'
p1299
I0
I0
I01
Ntp1300
ag780
asg29
(dp1301
sbsS'TTreeClassifier'
p1302
(i__main__
ClassDefinition
p1303
(dp1304
g4
I1
sg5
I01
sg6
g1302
sg7
S'TClassifierFD'
p1305
sg9
I00
sg10
(lp1306
sg12
(lp1307
(S'TTreeNode'
p1308
S'tree'
p1309
g1309
S'decision tree'
p1310
I0
I0
I00
Ntp1311
a(S'TTreeDescender'
p1312
S'descender'
p1313
g1313
S'object that descends down the tree'
p1314
I0
I0
I00
Ntp1315
ag284
ag94
ag99
asg29
(dp1316
sbsS'TFilter_compatibleExample'
p1317
(i__main__
ClassDefinition
p1318
(dp1319
g4
I1
sg5
I01
sg6
g1317
sg7
S'TFilter'
p1320
sg9
I00
sg10
(lp1321
sg12
(lp1322
(S'TExample'
p1323
S'example'
p1324
g1324
S'example with which examples are compared'
p1325
I0
I0
I00
Ntp1326
ag688
ag692
asg29
(dp1327
sbsS'TRemoveRedundant'
p1328
(i__main__
ClassDefinition
p1329
(dp1330
g4
I1
sg5
I01
sg6
g1328
sg7
S'TOrange'
p1331
sg9
I01
sg10
(lp1332
sg12
(lp1333
(S'bool'
p1334
S'keepValues'
p1335
S'keep_values'
p1336
S'keep an attribute if number values is only smaller, not one'
p1337
I0
I0
I01
Ntp1338
asg29
(dp1339
sbsS'TExamplesDistanceConstructor_Hamming'
p1340
(i__main__
ClassDefinition
p1341
(dp1342
g4
I1
sg5
I01
sg6
g1340
sg7
S'TExamplesDistanceConstructor'
p1343
sg9
I00
sg10
(lp1344
sg12
(lp1345
(S'bool'
p1346
S'ignoreClass'
p1347
S'ignore_class'
p1348
S'if true (default), class value is ignored when computing distances'
p1349
I0
I0
I01
Ntp1350
a(S'bool'
p1351
S'ignoreUnknowns'
p1352
S'ignore_unknowns'
p1353
S'if true (default: false) unknown values are ignored in computation'
p1354
I0
I0
I01
Ntp1355
a(S'bool'
p1356
S'ignoreClass'
p1357
S'ignore_class'
p1358
S'if true (default), class value is ignored when computing distances'
p1359
I0
I0
I01
Ntp1360
asg29
(dp1361
sbsS'TSomeValue'
p1362
(i__main__
ClassDefinition
p1363
(dp1364
g4
I1
sg5
I01
sg6
g1362
sg7
S'TOrange'
p1365
sg9
I01
sg10
(lp1366
sg12
(lp1367
sg29
(dp1368
sbsS'TRuleClassifierConstructor_firstRule'
p1369
(i__main__
ClassDefinition
p1370
(dp1371
g4
I1
sg5
I01
sg6
g1369
sg7
S'TRuleClassifierConstructor'
p1372
sg9
I00
sg10
(lp1373
sg12
(lp1374
sg29
(dp1375
sbsS'TStopDistributionClustering_noProfit'
p1376
(i__main__
ClassDefinition
p1377
(dp1378
g4
I1
sg5
I01
sg6
g1376
sg7
S'TStopDistributionClustering'
p1379
sg9
I00
sg10
(lp1380
sg12
(lp1381
(S'float'
p1382
S'minProfitProportion'
p1383
S'min_profit_proportion'
p1384
S'minimal allowable profit proportion'
p1385
I0
I0
I01
Ntp1386
asg29
(dp1387
sbsS'TBiModalDiscretization'
p1388
(i__main__
ClassDefinition
p1389
(dp1390
g4
I1
sg5
I01
sg6
g1388
sg7
S'TDiscretization'
p1391
sg9
I00
sg10
(lp1392
sg12
(lp1393
(S'bool'
p1394
S'splitInTwo'
p1395
S'split_in_two'
p1396
S'if true (default), flanks are merged into a single interval'
p1397
I0
I0
I01
Ntp1398
asg29
(dp1399
sbsS'TColoredIG'
p1400
(i__main__
ClassDefinition
p1401
(dp1402
g4
I1
sg5
I01
sg6
g1400
sg7
S'TGeneralExampleClustering'
p1403
sg9
I00
sg10
(lp1404
sg12
(lp1405
(S'TIG'
p1406
S'ig'
p1407
g1407
S'incompatibility graph'
p1408
I0
I0
I00
Ntp1409
a(S'TIntList'
p1410
S'colors'
p1411
g1411
S'colors (one element corresponding to each ig node)'
p1412
I0
I0
I00
Ntp1413
asg29
(dp1414
sbsS'TMeasureAttribute'
p1415
(i__main__
ClassDefinition
p1416
(dp1417
g4
I1
sg5
I01
sg6
g1415
sg7
S'TOrange'
p1418
sg9
I00
sg10
(lp1419
sg12
(lp1420
g919
ag924
ag929
ag934
asg29
(dp1421
S'Needs'
p1422
(lp1423
(S'Contingency_Class'
p1424
I0
tp1425
a(S'DomainContingency'
p1426
I1
tp1427
a(S'Generator'
p1428
I2
tp1429
asS'UnknownsTreatment'
p1430
(lp1431
(S'IgnoreUnknowns'
p1432
I0
tp1433
a(S'ReduceByUnknowns'
p1434
I1
tp1435
a(S'UnknownsToCommon'
p1436
I2
tp1437
a(S'UnknownsAsValue'
p1438
I3
tp1439
assbsS'TRuleEvaluator'
p1440
(i__main__
ClassDefinition
p1441
(dp1442
g4
I1
sg5
I01
sg6
g1440
sg7
S'TOrange'
p1443
sg9
I01
sg10
(lp1444
sg12
(lp1445
sg29
(dp1446
sbsS'TStringVariable'
p1447
(i__main__
ClassDefinition
p1448
(dp1449
g4
I1
sg5
I01
sg6
g1447
sg7
S'TVariable'
p1450
sg9
I00
sg10
(lp1451
sg12
(lp1452
g326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp1453
sbsS'TAssessIMQuality'
p1454
(i__main__
ClassDefinition
p1455
(dp1456
g4
I1
sg5
I01
sg6
g1454
sg7
S'TOrange'
p1457
sg9
I00
sg10
(lp1458
sg12
(lp1459
(S'TColumnAssessor'
p1460
S'columnAssessor'
p1461
S'column_assessor'
p1462
S'column quality assessor'
p1463
I0
I0
I00
Ntp1464
asg29
(dp1465
sbsS'TGraphAsTree'
p1466
(i__main__
ClassDefinition
p1467
(dp1468
g4
I1
sg5
I01
sg6
g1466
sg7
S'TGraph'
p1469
sg9
I00
sg10
(lp1470
sg12
(lp1471
(S'int'
p1472
S'nVertices'
p1473
S'n_vertices'
p1474
S'the number of vertices'
p1475
I01
I0
I01
Ntp1476
a(S'int'
p1477
S'nEdgeTypes'
p1478
S'n_edge_types'
p1479
S'the number of edge types'
p1480
I01
I0
I01
Ntp1481
a(S'bool'
p1482
S'directed'
p1483
g1483
S'directed'
p1484
I01
I0
I01
Ntp1485
asg29
(dp1486
sbsS'TTreeExampleSplitter_IgnoreUnknowns'
p1487
(i__main__
ClassDefinition
p1488
(dp1489
g4
I1
sg5
I01
sg6
g1487
sg7
S'TTreeExampleSplitter'
p1490
sg9
I00
sg10
(lp1491
sg12
(lp1492
sg29
(dp1493
sbsS'TProbabilityEstimator_FromDistribution'
p1494
(i__main__
ClassDefinition
p1495
(dp1496
g4
I1
sg5
I01
sg6
g1494
sg7
S'TProbabilityEstimator'
p1497
sg9
I00
sg10
(lp1498
sg12
(lp1499
(S'TDistribution'
p1500
S'probabilities'
p1501
g1501
S'probabilities'
p1502
I0
I0
I00
Ntp1503
a(S'bool'
p1504
S'supportsDiscrete'
p1505
S'supports_discrete'
p1506
S'can estimate probabilities of discrete attributes'
p1507
I01
I0
I01
Ntp1508
a(S'bool'
p1509
S'supportsContinuous'
p1510
S'supports_continuous'
p1511
S'can estimate probabilities of continuous attributes'
p1512
I01
I0
I01
Ntp1513
asg29
(dp1514
sbsS'TC45TreeNode'
p1515
(i__main__
ClassDefinition
p1516
(dp1517
g4
I1
sg5
I01
sg6
g1515
sg7
S'TOrange'
p1518
sg9
I00
sg10
(lp1519
sg12
(lp1520
(S'int'
p1521
S'nodeType'
p1522
S'node_type'
p1523
S' 0 = leaf,  1 = branch,  2 = cut,  3 = subset'
p1524
I0
I0
I01
S'C45TreeNode_NodeType'
p1525
tp1526
a(S'TValue'
p1527
S'leaf'
p1528
g1528
S'most frequent class at this node'
p1529
I0
I0
I01
Ntp1530
a(S'float'
p1531
S'items'
p1532
g1532
S'no of items at this node'
p1533
I0
I0
I01
Ntp1534
a(S'TDiscDistribution'
p1535
S'classDist'
p1536
S'class_dist'
p1537
S'class distribution of items'
p1538
I0
I0
I00
Ntp1539
a(S'TVariable'
p1540
S'tested'
p1541
g1541
S'attribute referenced in test'
p1542
I0
I0
I00
Ntp1543
a(S'float'
p1544
S'cut'
p1545
g1545
S'threshold for continuous attribute'
p1546
I0
I0
I01
Ntp1547
a(S'float'
p1548
S'lower'
p1549
g1549
S'lower limit of soft threshold'
p1550
I0
I0
I01
Ntp1551
a(S'float'
p1552
S'upper'
p1553
g1553
S'upper limit of soft threshold'
p1554
I0
I0
I01
Ntp1555
a(S'TIntList'
p1556
S'mapping'
p1557
g1557
S'mapping for discrete value'
p1558
I0
I0
I00
Ntp1559
a(S'TC45TreeNodeList'
p1560
S'branch'
p1561
g1561
S'branch[x] = (sub)tree for outcome x */'
p1562
I0
I0
I00
Ntp1563
asg29
(dp1564
S'NodeType'
p1565
(lp1566
(S'Leaf'
p1567
S'0'
p1568
tp1569
a(S'Branch'
p1570
I1
tp1571
a(S'Cut'
p1572
I2
tp1573
a(S'Subset'
p1574
I3
tp1575
assbsS'TDistributionList'
p1576
(ipyprops
ClassDefinition
p1577
(dp1578
g4
I0
sg5
I01
sg6
g1576
sg7
g136
sg9
I0
sg10
(lp1579
sg12
(lp1580
sg29
(dp1581
sbsS'TTreeDescender_UnknownMergeAsBranchSizes'
p1582
(i__main__
ClassDefinition
p1583
(dp1584
g4
I1
sg5
I01
sg6
g1582
sg7
S'TTreeDescender'
p1585
sg9
I0
sg10
(lp1586
sg12
(lp1587
sg29
(dp1588
sbsS'THierarchicalClusterOrdering'
p1589
(i__main__
ClassDefinition
p1590
(dp1591
g4
I1
sg5
I01
sg6
g1589
sg7
S'TOrange'
p1592
sg9
I00
sg10
(lp1593
sg12
(lp1594
(S'TProgressCallback'
p1595
S'progress_callback'
p1596
g1596
S'progress callback function'
p1597
I0
I0
I00
Ntp1598
asg29
(dp1599
sbsS'TLogitClassifierState'
p1600
(i__main__
ClassDefinition
p1601
(dp1602
g4
I1
sg5
I01
sg6
g1600
sg7
S'TOrange'
p1603
sg9
I00
sg10
(lp1604
sg12
(lp1605
(S'TRuleList'
p1606
S'rules'
p1607
g1607
g566
I0
I0
I00
Ntp1608
a(S'TExampleTable'
p1609
S'examples'
p1610
g1610
g566
I0
I0
I00
Ntp1611
a(S'TFloatList'
p1612
S'avgProb'
p1613
S'avg_prob'
p1614
g566
I0
I0
I00
Ntp1615
a(S'TFloatList'
p1616
S'avgPriorProb'
p1617
S'avg_prior_prob'
p1618
g566
I0
I0
I00
Ntp1619
a(S'TIntList'
p1620
S'prefixRules'
p1621
S'prefix_rules'
p1622
g566
I0
I0
I00
Ntp1623
asg29
(dp1624
sbsS'TExamplesDistance'
p1625
(i__main__
ClassDefinition
p1626
(dp1627
g4
I1
sg5
I01
sg6
g1625
sg7
S'TOrange'
p1628
sg9
I01
sg10
(lp1629
sg12
(lp1630
sg29
(dp1631
sbsS'TFileExampleGenerator'
p1632
(i__main__
ClassDefinition
p1633
(dp1634
g4
I1
sg5
I01
sg6
g1632
sg7
S'TExampleGenerator'
p1635
sg9
I01
sg10
(lp1636
sg12
(lp1637
(S'string'
p1638
S'filename'
p1639
g1639
S'filename'
p1640
I0
I0
I01
Ntp1641
a(S'int'
p1642
S'startDataPos'
p1643
S'start_data_pos'
p1644
S'starting position of the data in file'
p1645
I0
I0
I01
Ntp1646
a(S'int'
p1647
S'startDataLine'
p1648
S'start_data_line'
p1649
S'line in the file where the data starts'
p1650
I0
I0
I01
Ntp1651
ag299
ag303
asg29
(dp1652
sbsS'TMeasureAttribute_gainRatio'
p1653
(i__main__
ClassDefinition
p1654
(dp1655
g4
I1
sg5
I01
sg6
g1653
sg7
S'TMeasureAttributeFromProbabilities'
p1656
sg9
I00
sg10
(lp1657
sg12
(lp1658
g903
ag908
ag914
ag919
ag924
ag929
ag934
asg29
(dp1659
sbsS'TContingencyClassAttr'
p1660
(i__main__
ClassDefinition
p1661
(dp1662
g4
I1
sg5
I01
sg6
g1660
sg7
S'TContingencyClass'
p1663
sg9
I00
sg10
(lp1664
sg12
(lp1665
(S'TVariable'
p1666
S'outerVariable'
p1667
S'outer_variable'
p1668
S'outer attribute'
p1669
I0
I0
I00
Ntp1670
a(S'TVariable'
p1671
S'innerVariable'
p1672
S'inner_variable'
p1673
S'inner attribute'
p1674
I0
I0
I00
Ntp1675
a(S'int'
p1676
S'varType'
p1677
S'var_type'
p1678
S' outer attribute type'
p1679
I0
I0
I01
S'Variable_Type'
p1680
tp1681
a(S'TDistribution'
p1682
S'outerDistribution'
p1683
S'outer_distribution'
p1684
S'distribution of values of outer attributes'
p1685
I0
I0
I00
Ntp1686
a(S'TDistribution'
p1687
S'innerDistribution'
p1688
S'inner_distribution'
p1689
S'distribution of values of inner attributes'
p1690
I0
I0
I00
Ntp1691
a(S'TDistribution'
p1692
S'innerDistributionUnknown'
p1693
S'inner_distribution_unknown'
p1694
S'distribution of inner variable for examples where the outer value was unknown'
p1695
I0
I0
I00
Ntp1696
asg29
(dp1697
sbsS'TMissValuesGenerator'
p1698
(i__main__
ClassDefinition
p1699
(dp1700
g4
I1
sg5
I01
sg6
g1698
sg7
S'TChangeExampleGenerator'
p1701
sg9
I00
sg10
(lp1702
sg12
(lp1703
(S'TIntFloatList'
p1704
S'replaceProbabilities'
p1705
S'replace_probabilities'
p1706
S"probabilities for replacing attributes' values"
p1707
I0
I0
I00
Ntp1708
a(S'TRandomGenerator'
p1709
S'randomGenerator'
p1710
S'random_generator'
p1711
S'random generator'
p1712
I0
I0
I00
Ntp1713
ag299
ag303
asg29
(dp1714
sbsS'TLogRegClassifier'
p1715
(i__main__
ClassDefinition
p1716
(dp1717
g4
I1
sg5
I01
sg6
g1715
sg7
S'TClassifierFD'
p1718
sg9
I00
sg10
(lp1719
sg12
(lp1720
(S'TDomain'
p1721
S'continuizedDomain'
p1722
S'continuized_domain'
p1723
S'if absent, there is no continuous attributes in original domain'
p1724
I0
I0
I00
Ntp1725
a(S'TEFMDataDescription'
p1726
S'dataDescription'
p1727
S'data_description'
p1728
S'Data needed for classification in presence of undefined values'
p1729
I0
I0
I00
Ntp1730
a(S'TAttributedFloatList'
p1731
S'beta'
p1732
g1732
S'estimated beta coefficients for logistic regression'
p1733
I0
I0
I00
Ntp1734
a(S'TAttributedFloatList'
p1735
S'beta_se'
p1736
g1736
S'estimated standard errors for beta coefficients'
p1737
I0
I0
I00
Ntp1738
a(S'TAttributedFloatList'
p1739
S'wald_Z'
p1740
g1740
S'Wald Z statstic for beta coefficients'
p1741
I0
I0
I00
Ntp1742
a(S'TAttributedFloatList'
p1743
S'P'
p1744
g1744
S'estimated significances for beta coefficients'
p1745
I0
I0
I00
Ntp1746
a(S'float'
p1747
S'likelihood'
p1748
g1748
S"Likelihood: The likelihood function is the function which specifies the probability of the sample observed on the basis of a known model, as a function of the model's parameters. "
p1749
I0
I0
I01
Ntp1750
a(S'int'
p1751
S'fit_status'
p1752
g1752
S"Tells how the model fitting ended - either regularly (LogRegFitter.OK), or it was interrupted due to one of beta coefficients escaping towards infinity (LogRegFitter.Infinity) or since the values didn't converge (LogRegFitter.Divergence)."
p1753
I0
I0
I01
Ntp1754
a(S'TImputer'
p1755
S'imputer'
p1756
g1756
S'if present, it imputes unknown values'
p1757
I0
I0
I00
Ntp1758
ag284
ag94
ag99
asg29
(dp1759
sbsS'TEquiDistDiscretization'
p1760
(i__main__
ClassDefinition
p1761
(dp1762
g4
I1
sg5
I01
sg6
g1760
sg7
S'TDiscretization'
p1763
sg9
I00
sg10
(lp1764
sg12
(lp1765
(S'int'
p1766
S'numberOfIntervals'
p1767
(g1767
g1011
tp1768
S' number of intervals'
p1769
I0
I0
I01
Ntp1770
asg29
(dp1771
sbsS'TPreprocessor_select'
p1772
(i__main__
ClassDefinition
p1773
(dp1774
g4
I1
sg5
I01
sg6
g1772
sg7
S'TPreprocessor'
p1775
sg9
I00
sg10
(lp1776
sg12
(lp1777
(S'TVarList'
p1778
S'attributes'
p1779
g1779
S'tells which attributes to select'
p1780
I0
I0
I00
Ntp1781
asg29
(dp1782
sbsS'TSVMClassifierSparse'
p1783
(i__main__
ClassDefinition
p1784
(dp1785
g4
I1
sg5
I01
sg6
g1783
sg7
S'TSVMClassifier'
p1786
sg9
I00
sg10
(lp1787
sg12
(lp1788
(S'bool'
p1789
S'useNonMeta'
p1790
S'use_non_meta'
p1791
S'include non meta attributes'
p1792
I0
I0
I01
Ntp1793
ag238
ag242
ag246
ag251
ag256
ag261
ag265
ag270
ag275
ag280
ag284
ag94
ag99
asg29
(dp1794
sbsS'TFilter_disjunction'
p1795
(i__main__
ClassDefinition
p1796
(dp1797
g4
I1
sg5
I01
sg6
g1795
sg7
S'TFilter'
p1798
sg9
I00
sg10
(lp1799
sg12
(lp1800
(S'TFilterList'
p1801
S'filters'
p1802
g1802
S'a list of filters;'
p1803
I0
I0
I00
Ntp1804
ag688
ag692
asg29
(dp1805
sbsS'TMeasureAttribute_gini'
p1806
(i__main__
ClassDefinition
p1807
(dp1808
g4
I1
sg5
I01
sg6
g1806
sg7
S'TMeasureAttributeFromProbabilities'
p1809
sg9
I00
sg10
(lp1810
sg12
(lp1811
g903
ag908
ag914
ag919
ag924
ag929
ag934
asg29
(dp1812
sbsS'TAttributedFloatList'
p1813
(ipyprops
ClassDefinition
p1814
(dp1815
g4
I0
sg5
I01
sg6
g1813
sg7
S'TFloatList'
p1816
sg9
I0
sg10
(lp1817
sg12
(lp1818
sg29
(dp1819
sbsS'TIMByRowsByRelief'
p1820
(i__main__
ClassDefinition
p1821
(dp1822
g4
I1
sg5
I01
sg6
g1820
sg7
S'TIMByRowsConstructor'
p1823
sg9
I00
sg10
(lp1824
sg12
(lp1825
(S'float'
p1826
g1201
g1201
S'number of neighbours'
p1827
I0
I0
I01
Ntp1828
a(S'float'
p1829
g1205
g1205
S'number of reference examples'
p1830
I0
I0
I01
Ntp1831
a(S'float'
p1832
S'kFromColumns'
p1833
S'k_from_columns'
p1834
S'if positive, number of neighbours is #columns*kFromColumns'
p1835
I0
I0
I01
Ntp1836
a(S'bool'
p1837
S'ignoreSameExample'
p1838
S'ignore_same_example'
p1839
S'does not put reference example into M'
p1840
I0
I0
I01
Ntp1841
a(S'bool'
p1842
S'convertToBinary'
p1843
S'convert_to_binary'
p1844
S'convert to binary class (hit-miss)'
p1845
I0
I0
I01
Ntp1846
a(S'bool'
p1847
S'correctClassFirst'
p1848
S'correct_class_first'
p1849
S'puts the correct class proportion to the first place'
p1850
I0
I0
I01
Ntp1851
a(S'bool'
p1852
S'allExamples'
p1853
S'all_examples'
p1854
S'uses all examples for reference examples'
p1855
I0
I0
I01
Ntp1856
a(S'bool'
p1857
S'allSameNeighbours'
p1858
S'all_same_neighbours'
p1859
S'uses all the examples same to the reference as neighbours'
p1860
I0
I0
I01
Ntp1861
asg29
(dp1862
sbsS'TFindNearestConstructor'
p1863
(i__main__
ClassDefinition
p1864
(dp1865
g4
I1
sg5
I01
sg6
g1863
sg7
S'TOrange'
p1866
sg9
I01
sg10
(lp1867
sg12
(lp1868
(S'TExamplesDistanceConstructor'
p1869
S'distanceConstructor'
p1870
S'distance_constructor'
p1871
S'metrics'
p1872
I0
I0
I00
Ntp1873
a(S'bool'
p1874
S'includeSame'
p1875
S'include_same'
p1876
S'tells whether to include examples that are same as the reference example'
p1877
I0
I0
I01
Ntp1878
asg29
(dp1879
sbsS'TRuleClassifier_firstRule'
p1880
(i__main__
ClassDefinition
p1881
(dp1882
g4
I1
sg5
I01
sg6
g1880
sg7
S'TRuleClassifier'
p1883
sg9
I00
sg10
(lp1884
sg12
(lp1885
(S'TDistribution'
p1886
S'prior'
p1887
g1887
S'prior distribution'
p1888
I0
I0
I00
Ntp1889
ag598
ag601
ag605
ag94
ag99
asg29
(dp1890
sbsS'TColumnAssessor'
p1891
(i__main__
ClassDefinition
p1892
(dp1893
g4
I1
sg5
I01
sg6
g1891
sg7
S'TOrange'
p1894
sg9
I01
sg10
(lp1895
sg12
(lp1896
sg29
(dp1897
sbsS'TTableAverager'
p1898
(i__main__
ClassDefinition
p1899
(dp1900
g4
I1
sg5
I01
sg6
g1898
sg7
S'TOrange'
p1901
sg9
I00
sg10
(lp1902
sg12
(lp1903
sg29
(dp1904
sbsS'TComputeDomainContingency_Preprocessor'
p1905
(i__main__
ClassDefinition
p1906
(dp1907
g4
I1
sg5
I01
sg6
g1905
sg7
S'TComputeDomainContingency'
p1908
sg9
I00
sg10
(lp1909
sg12
(lp1910
(S'TPreprocessor'
p1911
S'preprocessor'
p1912
g1912
S'preprocesses the exmaples (see the manual for restrictions!)'
p1913
I0
I0
I00
Ntp1914
a(S'bool'
p1915
S'resultInOriginalDomain'
p1916
S'result_in_original_domain'
p1917
S'tells whether the resulting DomainContingency should consist of original attributes'
p1918
I0
I0
I01
Ntp1919
ag28
asg29
(dp1920
sbsS'TFloatFloatList'
p1921
(ipyprops
ClassDefinition
p1922
(dp1923
g4
I0
sg5
I01
sg6
g1921
sg7
g136
sg9
I0
sg10
(lp1924
sg12
(lp1925
sg29
(dp1926
sbsS'TMeasureAttribute_MSE'
p1927
(i__main__
ClassDefinition
p1928
(dp1929
g4
I1
sg5
I01
sg6
g1927
sg7
S'TMeasureAttribute'
p1930
sg9
I00
sg10
(lp1931
sg12
(lp1932
(S'float'
p1933
g1205
g1205
S'm for m-estimate'
p1934
I0
I0
I01
Ntp1935
a(S'int'
p1936
S'unknownsTreatment'
p1937
S'unknowns_treatment'
p1938
S' treatment of unknown values'
p1939
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p1940
tp1941
ag919
ag924
ag929
ag934
asg29
(dp1942
sbsS'TRuleList'
p1943
(ipyprops
ClassDefinition
p1944
(dp1945
g4
I0
sg5
I01
sg6
g1943
sg7
g136
sg9
I0
sg10
(lp1946
sg12
(lp1947
sg29
(dp1948
sbsS'TClusteringTreeClassifier'
p1949
(i__main__
ClassDefinition
p1950
(dp1951
g4
I1
sg5
I01
sg6
g1949
sg7
S'TMultiClassifier'
p1952
sg9
I00
sg10
(lp1953
sg12
(lp1954
g792
ag796
ag801
asg29
(dp1955
sbsS'TStopIMClusteringByAssessor_noBigChange'
p1956
(i__main__
ClassDefinition
p1957
(dp1958
g4
I1
sg5
I01
sg6
g1956
sg7
S'TStopIMClusteringByAssessor'
p1959
sg9
I00
sg10
(lp1960
sg12
(lp1961
sg29
(dp1962
sbsS'TItemsetsSparseInducer'
p1963
(i__main__
ClassDefinition
p1964
(dp1965
g4
I1
sg5
I01
sg6
g1963
sg7
S'TOrange'
p1966
sg9
I00
sg10
(lp1967
sg12
(lp1968
(S'int'
p1969
S'maxItemSets'
p1970
S'max_item_sets'
p1971
S'maximal number of itemsets (increase if you want)'
p1972
I0
I0
I01
Ntp1973
a(S'float'
p1974
S'support'
p1975
g1975
S'required support'
p1976
I0
I0
I01
Ntp1977
a(S'bool'
p1978
S'storeExamples'
p1979
S'store_examples'
p1980
S'stores examples corresponding to itemsets'
p1981
I0
I0
I01
Ntp1982
asg29
(dp1983
sbsS'TPreprocessor_dropMissing'
p1984
(i__main__
ClassDefinition
p1985
(dp1986
g4
I1
sg5
I01
sg6
g1984
sg7
S'TPreprocessor'
p1987
sg9
I00
sg10
(lp1988
sg12
(lp1989
sg29
(dp1990
sbsS'TDomainContinuizer'
p1991
(i__main__
ClassDefinition
p1992
(dp1993
g4
I1
sg5
I01
sg6
g1991
sg7
S'TOrange'
p1994
sg9
I00
sg10
(lp1995
sg12
(lp1996
(S'bool'
p1997
S'zeroBased'
p1998
S'zero_based'
p1999
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p2000
I0
I0
I01
Ntp2001
a(S'int'
p2002
S'continuousTreatment'
p2003
S'continuous_treatment'
p2004
S' 0-leave as they are, 1-divide by span, 1-normalize'
p2005
I0
I0
I01
S'DomainContinuizer_ContinuousTreatment'
p2006
tp2007
a(S'int'
p2008
S'multinomialTreatment'
p2009
S'multinomial_treatment'
p2010
S' 0-lowest value, 1-most frequent (or baseValue), 2-n binary, 3-ignore, 4-ignore all discrete, 5-error, 6-convert as ordinal, 7-ordinal,normalized'
p2011
I0
I0
I01
S'DomainContinuizer_MultinomialTreatment'
p2012
tp2013
a(S'int'
p2014
S'classTreatment'
p2015
S'class_treatment'
p2016
S' 3-leave as is unless target is given, 5-error if not continuous nor binary nor target given, 6-convert as ordinal (unless target given)'
p2017
I0
I0
I01
S'DomainContinuizer_ClassTreatment'
p2018
tp2019
asg29
(dp2020
S'MultinomialTreatment'
p2021
(lp2022
(S'LowestIsBase'
p2023
I0
tp2024
a(S'FrequentIsBase'
p2025
I1
tp2026
a(S'NValues'
p2027
I2
tp2028
a(S'Ignore'
p2029
I3
tp2030
a(S'IgnoreAllDiscrete'
p2031
I4
tp2032
a(S'ReportError'
p2033
I5
tp2034
a(S'AsOrdinal'
p2035
I6
tp2036
a(S'AsNormalizedOrdinal'
p2037
I7
tp2038
asS'ClassTreatment'
p2039
(lp2040
(S'LeaveUnlessTarget'
p2041
S'3'
p2042
tp2043
a(S'ErrorIfCannotHandle'
p2044
S'5'
p2045
tp2046
a(S'AsOrdinal'
p2047
S'6'
p2048
tp2049
asS'ContinuousTreatment'
p2050
(lp2051
(S'Leave'
p2052
I0
tp2053
a(S'NormalizeBySpan'
p2054
I1
tp2055
a(S'NormalizeByVariance'
p2056
I2
tp2057
assbsS'TNormalizeContinuous'
p2058
(i__main__
ClassDefinition
p2059
(dp2060
g4
I1
sg5
I01
sg6
g2058
sg7
S'TTransformValue'
p2061
sg9
I00
sg10
(lp2062
sg12
(lp2063
(S'float'
p2064
S'average'
p2065
g2065
S'the average value'
p2066
I0
I0
I01
Ntp2067
a(S'float'
p2068
S'span'
p2069
g2069
S'the value span'
p2070
I0
I0
I01
Ntp2071
ag817
asg29
(dp2072
sbsS'TSimpleTreeClassifier'
p2073
(i__main__
ClassDefinition
p2074
(dp2075
g4
I1
sg5
I01
sg6
g2073
sg7
S'TClassifier'
p2076
sg9
I00
sg10
(lp2077
sg12
(lp2078
g94
ag99
asg29
(dp2079
sbsS'TBiModalDiscretizer'
p2080
(i__main__
ClassDefinition
p2081
(dp2082
g4
I1
sg5
I01
sg6
g2080
sg7
S'TDiscretizer'
p2083
sg9
I00
sg10
(lp2084
sg12
(lp2085
(S'float'
p2086
S'low'
p2087
g2087
S'low threshold'
p2088
I0
I0
I01
Ntp2089
a(S'float'
p2090
S'high'
p2091
g2091
S'high threshold'
p2092
I0
I0
I01
Ntp2093
ag817
asg29
(dp2094
sbsS'TExamplesDistanceConstructor_Euclidean'
p2095
(i__main__
ClassDefinition
p2096
(dp2097
g4
I1
sg5
I01
sg6
g2095
sg7
S'TExamplesDistanceConstructor_Normalized'
p2098
sg9
I00
sg10
(lp2099
sg12
(lp2100
(S'bool'
p2101
S'normalize'
p2102
g2102
S'tells whether to normalize distances between attributes'
p2103
I0
I0
I01
Ntp2104
a(S'bool'
p2105
S'ignoreUnknowns'
p2106
S'ignore_unknowns'
p2107
S'if true (default: false) unknown values are ignored in computation'
p2108
I0
I0
I01
Ntp2109
ag1360
asg29
(dp2110
sbsS'TContingencyAttrAttr'
p2111
(i__main__
ClassDefinition
p2112
(dp2113
g4
I1
sg5
I01
sg6
g2111
sg7
S'TContingency'
p2114
sg9
I00
sg10
(lp2115
sg12
(lp2116
g1670
ag1675
ag1681
ag1686
ag1691
ag1696
asg29
(dp2117
sbsS'TRuleBeamRefiner_Selector'
p2118
(i__main__
ClassDefinition
p2119
(dp2120
g4
I1
sg5
I01
sg6
g2118
sg7
S'TRuleBeamRefiner'
p2121
sg9
I00
sg10
(lp2122
sg12
(lp2123
(S'TDiscretization'
p2124
S'discretization'
p2125
g2125
S'discretization for continuous attributes'
p2126
I0
I0
I00
Ntp2127
asg29
(dp2128
sbsS'TProbabilityEstimatorConstructor_Laplace'
p2129
(i__main__
ClassDefinition
p2130
(dp2131
g4
I1
sg5
I01
sg6
g2129
sg7
S'TProbabilityEstimatorConstructor'
p2132
sg9
I00
sg10
(lp2133
sg12
(lp2134
(S'float'
p2135
S'l'
p2136
g2136
S'number of examples added to each class (default: 1)'
p2137
I0
I0
I01
Ntp2138
a(S'bool'
p2139
S'renormalize'
p2140
g2140
S'computes the estimate on the original (not the normalized) distribution'
p2141
I0
I0
I01
Ntp2142
asg29
(dp2143
sbsS'TExamplesDistance_Relief'
p2144
(i__main__
ClassDefinition
p2145
(dp2146
g4
I1
sg5
I01
sg6
g2144
sg7
S'TExamplesDistance'
p2147
sg9
I00
sg10
(lp2148
sg12
(lp2149
(S'TDomainDistributions'
p2150
S'distributions'
p2151
g2151
S"distributions of attributes' values"
p2152
I0
I0
I00
Ntp2153
a(S'TAttributedFloatList'
p2154
S'averages'
p2155
g2155
S'average values of attributes'
p2156
I0
I0
I00
Ntp2157
a(S'TAttributedFloatList'
p2158
S'normalizations'
p2159
g2159
S"ranges of attributes' values"
p2160
I0
I0
I00
Ntp2161
a(S'TAttributedFloatList'
p2162
S'bothSpecial'
p2163
S'both_special'
p2164
S'distance if both values of both attributes are undefined'
p2165
I0
I0
I00
Ntp2166
asg29
(dp2167
sbsS'TExamplesDistance_Manhattan'
p2168
(i__main__
ClassDefinition
p2169
(dp2170
g4
I1
sg5
I01
sg6
g2168
sg7
S'TExamplesDistance_Normalized'
p2171
sg9
I00
sg10
(lp2172
sg12
(lp2173
g447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp2174
sbsS'TExamplesDistanceConstructor_Manhattan'
p2175
(i__main__
ClassDefinition
p2176
(dp2177
g4
I1
sg5
I01
sg6
g2175
sg7
S'TExamplesDistanceConstructor_Normalized'
p2178
sg9
I00
sg10
(lp2179
sg12
(lp2180
g2104
ag2109
ag1360
asg29
(dp2181
sbsS'TStringList'
p2182
(ipyprops
ClassDefinition
p2183
(dp2184
g4
I0
sg5
I01
sg6
g2182
sg7
g136
sg9
I0
sg10
(lp2185
sg12
(lp2186
sg29
(dp2187
sbsS'TTreeDescender'
p2188
(i__main__
ClassDefinition
p2189
(dp2190
g4
I1
sg5
I01
sg6
g2188
sg7
S'TOrange'
p2191
sg9
I01
sg10
(lp2192
sg12
(lp2193
sg29
(dp2194
sbsS'TColumnAssessor_Measure'
p2195
(i__main__
ClassDefinition
p2196
(dp2197
g4
I1
sg5
I01
sg6
g2195
sg7
S'TColumnAssessor'
p2198
sg9
I00
sg10
(lp2199
sg12
(lp2200
(S'TMeasureAttribute'
p2201
S'measure'
p2202
g2202
S'attribute quality measure'
p2203
I0
I0
I00
Ntp2204
asg29
(dp2205
sbsS'TIMBlurer'
p2206
(i__main__
ClassDefinition
p2207
(dp2208
g4
I1
sg5
I01
sg6
g2206
sg7
S'TIMByRowsPreprocessor'
p2209
sg9
I00
sg10
(lp2210
sg12
(lp2211
(S'float'
p2212
S'weight'
p2213
g2213
S'weight of neighbours'
p2214
I0
I0
I01
Ntp2215
a(S'float'
p2216
S'origWeight'
p2217
S'orig_weight'
p2218
S'weight of original row'
p2219
I0
I0
I01
Ntp2220
a(S'TFloatList'
p2221
S'attrWeights'
p2222
S'attr_weights'
p2223
S'weights by individual (different) attributes'
p2224
I0
I0
I00
Ntp2225
a(S'bool'
p2226
S'adjustOrigWeight'
p2227
S'adjust_orig_weight'
p2228
S'uses 1-weight(s) for weight of original row'
p2229
I0
I0
I01
Ntp2230
a(S'bool'
p2231
S'onlyEmpty'
p2232
S'only_empty'
p2233
S'blurs only empty cells'
p2234
I0
I0
I01
Ntp2235
asg29
(dp2236
sbsS'TFilter'
p2237
(i__main__
ClassDefinition
p2238
(dp2239
g4
I1
sg5
I01
sg6
g2237
sg7
S'TOrange'
p2240
sg9
I01
sg10
(lp2241
sg12
(lp2242
g688
ag692
asg29
(dp2243
sbsS'TC45Learner'
p2244
(i__main__
ClassDefinition
p2245
(dp2246
g4
I1
sg5
I01
sg6
g2244
sg7
S'TLearner'
p2247
sg9
I00
sg10
(lp2248
sg12
(lp2249
(S'bool'
p2250
S'gainRatio'
p2251
(g2251
S'g'
p2252
tp2253
S' use gain ratio (instead of information gain)'
p2254
I0
I0
I01
Ntp2255
a(S'bool'
p2256
S'subset'
p2257
(g2257
S's'
p2258
tp2259
S' use subsetting'
p2260
I0
I0
I01
Ntp2261
a(S'bool'
p2262
S'batch'
p2263
(g2263
S'b'
p2264
tp2265
S' batch'
p2266
I0
I0
I01
Ntp2267
a(S'bool'
p2268
S'probThresh'
p2269
(g2269
S'p'
p2270
tp2271
S' probability threshold'
p2272
I0
I0
I01
Ntp2273
a(S'int'
p2274
S'minObjs'
p2275
(g2275
g1205
tp2276
S' minimal number of objects (examples) in leaves'
p2277
I0
I0
I01
Ntp2278
a(S'int'
p2279
S'window'
p2280
(g2280
S'w'
p2281
tp2282
S' window'
p2283
I0
I0
I01
Ntp2284
a(S'int'
p2285
S'increment'
p2286
(g2286
S'i'
p2287
tp2288
S' increment'
p2289
I0
I0
I01
Ntp2290
a(S'float'
p2291
S'cf'
p2292
(g2292
S'c'
p2293
tp2294
S' cf'
p2295
I0
I0
I01
Ntp2296
a(S'int'
p2297
S'trials'
p2298
(g2298
S't'
p2299
tp2300
S' trials'
p2301
I0
I0
I01
Ntp2302
a(S'bool'
p2303
S'prune'
p2304
g2304
S'return pruned tree'
p2305
I0
I0
I01
Ntp2306
a(S'bool'
p2307
S'convertToOrange'
p2308
S'convert_to_orange'
p2309
S'return TreeClassifier instead of C45TreeClassifier'
p2310
I0
I0
I01
Ntp2311
a(S'bool'
p2312
S'storeExamples'
p2313
S'store_examples'
p2314
S'stores examples when (if) converting to TreeClassifier'
p2315
I0
I0
I01
Ntp2316
a(S'bool'
p2317
S'storeContingencies'
p2318
S'store_contingencies'
p2319
S'stores contingencies when (if) converting to TreeClassifier'
p2320
I0
I0
I01
Ntp2321
ag110
asg29
(dp2322
sbsS'TAttributedBoolList'
p2323
(ipyprops
ClassDefinition
p2324
(dp2325
g4
I0
sg5
I01
sg6
g2323
sg7
S'TBoolList'
p2326
sg9
I0
sg10
(lp2327
sg12
(lp2328
sg29
(dp2329
sbsS'TFeatureByMinComplexity'
p2330
(i__main__
ClassDefinition
p2331
(dp2332
g4
I1
sg5
I01
sg6
g2330
sg7
S'TFeatureInducer'
p2333
sg9
I00
sg10
(lp2334
sg12
(lp2335
(S'TColorIG'
p2336
S'colorIG'
p2337
S'color_IG'
p2338
S'graph coloring algorithm'
p2339
I0
I0
I00
Ntp2340
a(S'int'
p2341
S'completion'
p2342
g2342
S' decides how to determine the class for points not covered by any cluster'
p2343
I0
I0
I01
S'FeatureByMinComplexity_Completion'
p2344
tp2345
asg29
(dp2346
S'Completion'
p2347
(lp2348
(S'NoCompletion'
p2349
S'completion_no'
p2350
tp2351
a(S'CompletionByDefault'
p2352
S'completion_default'
p2353
tp2354
a(S'CompletionByBayes'
p2355
S'completion_bayes'
p2356
tp2357
assbsS'TPreprocessor_dropMissingClasses'
p2358
(i__main__
ClassDefinition
p2359
(dp2360
g4
I1
sg5
I01
sg6
g2358
sg7
S'TPreprocessor'
p2361
sg9
I00
sg10
(lp2362
sg12
(lp2363
sg29
(dp2364
sbsS'TkNNClassifier'
p2365
(i__main__
ClassDefinition
p2366
(dp2367
g4
I1
sg5
I01
sg6
g2365
sg7
S'TClassifierFD'
p2368
sg9
I00
sg10
(lp2369
sg12
(lp2370
(S'TFindNearest'
p2371
S'findNearest'
p2372
S'find_nearest'
p2373
g566
I0
I0
I00
Ntp2374
a(S'float'
p2375
g1201
g1201
S'number of neighbours (0 for sqrt of #examples)'
p2376
I0
I0
I01
Ntp2377
a(S'bool'
p2378
S'rankWeight'
p2379
S'rank_weight'
p2380
S'enable weighting by ranks'
p2381
I0
I0
I01
Ntp2382
a(S'int'
p2383
S'weightID'
p2384
S'weight_ID'
p2385
S'id of meta-attribute with weight'
p2386
I0
I0
I01
Ntp2387
a(S'int'
p2388
S'nExamples'
p2389
S'n_examples'
p2390
S'the number of learning examples '
p2391
I0
I0
I01
Ntp2392
ag284
ag94
ag99
asg29
(dp2393
sbsS'TMeasureAttribute_info'
p2394
(i__main__
ClassDefinition
p2395
(dp2396
g4
I1
sg5
I01
sg6
g2394
sg7
S'TMeasureAttributeFromProbabilities'
p2397
sg9
I00
sg10
(lp2398
sg12
(lp2399
g903
ag908
ag914
ag919
ag924
ag929
ag934
asg29
(dp2400
sbsS'TRuleBeamCandidateSelector_TakeAll'
p2401
(i__main__
ClassDefinition
p2402
(dp2403
g4
I1
sg5
I01
sg6
g2401
sg7
S'TRuleBeamCandidateSelector'
p2404
sg9
I00
sg10
(lp2405
sg12
(lp2406
sg29
(dp2407
sbsS'TExamplesDistanceConstructor_Relief'
p2408
(i__main__
ClassDefinition
p2409
(dp2410
g4
I1
sg5
I01
sg6
g2408
sg7
S'TExamplesDistanceConstructor'
p2411
sg9
I00
sg10
(lp2412
sg12
(lp2413
g1360
asg29
(dp2414
sbsS'TOrange'
p2415
(i__main__
ClassDefinition
p2416
(dp2417
g4
I1
sg5
I01
sg6
g2415
sg7
Nsg9
I00
sg10
(lp2418
sg12
(lp2419
sg29
(dp2420
sbsS'TRuleValidator'
p2421
(i__main__
ClassDefinition
p2422
(dp2423
g4
I1
sg5
I01
sg6
g2421
sg7
S'TOrange'
p2424
sg9
I01
sg10
(lp2425
sg12
(lp2426
sg29
(dp2427
sbsS'TColorIG'
p2428
(i__main__
ClassDefinition
p2429
(dp2430
g4
I1
sg5
I01
sg6
g2428
sg7
S'TOrange'
p2431
sg9
I01
sg10
(lp2432
sg12
(lp2433
sg29
(dp2434
sbsS'TRuleValidator_Python'
p2435
(i__main__
ClassDefinition
p2436
(dp2437
g4
I1
sg5
I01
sg6
g2435
sg7
S'TRuleValidator'
p2438
sg9
I00
sg10
(lp2439
sg12
(lp2440
sg29
(dp2441
sbsS'TSubsetsGenerator_constSize_iterator'
p2442
(i__main__
ClassDefinition
p2443
(dp2444
g4
I1
sg5
I01
sg6
g2442
sg7
S'TSubsetsGenerator_iterator'
p2445
sg9
I00
sg10
(lp2446
sg12
(lp2447
(S'bool'
p2448
S'moreToCome'
p2449
S'more_to_come'
p2450
g566
I01
I0
I01
Ntp2451
ag503
asg29
(dp2452
sbsS'TIMByRowsBySorting'
p2453
(i__main__
ClassDefinition
p2454
(dp2455
g4
I1
sg5
I01
sg6
g2453
sg7
S'TIMByRowsConstructor'
p2456
sg9
I00
sg10
(lp2457
sg12
(lp2458
sg29
(dp2459
sbsS'TAssociationLearner'
p2460
(i__main__
ClassDefinition
p2461
(dp2462
g4
I1
sg5
I01
sg6
g2460
sg7
S'TLearner'
p2463
sg9
I00
sg10
(lp2464
sg12
(lp2465
(S'float'
p2466
S'confidence'
p2467
g2467
S'required confidence'
p2468
I0
I0
I01
Ntp2469
a(S'float'
p2470
S'support'
p2471
g2471
S'required support'
p2472
I0
I0
I01
Ntp2473
a(S'int'
p2474
S'voteWeight'
p2475
S'vote_weight'
p2476
S'vote weight (s=support, c=confidence, p=product)'
p2477
I0
I0
I01
Ntp2478
a(S'int'
p2479
S'maxItemSets'
p2480
S'max_item_sets'
p2481
S'maximal number of itemsets (increase if you want)'
p2482
I0
I0
I01
Ntp2483
ag110
asg29
(dp2484
sbsS'TRuleBeamInitializer_Python'
p2485
(i__main__
ClassDefinition
p2486
(dp2487
g4
I1
sg5
I01
sg6
g2485
sg7
S'TRuleBeamInitializer'
p2488
sg9
I00
sg10
(lp2489
sg12
(lp2490
sg29
(dp2491
sbsS'TDistributionAssessor'
p2492
(i__main__
ClassDefinition
p2493
(dp2494
g4
I1
sg5
I01
sg6
g2492
sg7
S'TOrange'
p2495
sg9
I01
sg10
(lp2496
sg12
(lp2497
sg29
(dp2498
sbsS'TRuleCovererAndRemover_Python'
p2499
(i__main__
ClassDefinition
p2500
(dp2501
g4
I1
sg5
I01
sg6
g2499
sg7
S'TRuleCovererAndRemover'
p2502
sg9
I00
sg10
(lp2503
sg12
(lp2504
sg29
(dp2505
sbsS'TMeasureAttribute_gainRatioA'
p2506
(i__main__
ClassDefinition
p2507
(dp2508
g4
I1
sg5
I01
sg6
g2506
sg7
S'TMeasureAttribute_gainRatio'
p2509
sg9
I00
sg10
(lp2510
sg12
(lp2511
g903
ag908
ag914
ag919
ag924
ag929
ag934
asg29
(dp2512
sbsS'TConditionalProbabilityEstimatorConstructor_ByRows'
p2513
(i__main__
ClassDefinition
p2514
(dp2515
g4
I1
sg5
I01
sg6
g2513
sg7
S'TConditionalProbabilityEstimatorConstructor'
p2516
sg9
I00
sg10
(lp2517
sg12
(lp2518
(S'TProbabilityEstimatorConstructor'
p2519
S'estimatorConstructor'
p2520
S'estimator_constructor'
p2521
S'ProbabilityEstimator to be used '
p2522
I0
I0
I00
Ntp2523
asg29
(dp2524
sbsS'TCartesianClassifier'
p2525
(i__main__
ClassDefinition
p2526
(dp2527
g4
I1
sg5
I01
sg6
g2525
sg7
S'TClassifierFD'
p2528
sg9
I00
sg10
(lp2529
sg12
(lp2530
g284
ag94
ag99
asg29
(dp2531
sbsS'TLinearClassifier'
p2532
(i__main__
ClassDefinition
p2533
(dp2534
g4
I1
sg5
I01
sg6
g2532
sg7
S'TClassifierFD'
p2535
sg9
I00
sg10
(lp2536
sg12
(lp2537
(S'TFloatListList'
p2538
S'weights'
p2539
g2539
S'Computed feature weights'
p2540
I0
I0
I00
Ntp2541
a(S'TExampleTable'
p2542
S'examples'
p2543
g2543
S'Examples used to train the classifier'
p2544
I0
I0
I00
Ntp2545
a(S'float'
p2546
S'bias'
p2547
g2547
S'bias'
p2548
I01
I0
I01
Ntp2549
ag284
ag94
ag99
asg29
(dp2550
sbsS'TTreeDescender_UnknownToBranch'
p2551
(i__main__
ClassDefinition
p2552
(dp2553
g4
I1
sg5
I01
sg6
g2551
sg7
g1585
sg9
I0
sg10
(lp2554
sg12
(lp2555
sg29
(dp2556
sbsS'TSubsetsGenerator_constSize'
p2557
(i__main__
ClassDefinition
p2558
(dp2559
g4
I1
sg5
I01
sg6
g2557
sg7
S'TSubsetsGenerator'
p2560
sg9
I00
sg10
(lp2561
sg12
(lp2562
(S'int'
p2563
S'B'
p2564
g2564
S'subset size'
p2565
I0
I0
I01
Ntp2566
ag200
asg29
(dp2567
sbsS'TColorIG_MCF'
p2568
(i__main__
ClassDefinition
p2569
(dp2570
g4
I1
sg5
I01
sg6
g2568
sg7
S'TColorIG'
p2571
sg9
I00
sg10
(lp2572
sg12
(lp2573
sg29
(dp2574
sbsS'TBasicAttrStat'
p2575
(i__main__
ClassDefinition
p2576
(dp2577
g4
I1
sg5
I01
sg6
g2575
sg7
S'TOrange'
p2578
sg9
I00
sg10
(lp2579
sg12
(lp2580
(S'float'
p2581
S'sum'
p2582
g2582
S'sum of values'
p2583
I0
I0
I01
Ntp2584
a(S'float'
p2585
S'sum2'
p2586
g2586
S'sum of squares of values'
p2587
I0
I0
I01
Ntp2588
a(S'float'
p2589
g1011
g1011
S'number of examples for which the attribute is defined'
p2590
I0
I0
I01
Ntp2591
a(S'float'
p2592
S'min'
p2593
g2593
S'the lowest value of the attribute'
p2594
I0
I0
I01
Ntp2595
a(S'float'
p2596
S'max'
p2597
g2597
S'the highest value of the attribute'
p2598
I0
I0
I01
Ntp2599
a(S'float'
p2600
S'avg'
p2601
g2601
S'the average value of the attribute'
p2602
I0
I0
I01
Ntp2603
a(S'float'
p2604
S'dev'
p2605
g2605
S'the deviation of the value of the attribute'
p2606
I0
I0
I01
Ntp2607
a(S'TVariable'
p2608
S'variable'
p2609
g2609
S'the attribute to which the data applies'
p2610
I0
I0
I00
Ntp2611
a(S'bool'
p2612
S'holdRecomputation'
p2613
S'hold_recomputation'
p2614
S'temporarily disables recomputation of avg and dev while adding values'
p2615
I0
I0
I01
Ntp2616
asg29
(dp2617
sbsS'TTreeSplitConstructor_Attribute'
p2618
(i__main__
ClassDefinition
p2619
(dp2620
g4
I1
sg5
I01
sg6
g2618
sg7
S'TTreeSplitConstructor_Measure'
p2621
sg9
I00
sg10
(lp2622
sg12
(lp2623
g1295
ag1300
ag780
asg29
(dp2624
sbsS'TRemoveRedundantByInduction'
p2625
(i__main__
ClassDefinition
p2626
(dp2627
g4
I1
sg5
I01
sg6
g2625
sg7
S'TRemoveRedundant'
p2628
sg9
I00
sg10
(lp2629
sg12
(lp2630
(S'TFeatureInducer'
p2631
S'featureReducer'
p2632
S'feature_reducer'
p2633
S'feature construction algorithm'
p2634
I0
I0
I00
Ntp2635
a(S'TMeasureAttribute'
p2636
S'measure'
p2637
g2637
S'measure for initial ordering of attributes'
p2638
I0
I0
I00
Ntp2639
a(S'TDiscretization'
p2640
S'discretization'
p2641
g2641
S'discretization method'
p2642
I0
I0
I00
Ntp2643
ag1338
asg29
(dp2644
sbsS'TFilter_conjunction'
p2645
(i__main__
ClassDefinition
p2646
(dp2647
g4
I1
sg5
I01
sg6
g2645
sg7
S'TFilter'
p2648
sg9
I00
sg10
(lp2649
sg12
(lp2650
(S'TFilterList'
p2651
S'filters'
p2652
g2652
S'a list of filters;'
p2653
I0
I0
I00
Ntp2654
ag688
ag692
asg29
(dp2655
sbsS'TExampleForMissing'
p2656
(i__main__
ClassDefinition
p2657
(dp2658
g4
I1
sg5
I01
sg6
g2656
sg7
S'TExample'
p2659
sg9
I00
sg10
(lp2660
sg12
(lp2661
(S'TEFMDataDescription'
p2662
S'dataDescription'
p2663
S'data_description'
p2664
S'data description'
p2665
I0
I0
I00
Ntp2666
a(S'TDomain'
p2667
S'domain'
p2668
g2668
S"Example's domain"
p2669
I01
I0
I00
Ntp2670
a(S'int'
p2671
S'id'
p2672
g2672
g566
I0
I0
I01
Ntp2673
asg29
(dp2674
sbsS'TRuleBeamFilter'
p2675
(i__main__
ClassDefinition
p2676
(dp2677
g4
I1
sg5
I01
sg6
g2675
sg7
S'TOrange'
p2678
sg9
I01
sg10
(lp2679
sg12
(lp2680
sg29
(dp2681
sbsS'TBayesClassifier'
p2682
(i__main__
ClassDefinition
p2683
(dp2684
g4
I1
sg5
I01
sg6
g2682
sg7
S'TClassifierFD'
p2685
sg9
I00
sg10
(lp2686
sg12
(lp2687
(S'TDistribution'
p2688
S'distribution'
p2689
g2689
S'class distributions (P(C))'
p2690
I0
I0
I00
Ntp2691
a(S'TDomainContingency'
p2692
S'conditionalDistributions'
p2693
S'conditional_distributions'
p2694
S'conditional distributions, P(C|A)'
p2695
I0
I0
I00
Ntp2696
a(S'TProbabilityEstimator'
p2697
S'estimator'
p2698
g2698
S'a probability estimator for P(C)'
p2699
I0
I0
I00
Ntp2700
a(S'TConditionalProbabilityEstimatorList'
p2701
S'conditionalEstimators'
p2702
S'conditional_estimators'
p2703
S'a probability estimator for P(C|A)'
p2704
I0
I0
I00
Ntp2705
a(S'bool'
p2706
S'normalizePredictions'
p2707
S'normalize_predictions'
p2708
S'if true, classifier will normalize predictions'
p2709
I0
I0
I01
Ntp2710
a(S'float'
p2711
S'threshold'
p2712
g2712
S'threshold probability for class 1 (for binary classes only)'
p2713
I0
I0
I01
Ntp2714
ag284
ag94
ag99
asg29
(dp2715
sbsS'TGraph'
p2716
(i__main__
ClassDefinition
p2717
(dp2718
g4
I1
sg5
I01
sg6
g2716
sg7
S'TOrange'
p2719
sg9
I01
sg10
(lp2720
sg12
(lp2721
g1476
ag1481
ag1485
asg29
(dp2722
sbsS'TPreprocessor_addClassWeight'
p2723
(i__main__
ClassDefinition
p2724
(dp2725
g4
I1
sg5
I01
sg6
g2723
sg7
S'TPreprocessor'
p2726
sg9
I00
sg10
(lp2727
sg12
(lp2728
(S'TFloatList'
p2729
S'classWeights'
p2730
S'class_weights'
p2731
S'weights of examples of particular classes'
p2732
I0
I0
I00
Ntp2733
a(S'bool'
p2734
S'equalize'
p2735
g2735
S'reweight examples to equalize class proportions'
p2736
I0
I0
I01
Ntp2737
a(S'TRandomGenerator'
p2738
S'randomGenerator'
p2739
S'random_generator'
p2740
S'random number generator'
p2741
I0
I0
I00
Ntp2742
asg29
(dp2743
sbsS'THierarchicalClusterList'
p2744
(ipyprops
ClassDefinition
p2745
(dp2746
g4
I0
sg5
I01
sg6
g2744
sg7
g136
sg9
I0
sg10
(lp2747
sg12
(lp2748
sg29
(dp2749
sbsS'TStopIMClusteringByAssessor'
p2750
(i__main__
ClassDefinition
p2751
(dp2752
g4
I1
sg5
I01
sg6
g2750
sg7
S'TOrange'
p2753
sg9
I01
sg10
(lp2754
sg12
(lp2755
sg29
(dp2756
sbsS'TValueFilter_continuous'
p2757
(i__main__
ClassDefinition
p2758
(dp2759
g4
I1
sg5
I01
sg6
g2757
sg7
S'TValueFilter'
p2760
sg9
I00
sg10
(lp2761
sg12
(lp2762
(S'float'
p2763
S'min'
p2764
(g2764
S'ref'
p2765
tp2766
S' reference value (lower bound for interval operators)'
p2767
I0
I0
I01
Ntp2768
a(S'float'
p2769
S'max'
p2770
g2770
S'upper bound for interval operators'
p2771
I0
I0
I01
Ntp2772
a(S'bool'
p2773
S'outside'
p2774
g2774
S'obsolete: if true, the filter accepts the values outside the interval, not inside'
p2775
I0
I0
I01
Ntp2776
a(S'int'
p2777
S'oper'
p2778
g2778
S' operator'
p2779
I0
I0
I01
S'ValueFilter_Operator'
p2780
tp2781
ag1054
ag1059
asg29
(dp2782
sbsS'TAssociationRule'
p2783
(i__main__
ClassDefinition
p2784
(dp2785
g4
I1
sg5
I01
sg6
g2783
sg7
S'TOrange'
p2786
sg9
I00
sg10
(lp2787
sg12
(lp2788
(S'TExample'
p2789
S'left'
p2790
g2790
S'left side of the rule'
p2791
I01
I0
I00
Ntp2792
a(S'TExample'
p2793
S'right'
p2794
g2794
S'right side of the rule'
p2795
I01
I0
I00
Ntp2796
a(S'float'
p2797
S'support'
p2798
g2798
S'support for the rule'
p2799
I0
I0
I01
Ntp2800
a(S'float'
p2801
S'confidence'
p2802
g2802
S'confidence of the rule'
p2803
I0
I0
I01
Ntp2804
a(S'float'
p2805
S'coverage'
p2806
g2806
S"rule's coverage"
p2807
I0
I0
I01
Ntp2808
a(S'float'
p2809
S'strength'
p2810
g2810
S"rule's strength"
p2811
I0
I0
I01
Ntp2812
a(S'float'
p2813
S'lift'
p2814
g2814
S"rule's lift"
p2815
I0
I0
I01
Ntp2816
a(S'float'
p2817
S'leverage'
p2818
g2818
S"rule's leverage"
p2819
I0
I0
I01
Ntp2820
a(S'float'
p2821
S'nAppliesLeft'
p2822
S'n_applies_left'
p2823
S"number of examples covered by the rule's left side"
p2824
I0
I0
I01
Ntp2825
a(S'float'
p2826
S'nAppliesRight'
p2827
S'n_applies_right'
p2828
S"number of examples covered by the rule's right side"
p2829
I0
I0
I01
Ntp2830
a(S'float'
p2831
S'nAppliesBoth'
p2832
S'n_applies_both'
p2833
S'number of examples covered by the rule'
p2834
I0
I0
I01
Ntp2835
a(S'float'
p2836
S'nExamples'
p2837
S'n_examples'
p2838
S'number of learning examples'
p2839
I0
I0
I01
Ntp2840
a(S'int'
p2841
S'nLeft'
p2842
S'n_left'
p2843
S"number of items on the rule's left side"
p2844
I01
I0
I01
Ntp2845
a(S'int'
p2846
S'nRight'
p2847
S'n_right'
p2848
S"number of items on the rule's right side"
p2849
I01
I0
I01
Ntp2850
a(S'TExampleTable'
p2851
S'examples'
p2852
g2852
S'examples which the rule was built from'
p2853
I01
I0
I00
Ntp2854
a(S'TIntList'
p2855
S'matchLeft'
p2856
S'match_left'
p2857
S'indices of examples that match the left side of the rule'
p2858
I01
I0
I00
Ntp2859
a(S'TIntList'
p2860
S'matchBoth'
p2861
S'match_both'
p2862
S'indices to examples that match both sides of the rule'
p2863
I01
I0
I00
Ntp2864
asg29
(dp2865
sbsS'TValueFilter'
p2866
(i__main__
ClassDefinition
p2867
(dp2868
g4
I1
sg5
I01
sg6
g2866
sg7
S'TOrange'
p2869
sg9
I01
sg10
(lp2870
sg12
(lp2871
g1054
ag1059
asg29
(dp2872
S'Operator'
p2873
(lp2874
(S'None'
p2875
I0
tp2876
a(S'Equal'
p2877
I1
tp2878
a(S'NotEqual'
p2879
I2
tp2880
a(S'Less'
p2881
I3
tp2882
a(S'LessEqual'
p2883
I4
tp2884
a(S'Greater'
p2885
I5
tp2886
a(S'GreaterEqual'
p2887
I6
tp2888
a(S'Between'
p2889
I7
tp2890
a(S'Outside'
p2891
I8
tp2892
a(S'Contains'
p2893
I9
tp2894
a(S'NotContains'
p2895
I10
tp2896
a(S'BeginsWith'
p2897
I11
tp2898
a(S'EndsWith'
p2899
I12
tp2900
a(S'Listed'
p2901
I13
tp2902
assbsS'TClustersFromDistributions'
p2903
(i__main__
ClassDefinition
p2904
(dp2905
g4
I1
sg5
I01
sg6
g2903
sg7
S'TOrange'
p2906
sg9
I01
sg10
(lp2907
sg12
(lp2908
sg29
(dp2909
sbsS'TVariable'
p2910
(i__main__
ClassDefinition
p2911
(dp2912
g4
I1
sg5
I01
sg6
g2910
sg7
S'TOrange'
p2913
sg9
I01
sg10
(lp2914
sg12
(lp2915
g326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp2916
S'Type'
p2917
(lp2918
(S'None'
p2919
S'(int)TValue::NONE'
p2920
tp2921
a(S'Discrete'
p2922
S'(int)TValue::INTVAR'
p2923
tp2924
a(S'Continuous'
p2925
S'(int)TValue::FLOATVAR'
p2926
tp2927
a(S'Other'
p2928
S'(int)(TValue::FLOATVAR+1)'
p2929
tp2930
a(S'String'
p2931
S'(int)STRINGVAR'
p2932
tp2933
asS'MakeStatus'
p2934
(lp2935
(S'OK'
p2936
I0
tp2937
a(S'MissingValues'
p2938
I1
tp2939
a(S'NoRecognizedValues'
p2940
I2
tp2941
a(S'Incompatible'
p2942
I3
tp2943
a(S'NotFound'
p2944
I4
tp2945
assbsS'TNoiseValuesGenerator'
p2946
(i__main__
ClassDefinition
p2947
(dp2948
g4
I1
sg5
I01
sg6
g2946
sg7
S'TChangeExampleGenerator'
p2949
sg9
I00
sg10
(lp2950
sg12
(lp2951
(S'TIntFloatList'
p2952
S'replaceProbabilities'
p2953
S'replace_probabilities'
p2954
S"probabilities for replacing attributes' values"
p2955
I0
I0
I00
Ntp2956
a(S'TRandomGenerator'
p2957
S'randomGenerator'
p2958
S'random_generator'
p2959
S'random generator'
p2960
I0
I0
I00
Ntp2961
ag299
ag303
asg29
(dp2962
sbsS'TC45TreeNodeList'
p2963
(ipyprops
ClassDefinition
p2964
(dp2965
g4
I0
sg5
I01
sg6
g2963
sg7
g136
sg9
I0
sg10
(lp2966
sg12
(lp2967
sg29
(dp2968
sbsS'TFilter_sameValue'
p2969
(i__main__
ClassDefinition
p2970
(dp2971
g4
I1
sg5
I01
sg6
g2969
sg7
S'TFilter'
p2972
sg9
I00
sg10
(lp2973
sg12
(lp2974
(S'int'
p2975
S'position'
p2976
g2976
S'position of the observed attribute'
p2977
I0
I0
I01
Ntp2978
a(S'TValue'
p2979
S'value'
p2980
g2980
S'value that the selected examples should have'
p2981
I0
I0
I01
Ntp2982
ag688
ag692
asg29
(dp2983
sbsS'TEquiNDiscretization'
p2984
(i__main__
ClassDefinition
p2985
(dp2986
g4
I1
sg5
I01
sg6
g2984
sg7
S'TDiscretization'
p2987
sg9
I00
sg10
(lp2988
sg12
(lp2989
(S'int'
p2990
S'numberOfIntervals'
p2991
(g2991
g1011
tp2992
S' number of intervals'
p2993
I0
I0
I01
Ntp2994
a(S'bool'
p2995
S'recursiveDivision'
p2996
S'recursive_division'
p2997
S'find cut-off points by recursive division (default = true)'
p2998
I0
I0
I01
Ntp2999
asg29
(dp3000
sbsS'TImputerConstructor_average'
p3001
(i__main__
ClassDefinition
p3002
(dp3003
g4
I1
sg5
I01
sg6
g3001
sg7
S'TImputerConstructor'
p3004
sg9
I00
sg10
(lp3005
sg12
(lp3006
g157
asg29
(dp3007
sbsS'TDomainBasicAttrStat'
p3008
(ipyprops
ClassDefinition
p3009
(dp3010
g4
I0
sg5
I01
sg6
S'TDomainBasicAttrStat'
p3011
sg7
g136
sg9
I0
sg10
(lp3012
sg12
(lp3013
sg29
(dp3014
sbsS'TStopDistributionClustering'
p3015
(i__main__
ClassDefinition
p3016
(dp3017
g4
I1
sg5
I01
sg6
g3015
sg7
S'TOrange'
p3018
sg9
I01
sg10
(lp3019
sg12
(lp3020
sg29
(dp3021
sbsS'TImputerConstructor_random'
p3022
(i__main__
ClassDefinition
p3023
(dp3024
g4
I1
sg5
I01
sg6
g3022
sg7
S'TImputerConstructor'
p3025
sg9
I00
sg10
(lp3026
sg12
(lp3027
(S'bool'
p3028
S'deterministic'
p3029
g3029
S"tells whether to initialize random by example's CRC (default: false)"
p3030
I0
I0
I01
Ntp3031
ag157
asg29
(dp3032
sbsS'TCostWrapperClassifier'
p3033
(i__main__
ClassDefinition
p3034
(dp3035
g4
I1
sg5
I01
sg6
g3033
sg7
S'TClassifier'
p3036
sg9
I00
sg10
(lp3037
sg12
(lp3038
(S'TClassifier'
p3039
S'classifier'
p3040
g3040
S'basic classifier'
p3041
I0
I0
I00
Ntp3042
a(S'TCostMatrix'
p3043
S'costMatrix'
p3044
S'cost_matrix'
p3045
S'cost matrix'
p3046
I0
I0
I00
Ntp3047
ag94
ag99
asg29
(dp3048
sbsS'TPreprocessor_ignore'
p3049
(i__main__
ClassDefinition
p3050
(dp3051
g4
I1
sg5
I01
sg6
g3049
sg7
S'TPreprocessor'
p3052
sg9
I00
sg10
(lp3053
sg12
(lp3054
(S'TVarList'
p3055
S'attributes'
p3056
g3056
S'tells which attributes to remove'
p3057
I0
I0
I00
Ntp3058
asg29
(dp3059
sbsS'TEVDist'
p3060
(i__main__
ClassDefinition
p3061
(dp3062
g4
I1
sg5
I01
sg6
g3060
sg7
S'TOrange'
p3063
sg9
I00
sg10
(lp3064
sg12
(lp3065
(S'float'
p3066
S'mu'
p3067
g3067
S'mu of Fisher-Tippett distribution'
p3068
I0
I0
I01
Ntp3069
a(S'float'
p3070
S'beta'
p3071
g3071
S'beta of Fisher-Tippett distribution'
p3072
I0
I0
I01
Ntp3073
a(S'TFloatList'
p3074
S'percentiles'
p3075
g3075
S'usually 10 values - 0 = 5th percentile, 1 = 15th percentile, 9 = 95th percentile, change maxPercentile and step for other settings'
p3076
I0
I0
I00
Ntp3077
a(S'float'
p3078
S'maxPercentile'
p3079
S'max_percentile'
p3080
S'maxPercentile Value, default 0.95'
p3081
I0
I0
I01
Ntp3082
a(S'float'
p3083
S'step'
p3084
g3084
S'step of percentiles, default 0.1'
p3085
I0
I0
I01
Ntp3086
asg29
(dp3087
sbsS'TMeasureAttribute_Python'
p3088
(i__main__
ClassDefinition
p3089
(dp3090
g4
I1
sg5
I01
sg6
g3088
sg7
S'TMeasureAttribute'
p3091
sg9
I00
sg10
(lp3092
sg12
(lp3093
g919
ag924
ag929
ag934
asg29
(dp3094
sbsS'TDistributionAssessor_Measure'
p3095
(i__main__
ClassDefinition
p3096
(dp3097
g4
I1
sg5
I01
sg6
g3095
sg7
S'TDistributionAssessor'
p3098
sg9
I00
sg10
(lp3099
sg12
(lp3100
(S'TMeasureAttribute'
p3101
S'measure'
p3102
g3102
S'attribute quality measure'
p3103
I0
I0
I00
Ntp3104
asg29
(dp3105
sbsS'TDistributionAssessor_m'
p3106
(i__main__
ClassDefinition
p3107
(dp3108
g4
I1
sg5
I01
sg6
g3106
sg7
S'TDistributionAssessor'
p3109
sg9
I00
sg10
(lp3110
sg12
(lp3111
(S'float'
p3112
g1205
g1205
S'm for m-estimate'
p3113
I0
I0
I01
Ntp3114
asg29
(dp3115
sbsS'TClassifierRandomGenerator'
p3116
(i__main__
ClassDefinition
p3117
(dp3118
g4
I1
sg5
I01
sg6
g3116
sg7
S'TExampleGenerator'
p3119
sg9
I00
sg10
(lp3120
sg12
(lp3121
(S'TClassifier'
p3122
S'classify'
p3123
g3123
S'classifier'
p3124
I0
I0
I00
Ntp3125
a(S'int'
p3126
S'noOfEx'
p3127
S'no_of_ex'
p3128
S'number of examples'
p3129
I0
I0
I01
Ntp3130
ag299
ag303
asg29
(dp3131
sbsS'TThresholdDiscretizer'
p3132
(i__main__
ClassDefinition
p3133
(dp3134
g4
I1
sg5
I01
sg6
g3132
sg7
S'TDiscretizer'
p3135
sg9
I00
sg10
(lp3136
sg12
(lp3137
(S'float'
p3138
S'threshold'
p3139
g3139
S'threshold'
p3140
I0
I0
I01
Ntp3141
ag817
asg29
(dp3142
sbsS'TExampleTable'
p3143
(i__main__
ClassDefinition
p3144
(dp3145
g4
I1
sg5
I01
sg6
g3143
sg7
S'TExampleGenerator'
p3146
sg9
I00
sg10
(lp3147
sg12
(lp3148
(S'TRandomGenerator'
p3149
S'randomGenerator'
p3150
S'random_generator'
p3151
S'random generator used by randomExample'
p3152
I0
I0
I00
Ntp3153
a(S'TExampleGenerator'
p3154
S'lock'
p3155
(g3155
S'owner'
p3156
tp3157
S' the real owner of examples'
p3158
I01
I0
I00
Ntp3159
a(S'bool'
p3160
S'ownsExamples'
p3161
(g3161
S'owns_instances'
p3162
tp3163
S' if false, examples in this table are references to examples in another table'
p3164
I01
I0
I01
Ntp3165
ag299
ag303
asg29
(dp3166
sbsS'TEVDistGetter'
p3167
(i__main__
ClassDefinition
p3168
(dp3169
g4
I1
sg5
I01
sg6
g3167
sg7
S'TOrange'
p3170
sg9
I01
sg10
(lp3171
sg12
(lp3172
sg29
(dp3173
sbsS'TTreeSplitConstructor_Threshold'
p3174
(i__main__
ClassDefinition
p3175
(dp3176
g4
I1
sg5
I01
sg6
g3174
sg7
S'TTreeSplitConstructor_Measure'
p3177
sg9
I00
sg10
(lp3178
sg12
(lp3179
g1295
ag1300
ag780
asg29
(dp3180
sbsS'TMakeRandomIndicesN'
p3181
(i__main__
ClassDefinition
p3182
(dp3183
g4
I1
sg5
I01
sg6
g3181
sg7
S'TMakeRandomIndices'
p3184
sg9
I00
sg10
(lp3185
sg12
(lp3186
(S'TFloatList'
p3187
g2270
g2270
S'probabilities of indices (last is 1-sum(p))'
p3188
I0
I0
I00
Ntp3189
ag711
ag715
ag720
asg29
(dp3190
sbsS'TStopDistributionClustering_n'
p3191
(i__main__
ClassDefinition
p3192
(dp3193
g4
I1
sg5
I01
sg6
g3191
sg7
S'TStopDistributionClustering'
p3194
sg9
I00
sg10
(lp3195
sg12
(lp3196
(S'int'
p3197
g1011
g1011
S'number of clusters'
p3198
I0
I0
I01
Ntp3199
asg29
(dp3200
sbsS'TTreeExampleSplitter_UnknownsAsSelector'
p3201
(i__main__
ClassDefinition
p3202
(dp3203
g4
I1
sg5
I01
sg6
g3201
sg7
S'TTreeExampleSplitter'
p3204
sg9
I00
sg10
(lp3205
sg12
(lp3206
sg29
(dp3207
sbsS'TClassifier_Python'
p3208
(i__main__
ClassDefinition
p3209
(dp3210
g4
I1
sg5
I01
sg6
g3208
sg7
S'TClassifier'
p3211
sg9
I00
sg10
(lp3212
sg12
(lp3213
g94
ag99
asg29
(dp3214
sbsS'TFilter_isDefined'
p3215
(i__main__
ClassDefinition
p3216
(dp3217
g4
I1
sg5
I01
sg6
g3215
sg7
S'TFilter'
p3218
sg9
I00
sg10
(lp3219
sg12
(lp3220
(S'TAttributedBoolList'
p3221
S'check'
p3222
g3222
S'tells which attributes to check; checks all if the list is empty'
p3223
I0
I0
I00
Ntp3224
ag688
ag692
asg29
(dp3225
sbsS'TRemoveRedundantByQuality'
p3226
(i__main__
ClassDefinition
p3227
(dp3228
g4
I1
sg5
I01
sg6
g3226
sg7
S'TRemoveRedundant'
p3229
sg9
I00
sg10
(lp3230
sg12
(lp3231
(S'bool'
p3232
S'remeasure'
p3233
g3233
S'reapply the measure after removal'
p3234
I0
I0
I01
Ntp3235
a(S'float'
p3236
S'minQuality'
p3237
S'min_quality'
p3238
S'minimal acceptable quality'
p3239
I0
I0
I01
Ntp3240
a(S'int'
p3241
S'removeBut'
p3242
S'remove_but'
p3243
S'the desired number of attributes'
p3244
I0
I0
I01
Ntp3245
a(S'TMeasureAttribute'
p3246
S'measure'
p3247
g3247
S'attribute quality measure'
p3248
I0
I0
I00
Ntp3249
ag1338
asg29
(dp3250
sbsS'TGraphAsList'
p3251
(i__main__
ClassDefinition
p3252
(dp3253
g4
I1
sg5
I01
sg6
g3251
sg7
S'TGraph'
p3254
sg9
I00
sg10
(lp3255
sg12
(lp3256
g1476
ag1481
ag1485
asg29
(dp3257
sbsS'TProbabilityEstimatorConstructor_m'
p3258
(i__main__
ClassDefinition
p3259
(dp3260
g4
I1
sg5
I01
sg6
g3258
sg7
S'TProbabilityEstimatorConstructor'
p3261
sg9
I00
sg10
(lp3262
sg12
(lp3263
(S'float'
p3264
g1205
g1205
S'parameter m for m-estimation'
p3265
I0
I0
I01
Ntp3266
a(S'bool'
p3267
S'renormalize'
p3268
g3268
S'computes the estimate on the original (not the normalized) distribution'
p3269
I0
I0
I01
Ntp3270
asg29
(dp3271
sbsS'TDistanceMap'
p3272
(i__main__
ClassDefinition
p3273
(dp3274
g4
I1
sg5
I01
sg6
g3272
sg7
S'TOrange'
p3275
sg9
I00
sg10
(lp3276
sg12
(lp3277
(S'int'
p3278
S'dim'
p3279
g3279
S'bitmap dimension (in cells)'
p3280
I01
I0
I01
Ntp3281
a(S'int'
p3282
S'matrixType'
p3283
S'matrix_type'
p3284
S'0 lower, 1 upper, 2 symmetric'
p3285
I0
I0
I01
Ntp3286
a(S'TIntList'
p3287
S'elementIndices'
p3288
S'element_indices'
p3289
S'indices to elements (one for row + one at the end)'
p3290
I01
I0
I00
Ntp3291
asg29
(dp3292
sbsS'TDistanceMapConstructor'
p3293
(i__main__
ClassDefinition
p3294
(dp3295
g4
I1
sg5
I01
sg6
g3293
sg7
S'TOrange'
p3296
sg9
I00
sg10
(lp3297
sg12
(lp3298
(S'TSymMatrix'
p3299
S'distanceMatrix'
p3300
S'distance_matrix'
p3301
S'distance matrix'
p3302
I0
I0
I00
Ntp3303
a(S'TIntList'
p3304
S'order'
p3305
g3305
S'order of elements'
p3306
I0
I0
I00
Ntp3307
asg29
(dp3308
sbsS'TTransformValue'
p3309
(i__main__
ClassDefinition
p3310
(dp3311
g4
I1
sg5
I01
sg6
g3309
sg7
S'TOrange'
p3312
sg9
I01
sg10
(lp3313
sg12
(lp3314
g817
asg29
(dp3315
sbsS'TComputeDomainContingency_DomainTransformation'
p3316
(i__main__
ClassDefinition
p3317
(dp3318
g4
I1
sg5
I01
sg6
g3316
sg7
S'TComputeDomainContingency'
p3319
sg9
I00
sg10
(lp3320
sg12
(lp3321
(S'TDomainTransformerConstructor'
p3322
S'domainTransformerConstructor'
p3323
S'domain_transformer_constructor'
p3324
S'constructs a domain in which each attribute corresponds one of originals'
p3325
I0
I0
I00
Ntp3326
a(S'bool'
p3327
S'resultInOriginalDomain'
p3328
S'result_in_original_domain'
p3329
S'tells whether the resulting DomainContingency should consist of original attributes'
p3330
I0
I0
I01
Ntp3331
ag28
asg29
(dp3332
sbsS'TStopDistributionClustering_noBigChange'
p3333
(i__main__
ClassDefinition
p3334
(dp3335
g4
I1
sg5
I01
sg6
g3333
sg7
S'TStopDistributionClustering'
p3336
sg9
I00
sg10
(lp3337
sg12
(lp3338
sg29
(dp3339
sbsS'TTreePruner'
p3340
(i__main__
ClassDefinition
p3341
(dp3342
g4
I1
sg5
I01
sg6
g3340
sg7
S'TOrange'
p3343
sg9
I01
sg10
(lp3344
sg12
(lp3345
sg29
(dp3346
sbsg1816
(ipyprops
ClassDefinition
p3347
(dp3348
g4
I0
sg5
I01
sg6
g1816
sg7
g136
sg9
I0
sg10
(lp3349
sg12
(lp3350
sg29
(dp3351
sbsS'TStringValue'
p3352
(i__main__
ClassDefinition
p3353
(dp3354
g4
I1
sg5
I01
sg6
g3352
sg7
S'TSomeValue'
p3355
sg9
I00
sg10
(lp3356
sg12
(lp3357
sg29
(dp3358
sbsS'TVarList'
p3359
(ipyprops
ClassDefinition
p3360
(dp3361
g4
I0
sg5
I01
sg6
g3359
sg7
g136
sg9
I0
sg10
(lp3362
sg12
(lp3363
sg29
(dp3364
sbsS'TRuleLearner'
p3365
(i__main__
ClassDefinition
p3366
(dp3367
g4
I1
sg5
I01
sg6
g3365
sg7
S'TLearner'
p3368
sg9
I00
sg10
(lp3369
sg12
(lp3370
(S'TRuleDataStoppingCriteria'
p3371
S'dataStopping'
p3372
S'data_stopping'
p3373
g566
I0
I0
I00
Ntp3374
a(S'TRuleStoppingCriteria'
p3375
S'ruleStopping'
p3376
S'rule_stopping'
p3377
g566
I0
I0
I00
Ntp3378
a(S'TRuleCovererAndRemover'
p3379
S'coverAndRemove'
p3380
S'cover_and_remove'
p3381
g566
I0
I0
I00
Ntp3382
a(S'TRuleFinder'
p3383
S'ruleFinder'
p3384
S'rule_finder'
p3385
g566
I0
I0
I00
Ntp3386
a(S'TRuleClassifierConstructor'
p3387
S'classifierConstructor'
p3388
S'classifier_constructor'
p3389
S'classifier'
p3390
I0
I0
I00
Ntp3391
a(S'TProgressCallback'
p3392
S'progressCallback'
p3393
S'progress_callback'
p3394
S'progress callback function'
p3395
I0
I0
I00
Ntp3396
a(S'bool'
p3397
S'storeExamples'
p3398
S'store_examples'
p3399
g566
I0
I0
I01
Ntp3400
a(S'int'
p3401
S'targetClass'
p3402
S'target_class'
p3403
g566
I0
I0
I01
Ntp3404
a(S'TRuleList'
p3405
S'baseRules'
p3406
S'base_rules'
p3407
g566
I0
I0
I00
Ntp3408
ag110
asg29
(dp3409
sbsS'TOrdinal2Continuous'
p3410
(i__main__
ClassDefinition
p3411
(dp3412
g4
I1
sg5
I01
sg6
g3410
sg7
S'TTransformValue'
p3413
sg9
I00
sg10
(lp3414
sg12
(lp3415
(S'float'
p3416
S'factor'
p3417
g3417
S'number of values'
p3418
I0
I0
I01
Ntp3419
ag817
asg29
(dp3420
sbsS'TMultiLearner'
p3421
(i__main__
ClassDefinition
p3422
(dp3423
g4
I1
sg5
I01
sg6
g3421
sg7
S'TOrange'
p3424
sg9
I00
sg10
(lp3425
sg12
(lp3426
(S'int'
p3427
S'needs'
p3428
g3428
S'the kind of data that learner needs'
p3429
I01
I0
I01
Ntp3430
a(S'TDomain'
p3431
S'domain'
p3432
g3432
S'domain'
p3433
I0
I0
I00
Ntp3434
asg29
(dp3435
sbsS'TLinearLearner'
p3436
(i__main__
ClassDefinition
p3437
(dp3438
g4
I1
sg5
I01
sg6
g3436
sg7
S'TLearner'
p3439
sg9
I00
sg10
(lp3440
sg12
(lp3441
(S'int'
p3442
S'solver_type'
p3443
g3443
S' Solver type (loss function1)'
p3444
I0
I0
I01
S'LinearLearner_Lossfunction1'
p3445
tp3446
a(S'float'
p3447
S'eps'
p3448
g3448
S'Stopping criteria'
p3449
I0
I0
I01
Ntp3450
a(S'float'
p3451
S'C'
p3452
g3452
S'Regularization parameter'
p3453
I0
I0
I01
Ntp3454
a(S'float'
p3455
S'bias'
p3456
g3456
S'bias parameter (default -1.0 - no bias)'
p3457
I0
I0
I01
Ntp3458
ag110
asg29
(dp3459
S'LIBLINEAR_VERSION'
p3460
(lp3461
(S'VERSION'
p3462
S'180'
p3463
tp3464
asS'Lossfunction1'
p3465
(lp3466
(S'L2R_LR'
p3467
I0
tp3468
a(S'L2R_L2Loss_SVC_Dual'
p3469
I1
tp3470
a(S'L2R_L2Loss_SVC'
p3471
I2
tp3472
a(S'L2R_L1Loss_SVC_Dual'
p3473
I3
tp3474
a(S'MCSVM_CS'
p3475
I4
tp3476
a(S'L1R_L2Loss_SVC'
p3477
I5
tp3478
a(S'L1R_LR'
p3479
I6
tp3480
a(S'L2R_LR_Dual'
p3481
I7
tp3482
asS'Lossfunction1_old_'
p3483
(lp3484
(S'L2_LR'
p3485
I0
tp3486
a(S'L2Loss_SVM_Dual'
p3487
I1
tp3488
a(S'L2Loss_SVM'
p3489
I2
tp3490
a(S'L1Loss_SVM_Dual'
p3491
I3
tp3492
assbsS'TTreeSplitConstructor_Combined'
p3493
(i__main__
ClassDefinition
p3494
(dp3495
g4
I1
sg5
I01
sg6
g3493
sg7
S'TTreeSplitConstructor'
p3496
sg9
I00
sg10
(lp3497
sg12
(lp3498
(S'TTreeSplitConstructor'
p3499
S'discreteSplitConstructor'
p3500
S'discrete_split_constructor'
p3501
S'split constructor for discrete attributes'
p3502
I0
I0
I00
Ntp3503
a(S'TTreeSplitConstructor'
p3504
S'continuousSplitConstructor'
p3505
S'continuous_split_constructor'
p3506
S'split constructor for continuous attributes'
p3507
I0
I0
I00
Ntp3508
ag780
asg29
(dp3509
sbsS'TTransformValue_Python'
p3510
(i__main__
ClassDefinition
p3511
(dp3512
g4
I1
sg5
I01
sg6
g3510
sg7
S'TTransformValue'
p3513
sg9
I00
sg10
(lp3514
sg12
(lp3515
g817
asg29
(dp3516
sbsS'TRuleStoppingCriteria_Python'
p3517
(i__main__
ClassDefinition
p3518
(dp3519
g4
I1
sg5
I01
sg6
g3517
sg7
S'TRuleStoppingCriteria'
p3520
sg9
I00
sg10
(lp3521
sg12
(lp3522
sg29
(dp3523
sbsS'TRuleEvaluator_Python'
p3524
(i__main__
ClassDefinition
p3525
(dp3526
g4
I1
sg5
I01
sg6
g3524
sg7
S'TRuleEvaluator'
p3527
sg9
I00
sg10
(lp3528
sg12
(lp3529
sg29
(dp3530
sbsS'TIGBySorting'
p3531
(i__main__
ClassDefinition
p3532
(dp3533
g4
I1
sg5
I01
sg6
g3531
sg7
S'TIGConstructor'
p3534
sg9
I00
sg10
(lp3535
sg12
(lp3536
sg29
(dp3537
sbsS'TConditionalProbabilityEstimator_ByRows'
p3538
(i__main__
ClassDefinition
p3539
(dp3540
g4
I1
sg5
I01
sg6
g3538
sg7
S'TConditionalProbabilityEstimator'
p3541
sg9
I00
sg10
(lp3542
sg12
(lp3543
(S'TProbabilityEstimatorList'
p3544
S'estimatorList'
p3545
S'estimator_list'
p3546
S'A list of probability estimators'
p3547
I0
I0
I00
Ntp3548
ag126
ag131
asg29
(dp3549
sbsS'TFindNearest'
p3550
(i__main__
ClassDefinition
p3551
(dp3552
g4
I1
sg5
I01
sg6
g3550
sg7
S'TOrange'
p3553
sg9
I01
sg10
(lp3554
sg12
(lp3555
g1084
ag1089
asg29
(dp3556
sbsS'TProgressCallback'
p3557
(i__main__
ClassDefinition
p3558
(dp3559
g4
I1
sg5
I01
sg6
g3557
sg7
S'TOrange'
p3560
sg9
I01
sg10
(lp3561
sg12
(lp3562
sg29
(dp3563
sbsS'THierarchicalClustering'
p3564
(i__main__
ClassDefinition
p3565
(dp3566
g4
I1
sg5
I01
sg6
g3564
sg7
S'TOrange'
p3567
sg9
I00
sg10
(lp3568
sg12
(lp3569
(S'int'
p3570
S'linkage'
p3571
g3571
S' linkage'
p3572
I0
I0
I01
S'HierarchicalClustering_Linkage'
p3573
tp3574
a(S'bool'
p3575
S'overwriteMatrix'
p3576
S'overwrite_matrix'
p3577
S'if true (default is false) it will use (and destroy) the distance matrix given as argument'
p3578
I0
I0
I01
Ntp3579
a(S'TProgressCallback'
p3580
S'progressCallback'
p3581
S'progress_callback'
p3582
S'progress callback function'
p3583
I0
I0
I00
Ntp3584
asg29
(dp3585
S'Linkage'
p3586
(lp3587
(S'Single'
p3588
I0
tp3589
a(S'Average'
p3590
I1
tp3591
a(S'Complete'
p3592
I2
tp3593
a(S'Ward'
p3594
I3
tp3595
assbsS'TLogRegFitter_Cholesky'
p3596
(i__main__
ClassDefinition
p3597
(dp3598
g4
I1
sg5
I01
sg6
g3596
sg7
S'TLogRegFitter'
p3599
sg9
I00
sg10
(lp3600
sg12
(lp3601
sg29
(dp3602
sbsS'TClassifierFromVar'
p3603
(i__main__
ClassDefinition
p3604
(dp3605
g4
I1
sg5
I01
sg6
g3603
sg7
S'TClassifier'
p3606
sg9
I00
sg10
(lp3607
sg12
(lp3608
(S'TVariable'
p3609
S'whichVar'
p3610
(g3610
S'variable'
p3611
tp3612
S' variable'
p3613
I0
I0
I00
Ntp3614
a(S'TTransformValue'
p3615
S'transformer'
p3616
g3616
S'transformer'
p3617
I0
I0
I00
Ntp3618
a(S'TDistribution'
p3619
S'distributionForUnknown'
p3620
S'distribution_for_unknown'
p3621
S'distribution for unknown value'
p3622
I0
I0
I00
Ntp3623
a(S'bool'
p3624
S'transformUnknowns'
p3625
S'transform_unknowns'
p3626
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p3627
I0
I0
I01
Ntp3628
ag94
ag99
asg29
(dp3629
sbsg2326
(ipyprops
ClassDefinition
p3630
(dp3631
g4
I0
sg5
I01
sg6
g2326
sg7
g136
sg9
I0
sg10
(lp3632
sg12
(lp3633
sg29
(dp3634
sbsS'TFilter_index'
p3635
(ipyprops
ClassDefinition
p3636
(dp3637
g4
I0
sg5
I01
sg6
g3635
sg7
g136
sg9
I0
sg10
(lp3638
sg12
(lp3639
sg29
(dp3640
sbsS'TIM'
p3641
(i__main__
ClassDefinition
p3642
(dp3643
g4
I1
sg5
I01
sg6
g3641
sg7
S'TOrange'
p3644
sg9
I00
sg10
(lp3645
sg12
(lp3646
(S'int'
p3647
S'varType'
p3648
S'var_type'
p3649
S' class variable type'
p3650
I0
I0
I01
S'Variable_Type'
p3651
tp3652
a(S'TExampleTable'
p3653
S'rowExamples'
p3654
S'row_examples'
p3655
S'examples with free attributes for each row'
p3656
I0
I0
I00
Ntp3657
asg29
(dp3658
sbsS'TTreeSplitConstructor_OneAgainstOthers'
p3659
(i__main__
ClassDefinition
p3660
(dp3661
g4
I1
sg5
I01
sg6
g3659
sg7
S'TTreeSplitConstructor_Measure'
p3662
sg9
I00
sg10
(lp3663
sg12
(lp3664
g1295
ag1300
ag780
asg29
(dp3665
sbsS'TClassifier'
p3666
(i__main__
ClassDefinition
p3667
(dp3668
g4
I1
sg5
I01
sg6
g3666
sg7
S'TOrange'
p3669
sg9
I00
sg10
(lp3670
sg12
(lp3671
g94
ag99
asg29
(dp3672
sbsS'TTreeSplitConstructor_Python'
p3673
(i__main__
ClassDefinition
p3674
(dp3675
g4
I1
sg5
I01
sg6
g3673
sg7
S'TTreeSplitConstructor'
p3676
sg9
I00
sg10
(lp3677
sg12
(lp3678
g780
asg29
(dp3679
sbsS'TIG'
p3680
(i__main__
ClassDefinition
p3681
(dp3682
g4
I1
sg5
I01
sg6
g3680
sg7
S'TOrange'
p3683
sg9
I00
sg10
(lp3684
sg12
(lp3685
sg29
(dp3686
sbsS'TMeasureAttribute_relief'
p3687
(i__main__
ClassDefinition
p3688
(dp3689
g4
I1
sg5
I01
sg6
g3687
sg7
S'TMeasureAttribute'
p3690
sg9
I00
sg10
(lp3691
sg12
(lp3692
(S'float'
p3693
g1201
g1201
S'number of neighbours'
p3694
I0
I0
I01
Ntp3695
a(S'float'
p3696
g1205
g1205
S'number of reference examples'
p3697
I0
I0
I01
Ntp3698
a(S'bool'
p3699
S'checkCachedData'
p3700
S'check_cached_data'
p3701
S'tells whether to check the checksum of the data before reusing the cached neighbours'
p3702
I0
I0
I01
Ntp3703
ag919
ag924
ag929
ag934
asg29
(dp3704
sbsS'TEarthLearner'
p3705
(i__main__
ClassDefinition
p3706
(dp3707
g4
I1
sg5
I01
sg6
g3705
sg7
S'TLearner'
p3708
sg9
I00
sg10
(lp3709
sg12
(lp3710
(S'int'
p3711
S'max_terms'
p3712
g3712
S'Maximum number of terms.'
p3713
I0
I0
I01
Ntp3714
a(S'int'
p3715
S'max_degree'
p3716
g3716
S'Maximum degree of terms.'
p3717
I0
I0
I01
Ntp3718
a(S'float'
p3719
S'penalty'
p3720
g3720
S'Penalty.'
p3721
I0
I0
I01
Ntp3722
a(S'float'
p3723
S'threshold'
p3724
g3724
S'Forward step threshold.'
p3725
I0
I0
I01
Ntp3726
a(S'bool'
p3727
S'prune'
p3728
g3728
S'Prune terms (do backward pass).'
p3729
I0
I0
I01
Ntp3730
a(S'float'
p3731
S'fast_beta'
p3732
g3732
S'Fast beta (aging coefficient).'
p3733
I0
I0
I01
Ntp3734
a(S'float'
p3735
S'trace'
p3736
g3736
S'Execution trace (for debugging only).'
p3737
I0
I0
I01
Ntp3738
a(S'int'
p3739
S'min_span'
p3740
g3740
S'Min. span (training instances) between knots.'
p3741
I0
I0
I01
Ntp3742
a(S'int'
p3743
S'fast_k'
p3744
g3744
S'Fast K.'
p3745
I0
I0
I01
Ntp3746
a(S'bool'
p3747
S'new_var_penalty'
p3748
g3748
S'Penalty for adding a new variable.'
p3749
I0
I0
I01
Ntp3750
a(S'bool'
p3751
S'use_beta_cache'
p3752
g3752
S'Use caching for betas.'
p3753
I0
I0
I01
Ntp3754
ag110
asg29
(dp3755
sbsS'TMeasureAttribute_logOddsRatio'
p3756
(i__main__
ClassDefinition
p3757
(dp3758
g4
I1
sg5
I01
sg6
g3756
sg7
S'TMeasureAttributeFromProbabilities'
p3759
sg9
I00
sg10
(lp3760
sg12
(lp3761
g903
ag908
ag914
ag919
ag924
ag929
ag934
asg29
(dp3762
sbsS'TTreeExampleSplitter_Python'
p3763
(i__main__
ClassDefinition
p3764
(dp3765
g4
I1
sg5
I01
sg6
g3763
sg7
S'TTreeExampleSplitter'
p3766
sg9
I00
sg10
(lp3767
sg12
(lp3768
sg29
(dp3769
sbsS'TKernelFunc_Python'
p3770
(i__main__
ClassDefinition
p3771
(dp3772
g4
I1
sg5
I01
sg6
g3770
sg7
S'TKernelFunc'
p3773
sg9
I00
sg10
(lp3774
sg12
(lp3775
sg29
(dp3776
sbsS'TAdapterGenerator'
p3777
(i__main__
ClassDefinition
p3778
(dp3779
g4
I1
sg5
I01
sg6
g3777
sg7
S'TExampleGenerator'
p3780
sg9
I00
sg10
(lp3781
sg12
(lp3782
g299
ag303
asg29
(dp3783
sbsS'TIMFromExamples'
p3784
(i__main__
ClassDefinition
p3785
(dp3786
g4
I1
sg5
I01
sg6
g3784
sg7
S'TOrange'
p3787
sg9
I01
sg10
(lp3788
sg12
(lp3789
sg29
(dp3790
sbsS'TFilter_random'
p3791
(i__main__
ClassDefinition
p3792
(dp3793
g4
I1
sg5
I01
sg6
g3791
sg7
S'TFilter'
p3794
sg9
I00
sg10
(lp3795
sg12
(lp3796
(S'float'
p3797
S'prob'
p3798
g3798
S'probability of selecting an example'
p3799
I0
I0
I01
Ntp3800
a(S'TRandomGenerator'
p3801
S'randomGenerator'
p3802
S'random_generator'
p3803
S'random generator'
p3804
I0
I0
I00
Ntp3805
ag688
ag692
asg29
(dp3806
sbsS'TC45ExampleGenerator'
p3807
(i__main__
ClassDefinition
p3808
(dp3809
g4
I1
sg5
I01
sg6
g3807
sg7
S'TFileExampleGenerator'
p3810
sg9
I00
sg10
(lp3811
sg12
(lp3812
(S'TBoolList'
p3813
S'skip'
p3814
g3814
S'a boolean list, one element per attribute, denoting which attributes to skip'
p3815
I0
I0
I00
Ntp3816
ag1641
ag1646
ag1651
ag299
ag303
asg29
(dp3817
sbsS'TProbabilityEstimatorConstructor_loess'
p3818
(i__main__
ClassDefinition
p3819
(dp3820
g4
I1
sg5
I01
sg6
g3818
sg7
S'TProbabilityEstimatorConstructor'
p3821
sg9
I00
sg10
(lp3822
sg12
(lp3823
(S'float'
p3824
S'windowProportion'
p3825
S'window_proportion'
p3826
S'The proportion of points in a window for LR'
p3827
I0
I0
I01
Ntp3828
a(S'int'
p3829
S'nPoints'
p3830
S'n_points'
p3831
S'The number of points on curve (negative means the given number of points is inserted in each interval)'
p3832
I0
I0
I01
Ntp3833
a(S'int'
p3834
S'distributionMethod'
p3835
S'distribution_method'
p3836
S" Meaning of the 'nPoints'"
p3837
I0
I0
I01
S'ProbabilityEstimatorConstructor_loess_DistributionMethod'
p3838
tp3839
asg29
(dp3840
S'DistributionMethod'
p3841
(lp3842
(S'Minimal'
p3843
S'DISTRIBUTE_MINIMAL'
p3844
tp3845
a(S'Factor'
p3846
S'DISTRIBUTE_FACTOR'
p3847
tp3848
a(S'Fixed'
p3849
S'DISTRIBUTE_FIXED'
p3850
tp3851
a(S'Uniform'
p3852
S'DISTRIBUTE_UNIFORM'
p3853
tp3854
a(S'Maximal'
p3855
S'DISTRIBUTE_MAXIMAL'
p3856
tp3857
assbsS'TExamplesDistance_Lp'
p3858
(i__main__
ClassDefinition
p3859
(dp3860
g4
I1
sg5
I01
sg6
g3858
sg7
S'TExamplesDistance_Normalized'
p3861
sg9
I00
sg10
(lp3862
sg12
(lp3863
(S'float'
p3864
g2270
g2270
g2270
I01
I0
I01
Ntp3865
ag447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp3866
sbsS'TLogRegFitter'
p3867
(i__main__
ClassDefinition
p3868
(dp3869
g4
I1
sg5
I01
sg6
g3867
sg7
S'TOrange'
p3870
sg9
I01
sg10
(lp3871
sg12
(lp3872
sg29
(dp3873
S'ErrorCode'
p3874
(lp3875
(S'OK'
p3876
I0
tp3877
a(S'Infinity'
p3878
I1
tp3879
a(S'Divergence'
p3880
I2
tp3881
a(S'Constant'
p3882
I3
tp3883
a(S'Singularity'
p3884
I4
tp3885
assbsS'TProbabilityEstimatorList'
p3886
(ipyprops
ClassDefinition
p3887
(dp3888
g4
I0
sg5
I01
sg6
g3886
sg7
g136
sg9
I0
sg10
(lp3889
sg12
(lp3890
sg29
(dp3891
sbsS'TMakeRandomIndicesCV'
p3892
(i__main__
ClassDefinition
p3893
(dp3894
g4
I1
sg5
I01
sg6
g3892
sg7
S'TMakeRandomIndices'
p3895
sg9
I00
sg10
(lp3896
sg12
(lp3897
(S'int'
p3898
S'folds'
p3899
g3899
S'number of folds'
p3900
I0
I0
I01
Ntp3901
ag711
ag715
ag720
asg29
(dp3902
sbsS'TClassifierList'
p3903
(ipyprops
ClassDefinition
p3904
(dp3905
g4
I0
sg5
I01
sg6
g3903
sg7
g136
sg9
I0
sg10
(lp3906
sg12
(lp3907
sg29
(dp3908
sbsS'TPreprocessor_removeDuplicates'
p3909
(i__main__
ClassDefinition
p3910
(dp3911
g4
I1
sg5
I01
sg6
g3909
sg7
S'TPreprocessor'
p3912
sg9
I00
sg10
(lp3913
sg12
(lp3914
sg29
(dp3915
sbsS'TTreeExampleSplitter_UnknownsAsBranchSizes'
p3916
(i__main__
ClassDefinition
p3917
(dp3918
g4
I1
sg5
I01
sg6
g3916
sg7
S'TTreeExampleSplitter'
p3919
sg9
I00
sg10
(lp3920
sg12
(lp3921
sg29
(dp3922
sbsS'TExamplesDistanceConstructor_Normalized'
p3923
(i__main__
ClassDefinition
p3924
(dp3925
g4
I1
sg5
I01
sg6
g3923
sg7
S'TExamplesDistanceConstructor'
p3926
sg9
I01
sg10
(lp3927
sg12
(lp3928
g2104
ag2109
ag1360
asg29
(dp3929
sbsS'TCostWrapperLearner'
p3930
(i__main__
ClassDefinition
p3931
(dp3932
g4
I1
sg5
I01
sg6
g3930
sg7
S'TLearner'
p3933
sg9
I00
sg10
(lp3934
sg12
(lp3935
(S'TLearner'
p3936
S'basicLearner'
p3937
S'basic_learner'
p3938
S'basic learner'
p3939
I0
I0
I00
Ntp3940
a(S'TCostMatrix'
p3941
S'costMatrix'
p3942
S'cost_matrix'
p3943
S'cost matrix'
p3944
I0
I0
I00
Ntp3945
ag110
asg29
(dp3946
sbsS'TRandomLearner'
p3947
(i__main__
ClassDefinition
p3948
(dp3949
g4
I1
sg5
I01
sg6
g3947
sg7
S'TLearner'
p3950
sg9
I00
sg10
(lp3951
sg12
(lp3952
(S'TDistribution'
p3953
S'probabilities'
p3954
g3954
S'probabilities of predictions'
p3955
I0
I0
I00
Ntp3956
ag110
asg29
(dp3957
sbsNNsS'TImputer_asValue'
p3958
(i__main__
ClassDefinition
p3959
(dp3960
g4
I1
sg5
I01
sg6
g3958
sg7
S'TImputer'
p3961
sg9
I00
sg10
(lp3962
sg12
(lp3963
(S'TDomain'
p3964
S'domain'
p3965
g3965
S'domain to which the values are converted'
p3966
I0
I0
I00
Ntp3967
a(S'TExample'
p3968
S'defaults'
p3969
g3969
S'values to impute instead of missing ones - for continuous attributes only!'
p3970
I0
I0
I00
Ntp3971
asg29
(dp3972
sbsS'TPearsonCorrelation'
p3973
(i__main__
ClassDefinition
p3974
(dp3975
g4
I1
sg5
I01
sg6
g3973
sg7
S'TOrange'
p3976
sg9
I00
sg10
(lp3977
sg12
(lp3978
(S'float'
p3979
S'r'
p3980
g3980
S'correlation coefficient'
p3981
I0
I0
I01
Ntp3982
a(S'float'
p3983
g2299
g2299
S't-statics significance'
p3984
I0
I0
I01
Ntp3985
a(S'int'
p3986
S'df'
p3987
g3987
S'degrees of freedom'
p3988
I0
I0
I01
Ntp3989
a(S'float'
p3990
g2270
g2270
S'significance'
p3991
I0
I0
I01
Ntp3992
asg29
(dp3993
sbsS'TDistributionAssessor_Laplace'
p3994
(i__main__
ClassDefinition
p3995
(dp3996
g4
I1
sg5
I01
sg6
g3994
sg7
S'TDistributionAssessor'
p3997
sg9
I00
sg10
(lp3998
sg12
(lp3999
sg29
(dp4000
sbsS'TColumnAssessor_Relief'
p4001
(i__main__
ClassDefinition
p4002
(dp4003
g4
I1
sg5
I01
sg6
g4001
sg7
S'TColumnAssessor'
p4004
sg9
I00
sg10
(lp4005
sg12
(lp4006
sg29
(dp4007
sbsS'TClassifierByLookupTable'
p4008
(i__main__
ClassDefinition
p4009
(dp4010
g4
I1
sg5
I01
sg6
g4008
sg7
S'TClassifier'
p4011
sg9
I01
sg10
(lp4012
sg12
(lp4013
g85
ag89
ag94
ag99
asg29
(dp4014
sbsS'TRuleBeamFinder'
p4015
(i__main__
ClassDefinition
p4016
(dp4017
g4
I1
sg5
I01
sg6
g4015
sg7
S'TRuleFinder'
p4018
sg9
I00
sg10
(lp4019
sg12
(lp4020
(S'TRuleBeamInitializer'
p4021
S'initializer'
p4022
g4022
g566
I0
I0
I00
Ntp4023
a(S'TRuleBeamRefiner'
p4024
S'refiner'
p4025
g4025
g566
I0
I0
I00
Ntp4026
a(S'TRuleBeamCandidateSelector'
p4027
S'candidateSelector'
p4028
S'candidate_selector'
p4029
g566
I0
I0
I00
Ntp4030
a(S'TRuleBeamFilter'
p4031
S'ruleFilter'
p4032
S'rule_filter'
p4033
g566
I0
I0
I00
Ntp4034
a(S'TRuleValidator'
p4035
S'ruleStoppingValidator'
p4036
S'rule_stopping_validator'
p4037
g566
I0
I0
I00
Ntp4038
a(S'TRuleValidator'
p4039
S'validator'
p4040
g4040
g566
I0
I0
I00
Ntp4041
a(S'TRuleEvaluator'
p4042
S'evaluator'
p4043
g4043
g566
I0
I0
I00
Ntp4044
asg29
(dp4045
sbsS'TC45Classifier'
p4046
(i__main__
ClassDefinition
p4047
(dp4048
g4
I1
sg5
I01
sg6
g4046
sg7
S'TClassifierFD'
p4049
sg9
I00
sg10
(lp4050
sg12
(lp4051
(S'TC45TreeNode'
p4052
S'tree'
p4053
g4053
S'tree'
p4054
I0
I0
I00
Ntp4055
ag284
ag94
ag99
asg29
(dp4056
sbsS'TGeneralExampleClustering'
p4057
(i__main__
ClassDefinition
p4058
(dp4059
g4
I1
sg5
I01
sg6
g4057
sg7
S'TOrange'
p4060
sg9
I01
sg10
(lp4061
sg12
(lp4062
sg29
(dp4063
sbsS'TMeasureAttribute_cost'
p4064
(i__main__
ClassDefinition
p4065
(dp4066
g4
I1
sg5
I01
sg6
g4064
sg7
S'TMeasureAttributeFromProbabilities'
p4067
sg9
I00
sg10
(lp4068
sg12
(lp4069
(S'TCostMatrix'
p4070
S'cost'
p4071
g4071
S'cost matrix'
p4072
I0
I0
I00
Ntp4073
ag903
ag908
ag914
ag919
ag924
ag929
ag934
asg29
(dp4074
sbsS'TImputerConstructor_minimal'
p4075
(i__main__
ClassDefinition
p4076
(dp4077
g4
I1
sg5
I01
sg6
g4075
sg7
S'TImputerConstructor'
p4078
sg9
I00
sg10
(lp4079
sg12
(lp4080
g157
asg29
(dp4081
sbsS'TClustersFromIM'
p4082
(i__main__
ClassDefinition
p4083
(dp4084
g4
I1
sg5
I01
sg6
g4082
sg7
S'TOrange'
p4085
sg9
I01
sg10
(lp4086
sg12
(lp4087
sg29
(dp4088
sbsS'TFilter_values'
p4089
(i__main__
ClassDefinition
p4090
(dp4091
g4
I1
sg5
I01
sg6
g4089
sg7
S'TFilter'
p4092
sg9
I00
sg10
(lp4093
sg12
(lp4094
(S'TValueFilterList'
p4095
S'conditions'
p4096
g4096
S'a list of filters'
p4097
I0
I0
I00
Ntp4098
a(S'bool'
p4099
S'conjunction'
p4100
g4100
S'if true, filter computes conjunction, otherwise disjunction'
p4101
I0
I0
I01
Ntp4102
ag688
ag692
asg29
(dp4103
S'Operator'
p4104
(lp4105
(S'None'
p4106
I0
tp4107
a(S'Equal'
p4108
I1
tp4109
a(S'NotEqual'
p4110
I2
tp4111
a(S'Less'
p4112
I3
tp4113
a(S'LessEqual'
p4114
I4
tp4115
a(S'Greater'
p4116
I5
tp4117
a(S'GreaterEqual'
p4118
I6
tp4119
a(S'Between'
p4120
I7
tp4121
a(S'Outside'
p4122
I8
tp4123
a(S'Contains'
p4124
I9
tp4125
a(S'NotContains'
p4126
I10
tp4127
a(S'BeginsWith'
p4128
I11
tp4129
a(S'EndsWith'
p4130
I12
tp4131
a(S'Listed'
p4132
I13
tp4133
assbsS'TRuleClassifier'
p4134
(i__main__
ClassDefinition
p4135
(dp4136
g4
I1
sg5
I01
sg6
g4134
sg7
S'TClassifier'
p4137
sg9
I01
sg10
(lp4138
sg12
(lp4139
g598
ag601
ag605
ag94
ag99
asg29
(dp4140
sbsS'TAssociationRules'
p4141
(ipyprops
ClassDefinition
p4142
(dp4143
g4
I0
sg5
I01
sg6
g4141
sg7
g136
sg9
I0
sg10
(lp4144
sg12
(lp4145
sg29
(dp4146
sbsS'TSymMatrix'
p4147
(i__main__
ClassDefinition
p4148
(dp4149
g4
I1
sg5
I01
sg6
g4147
sg7
S'TOrange'
p4150
sg9
I00
sg10
(lp4151
sg12
(lp4152
(S'int'
p4153
S'dim'
p4154
g4154
S'matrix dimension'
p4155
I01
I0
I01
Ntp4156
a(S'int'
p4157
S'matrixType'
p4158
S'matrix_type'
p4159
S' 0 lower, 1 upper, 2 symmetric, 3 lower_filled, 4 upper_filled'
p4160
I0
I0
I01
S'SymMatrix_Shape'
p4161
tp4162
asg29
(dp4163
S'Shape'
p4164
(lp4165
(S'Lower'
p4166
I0
tp4167
a(S'Upper'
p4168
I1
tp4169
a(S'Symmetric'
p4170
I2
tp4171
a(S'LowerFilled'
p4172
I3
tp4173
a(S'UpperFilled'
p4174
I4
tp4175
assbsS'TSVMLearner'
p4176
(i__main__
ClassDefinition
p4177
(dp4178
g4
I1
sg5
I01
sg6
g4176
sg7
S'TLearner'
p4179
sg9
I00
sg10
(lp4180
sg12
(lp4181
(S'int'
p4182
S'svm_type'
p4183
g4183
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p4184
I0
I0
I01
S'SVMLearner_SVMType'
p4185
tp4186
a(S'int'
p4187
S'kernel_type'
p4188
g4188
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p4189
I0
I0
I01
S'SVMLearner_Kernel'
p4190
tp4191
a(S'float'
p4192
S'degree'
p4193
g4193
S'polynomial kernel degree'
p4194
I0
I0
I01
Ntp4195
a(S'float'
p4196
S'gamma'
p4197
g4197
S'poly/rbf/sigm parameter'
p4198
I0
I0
I01
Ntp4199
a(S'float'
p4200
S'coef0'
p4201
g4201
S'poly/sigm parameter'
p4202
I0
I0
I01
Ntp4203
a(S'float'
p4204
S'cache_size'
p4205
g4205
S'cache size in MB'
p4206
I0
I0
I01
Ntp4207
a(S'float'
p4208
S'eps'
p4209
g4209
S'stopping criteria'
p4210
I0
I0
I01
Ntp4211
a(S'float'
p4212
g3452
g3452
S'for C_SVC and C_SVR'
p4213
I0
I0
I01
Ntp4214
a(S'float'
p4215
S'nu'
p4216
g4216
S'for NU_SVC and ONE_CLASS'
p4217
I0
I0
I01
Ntp4218
a(S'float'
p4219
g2270
g2270
S'for C_SVR'
p4220
I0
I0
I01
Ntp4221
a(S'int'
p4222
S'shrinking'
p4223
g4223
S'shrinking'
p4224
I0
I0
I01
Ntp4225
a(S'int'
p4226
S'probability'
p4227
g4227
S'probability'
p4228
I0
I0
I01
Ntp4229
a(S'bool'
p4230
S'verbose'
p4231
g4231
S'verbose'
p4232
I0
I0
I01
Ntp4233
a(S'TKernelFunc'
p4234
S'kernelFunc'
p4235
S'kernel_func'
p4236
S'custom kernel function'
p4237
I0
I0
I00
Ntp4238
ag110
asg29
(dp4239
S'Kernel'
p4240
(lp4241
(S'Linear'
p4242
S'LINEAR'
p4243
tp4244
a(S'Polynomial'
p4245
S'POLY'
p4246
tp4247
a(S'RBF'
p4248
S'RBF'
p4249
tp4250
a(S'Sigmoid'
p4251
S'SIGMOID'
p4252
tp4253
a(S'Custom'
p4254
S'PRECOMPUTED'
p4255
tp4256
asS'LIBSVM_VERSION'
p4257
(lp4258
(S'VERSION'
p4259
S'LIBSVM_VERSION'
p4260
tp4261
asS'SVMType'
p4262
(lp4263
(S'C_SVC'
p4264
S'C_SVC'
p4265
tp4266
a(S'Nu_SVC'
p4267
S'NU_SVC'
p4268
tp4269
a(S'OneClass'
p4270
S'ONE_CLASS'
p4271
tp4272
a(S'Epsilon_SVR'
p4273
S'EPSILON_SVR'
p4274
tp4275
a(S'Nu_SVR'
p4276
S'NU_SVR'
p4277
tp4278
assbsS'TPNN'
p4279
(i__main__
ClassDefinition
p4280
(dp4281
g4
I1
sg5
I01
sg6
g4279
sg7
S'TClassifierFD'
p4282
sg9
I00
sg10
(lp4283
sg12
(lp4284
g742
ag746
ag750
ag754
ag759
ag764
ag768
ag284
ag94
ag99
asg29
(dp4285
sbsS'TImputerConstructor_defaults'
p4286
(i__main__
ClassDefinition
p4287
(dp4288
g4
I1
sg5
I01
sg6
g4286
sg7
S'TImputerConstructor'
p4289
sg9
I00
sg10
(lp4290
sg12
(lp4291
(S'TExample'
p4292
S'defaults'
p4293
g4293
S'default values to be imputed instead missing ones'
p4294
I0
I0
I00
Ntp4295
ag157
asg29
(dp4296
sbsS'TConditionalProbabilityEstimatorConstructor'
p4297
(i__main__
ClassDefinition
p4298
(dp4299
g4
I1
sg5
I01
sg6
g4297
sg7
S'TOrange'
p4300
sg9
I01
sg10
(lp4301
sg12
(lp4302
sg29
(dp4303
sbsS'TPreprocessor_takeMissingClasses'
p4304
(i__main__
ClassDefinition
p4305
(dp4306
g4
I1
sg5
I01
sg6
g4304
sg7
S'TPreprocessor'
p4307
sg9
I00
sg10
(lp4308
sg12
(lp4309
sg29
(dp4310
sbsS'TClustersFromIMByAssessor'
p4311
(i__main__
ClassDefinition
p4312
(dp4313
g4
I1
sg5
I01
sg6
g4311
sg7
S'TClustersFromIM'
p4314
sg9
I00
sg10
(lp4315
sg12
(lp4316
(S'TColumnAssessor'
p4317
S'columnAssessor'
p4318
S'column_assessor'
p4319
S'column quality assessor'
p4320
I0
I0
I00
Ntp4321
a(S'TStopIMClusteringByAssessor'
p4322
S'stopCriterion'
p4323
S'stop_criterion'
p4324
S'stop criterion'
p4325
I0
I0
I00
Ntp4326
asg29
(dp4327
sbsS'TRuleValidator_LRS'
p4328
(i__main__
ClassDefinition
p4329
(dp4330
g4
I1
sg5
I01
sg6
g4328
sg7
S'TRuleValidator'
p4331
sg9
I00
sg10
(lp4332
sg12
(lp4333
(S'float'
p4334
S'alpha'
p4335
g4335
g566
I0
I0
I01
Ntp4336
a(S'float'
p4337
S'min_coverage'
p4338
g4338
g566
I0
I0
I01
Ntp4339
a(S'int'
p4340
S'max_rule_complexity'
p4341
g4341
g566
I0
I0
I01
Ntp4342
a(S'float'
p4343
S'min_quality'
p4344
g4344
g566
I0
I0
I01
Ntp4345
asg29
(dp4346
sbsS'TLogRegFitter_Python'
p4347
(i__main__
ClassDefinition
p4348
(dp4349
g4
I1
sg5
I01
sg6
g4347
sg7
S'TLogRegFitter'
p4350
sg9
I00
sg10
(lp4351
sg12
(lp4352
sg29
(dp4353
sbsS'TEarthClassifier'
p4354
(i__main__
ClassDefinition
p4355
(dp4356
g4
I1
sg5
I01
sg6
g4354
sg7
S'TClassifierFD'
p4357
sg9
I00
sg10
(lp4358
sg12
(lp4359
(S'int'
p4360
S'num_preds'
p4361
g4361
S'Number of predictor variables'
p4362
I0
I0
I01
Ntp4363
a(S'int'
p4364
S'num_terms'
p4365
g4365
S'Number of used terms'
p4366
I0
I0
I01
Ntp4367
a(S'int'
p4368
S'max_terms'
p4369
g4369
S'Maximum number of terms'
p4370
I0
I0
I01
Ntp4371
a(S'int'
p4372
S'num_responses'
p4373
g4373
S'Number of response variables'
p4374
I0
I0
I01
Ntp4375
a(S'TBoolList'
p4376
S'best_set'
p4377
g4377
S'Used terms.'
p4378
I0
I0
I00
Ntp4379
a(S'TFloatListList'
p4380
S'dirs'
p4381
g4381
S'max_preds x num_preds matrix'
p4382
I0
I0
I00
Ntp4383
a(S'TFloatListList'
p4384
S'cuts'
p4385
g4385
S'max_preds x num_preds matrix of cuts'
p4386
I0
I0
I00
Ntp4387
a(S'TFloatList'
p4388
S'betas'
p4389
g4389
S'Term coefficients;'
p4390
I0
I0
I00
Ntp4391
ag284
ag94
ag99
asg29
(dp4392
sbsS'TValueList'
p4393
(ipyprops
ClassDefinition
p4394
(dp4395
g4
I0
sg5
I01
sg6
S'TValueList'
p4396
sg7
g136
sg9
I0
sg10
(lp4397
sg12
(lp4398
sg29
(dp4399
sbsS'TTreeExampleSplitter_UnknownsToCommon'
p4400
(i__main__
ClassDefinition
p4401
(dp4402
g4
I1
sg5
I01
sg6
g4400
sg7
S'TTreeExampleSplitter'
p4403
sg9
I00
sg10
(lp4404
sg12
(lp4405
sg29
(dp4406
sbsS'TContDistribution'
p4407
(i__main__
ClassDefinition
p4408
(dp4409
g4
I1
sg5
I01
sg6
g4407
sg7
S'TDistribution'
p4410
sg9
I00
sg10
(lp4411
sg12
(lp4412
(S'TFloatList'
p4413
S'variances'
p4414
g4414
S'variances'
p4415
I0
I0
I00
Ntp4416
a(S'float'
p4417
S'sum'
p4418
g4418
S'weighted sum of elements (i.e. N*average)'
p4419
I01
I0
I01
Ntp4420
a(S'float'
p4421
S'sum2'
p4422
g4422
S'weighted sum of squares of elements'
p4423
I01
I0
I01
Ntp4424
ag1125
ag1129
ag1133
ag1137
ag1141
ag1146
ag1151
ag1156
asg29
(dp4425
sbsS'TTreeDescender_UnknownMergeAsSelector'
p4426
(i__main__
ClassDefinition
p4427
(dp4428
g4
I1
sg5
I01
sg6
g4426
sg7
g1585
sg9
I0
sg10
(lp4429
sg12
(lp4430
sg29
(dp4431
sbsS'TContingencyAttrClass'
p4432
(i__main__
ClassDefinition
p4433
(dp4434
g4
I1
sg5
I01
sg6
g4432
sg7
S'TContingencyClass'
p4435
sg9
I00
sg10
(lp4436
sg12
(lp4437
g1670
ag1675
ag1681
ag1686
ag1691
ag1696
asg29
(dp4438
sbsS'TDomainTransformerConstructor'
p4439
(i__main__
ClassDefinition
p4440
(dp4441
g4
I1
sg5
I01
sg6
g4439
sg7
S'TOrange'
p4442
sg9
I01
sg10
(lp4443
sg12
(lp4444
(S'bool'
p4445
S'preservesOrder'
p4446
S'preserves_order'
p4447
S'a flag telling that original attributes have corresponding attribute in the same order'
p4448
I01
I0
I01
Ntp4449
a(S'bool'
p4450
S'preservesAttributes'
p4451
S'preserves_attributes'
p4452
S'a flag telling whether each original has a corresponding new attribute'
p4453
I01
I0
I01
Ntp4454
asg29
(dp4455
sbsS'TPythonValueSpecial'
p4456
(i__main__
ClassDefinition
p4457
(dp4458
g4
I1
sg5
I01
sg6
g4456
sg7
S'TOrange'
p4459
sg9
I00
sg10
(lp4460
sg12
(lp4461
(S'int'
p4462
S'valueType'
p4463
S'value_type'
p4464
S'value type'
p4465
I0
I0
I01
Ntp4466
asg29
(dp4467
sbsS'TIGConstructor'
p4468
(i__main__
ClassDefinition
p4469
(dp4470
g4
I1
sg5
I01
sg6
g4468
sg7
S'TOrange'
p4471
sg9
I01
sg10
(lp4472
sg12
(lp4473
sg29
(dp4474
sbsS'TProbabilityEstimatorConstructor'
p4475
(i__main__
ClassDefinition
p4476
(dp4477
g4
I1
sg5
I01
sg6
g4475
sg7
S'TOrange'
p4478
sg9
I01
sg10
(lp4479
sg12
(lp4480
sg29
(dp4481
sbsS'TTreeNodeList'
p4482
(ipyprops
ClassDefinition
p4483
(dp4484
g4
I0
sg5
I01
sg6
g4482
sg7
g136
sg9
I0
sg10
(lp4485
sg12
(lp4486
sg29
(dp4487
sbsS'TFloatVariable'
p4488
(i__main__
ClassDefinition
p4489
(dp4490
g4
I1
sg5
I01
sg6
g4488
sg7
S'TVariable'
p4491
sg9
I00
sg10
(lp4492
sg12
(lp4493
(S'float'
p4494
S'startValue'
p4495
S'start_value'
p4496
S'lowest value'
p4497
I0
I0
I01
Ntp4498
a(S'float'
p4499
S'endValue'
p4500
S'end_value'
p4501
S'highest value'
p4502
I0
I0
I01
Ntp4503
a(S'float'
p4504
S'stepValue'
p4505
S'step_value'
p4506
S'step'
p4507
I0
I0
I01
Ntp4508
a(S'int'
p4509
S'numberOfDecimals'
p4510
S'number_of_decimals'
p4511
S'number of digits after decimal point'
p4512
I0
I0
I01
Ntp4513
a(S'bool'
p4514
S'scientificFormat'
p4515
S'scientific_format'
p4516
S'use scientific format in output'
p4517
I0
I0
I01
Ntp4518
a(S'int'
p4519
S'adjustDecimals'
p4520
S'adjust_decimals'
p4521
S"adjust number of decimals according to the values converted (0 - no, 1 - yes, 2 - yes, but haven't seen any yet)"
p4522
I0
I0
I01
Ntp4523
ag326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp4524
sbsS'TImputer_random'
p4525
(i__main__
ClassDefinition
p4526
(dp4527
g4
I1
sg5
I01
sg6
g4525
sg7
S'TImputer'
p4528
sg9
I00
sg10
(lp4529
sg12
(lp4530
(S'bool'
p4531
S'imputeClass'
p4532
S'impute_class'
p4533
S'Tells whether to impute the class values, too (default: true)'
p4534
I0
I0
I01
Ntp4535
a(S'bool'
p4536
S'deterministic'
p4537
g4537
S"tells whether to initialize random by example's CRC (default: false)"
p4538
I0
I0
I01
Ntp4539
a(S'TDistributionList'
p4540
S'distributions'
p4541
g4541
S'probability functions'
p4542
I0
I0
I00
Ntp4543
asg29
(dp4544
sbsS'TFilter_hasMeta'
p4545
(i__main__
ClassDefinition
p4546
(dp4547
g4
I1
sg5
I01
sg6
g4545
sg7
S'TFilter'
p4548
sg9
I00
sg10
(lp4549
sg12
(lp4550
(S'int'
p4551
S'id'
p4552
g4552
S'meta attribute id'
p4553
I0
I0
I01
Ntp4554
ag688
ag692
asg29
(dp4555
sbsS'TProbabilityEstimatorConstructor_kernel'
p4556
(i__main__
ClassDefinition
p4557
(dp4558
g4
I1
sg5
I01
sg6
g4556
sg7
S'TProbabilityEstimatorConstructor'
p4559
sg9
I00
sg10
(lp4560
sg12
(lp4561
(S'float'
p4562
S'minImpact'
p4563
S'min_impact'
p4564
S'Minimal impact the point must have to be counted'
p4565
I0
I0
I01
Ntp4566
a(S'float'
p4567
S'smoothing'
p4568
g4568
S'Smoothing factor'
p4569
I0
I0
I01
Ntp4570
a(S'int'
p4571
S'nPoints'
p4572
S'n_points'
p4573
S'Number of points for curve (negative means the given number of points is inserted in each interval)'
p4574
I0
I0
I01
Ntp4575
asg29
(dp4576
sbsS'TRuleCovererAndRemover_Default'
p4577
(i__main__
ClassDefinition
p4578
(dp4579
g4
I1
sg5
I01
sg6
g4577
sg7
S'TRuleCovererAndRemover'
p4580
sg9
I00
sg10
(lp4581
sg12
(lp4582
sg29
(dp4583
sbsS'TMakeRandomIndices'
p4584
(i__main__
ClassDefinition
p4585
(dp4586
g4
I1
sg5
I01
sg6
g4584
sg7
S'TOrange'
p4587
sg9
I00
sg10
(lp4588
sg12
(lp4589
g711
ag715
ag720
asg29
(dp4590
S'Stratification'
p4591
(lp4592
(S'StratifiedIfPossible'
p4593
S'-1'
p4594
tp4595
a(S'NotStratified'
p4596
I0
tp4597
a(S'Stratified'
p4598
I1
tp4599
assbsS'TFilter_Python'
p4600
(i__main__
ClassDefinition
p4601
(dp4602
g4
I1
sg5
I01
sg6
g4600
sg7
S'TFilter'
p4603
sg9
I00
sg10
(lp4604
sg12
(lp4605
g688
ag692
asg29
(dp4606
sbsS'TRuleBeamInitializer_Default'
p4607
(i__main__
ClassDefinition
p4608
(dp4609
g4
I1
sg5
I01
sg6
g4607
sg7
S'TRuleBeamInitializer'
p4610
sg9
I00
sg10
(lp4611
sg12
(lp4612
sg29
(dp4613
sbsS'TExamplesDistanceConstructor_Python'
p4614
(i__main__
ClassDefinition
p4615
(dp4616
g4
I1
sg5
I01
sg6
g4614
sg7
S'TExamplesDistanceConstructor'
p4617
sg9
I00
sg10
(lp4618
sg12
(lp4619
g1360
asg29
(dp4620
sbsS'TTreeDescender_Python'
p4621
(i__main__
ClassDefinition
p4622
(dp4623
g4
I1
sg5
I01
sg6
g4621
sg7
S'TTreeDescender'
p4624
sg9
I00
sg10
(lp4625
sg12
(lp4626
sg29
(dp4627
sbsS'THeatmap'
p4628
(i__main__
ClassDefinition
p4629
(dp4630
g4
I1
sg5
I0
sg6
g4628
sg7
S'TOrange'
p4631
sg9
I00
sg10
(lp4632
sg12
(lp4633
(S'int'
p4634
S'height'
p4635
g4635
S'bitmap height (in cells)'
p4636
I0
I0
I01
Ntp4637
a(S'int'
p4638
S'width'
p4639
g4639
S'bitmap width (in cells)'
p4640
I0
I0
I01
Ntp4641
a(S'TExampleTable'
p4642
S'examples'
p4643
g4643
S'examples from the whole bitmap'
p4644
I01
I0
I00
Ntp4645
a(S'TIntList'
p4646
S'exampleIndices'
p4647
S'example_indices'
p4648
S"indices to 'examples' (one for row + one at the end)"
p4649
I01
I0
I00
Ntp4650
asg29
(dp4651
sbsS'TSubsetsGenerator_constant'
p4652
(i__main__
ClassDefinition
p4653
(dp4654
g4
I1
sg5
I01
sg6
g4652
sg7
S'TSubsetsGenerator'
p4655
sg9
I00
sg10
(lp4656
sg12
(lp4657
(S'TVarList'
p4658
S'constant'
p4659
g4659
S'a subset that is returned (once!)'
p4660
I0
I0
I00
Ntp4661
ag200
asg29
(dp4662
sbsS'TGaussianNoiseGenerator'
p4663
(i__main__
ClassDefinition
p4664
(dp4665
g4
I1
sg5
I01
sg6
g4663
sg7
S'TChangeExampleGenerator'
p4666
sg9
I00
sg10
(lp4667
sg12
(lp4668
(S'TIntFloatList'
p4669
S'deviations'
p4670
g4670
S"deviations for attributes' values"
p4671
I0
I0
I00
Ntp4672
a(S'TRandomGenerator'
p4673
S'randomGenerator'
p4674
S'random_generator'
p4675
S'random generator'
p4676
I0
I0
I00
Ntp4677
ag299
ag303
asg29
(dp4678
sbsS'TClustersFromDistributionsByAssessor'
p4679
(i__main__
ClassDefinition
p4680
(dp4681
g4
I1
sg5
I01
sg6
g4679
sg7
S'TClustersFromDistributions'
p4682
sg9
I00
sg10
(lp4683
sg12
(lp4684
(S'TDistributionAssessor'
p4685
S'distributionAssessor'
p4686
S'distribution_assessor'
p4687
S'column quality assessor'
p4688
I0
I0
I00
Ntp4689
a(S'TStopDistributionClustering'
p4690
S'stopCriterion'
p4691
S'stop_criterion'
p4692
S'stop criterion'
p4693
I0
I0
I00
Ntp4694
a(S'float'
p4695
S'minProfitProportion'
p4696
S'min_profit_proportion'
p4697
S'minimal merge profit'
p4698
I0
I0
I01
Ntp4699
asg29
(dp4700
sbsS'TExamplesDistance_Hamming'
p4701
(i__main__
ClassDefinition
p4702
(dp4703
g4
I1
sg5
I01
sg6
g4701
sg7
S'TExamplesDistance'
p4704
sg9
I00
sg10
(lp4705
sg12
(lp4706
(S'bool'
p4707
S'ignoreClass'
p4708
S'ignore_class'
p4709
S'if true (default), class value is ignored when computing distances'
p4710
I0
I0
I01
Ntp4711
a(S'bool'
p4712
S'ignoreUnknowns'
p4713
S'ignore_unknowns'
p4714
S'if true (default: false) unknown values are ignored in computation'
p4715
I0
I0
I01
Ntp4716
asg29
(dp4717
sbsS'TDefaultClassifier'
p4718
(i__main__
ClassDefinition
p4719
(dp4720
g4
I1
sg5
I01
sg6
g4718
sg7
S'TClassifier'
p4721
sg9
I00
sg10
(lp4722
sg12
(lp4723
(S'TValue'
p4724
S'defaultVal'
p4725
S'default_val'
p4726
S'default prediction'
p4727
I0
I0
I01
Ntp4728
a(S'TDistribution'
p4729
S'defaultDistribution'
p4730
S'default_distribution'
p4731
S'default distribution'
p4732
I0
I0
I00
Ntp4733
ag94
ag99
asg29
(dp4734
sbsS'TColumnAssessor_Kramer'
p4735
(i__main__
ClassDefinition
p4736
(dp4737
g4
I1
sg5
I01
sg6
g4735
sg7
S'TColumnAssessor'
p4738
sg9
I00
sg10
(lp4739
sg12
(lp4740
sg29
(dp4741
sbsS'TEVDistGetter_Python'
p4742
(i__main__
ClassDefinition
p4743
(dp4744
g4
I1
sg5
I01
sg6
g4742
sg7
S'TEVDistGetter'
p4745
sg9
I00
sg10
(lp4746
sg12
(lp4747
sg29
(dp4748
sbsS'TDiscretization'
p4749
(i__main__
ClassDefinition
p4750
(dp4751
g4
I1
sg5
I01
sg6
g4749
sg7
S'TOrange'
p4752
sg9
I01
sg10
(lp4753
sg12
(lp4754
sg29
(dp4755
sbsS'TTreeSplitConstructor_Measure'
p4756
(i__main__
ClassDefinition
p4757
(dp4758
g4
I1
sg5
I01
sg6
g4756
sg7
S'TTreeSplitConstructor'
p4759
sg9
I01
sg10
(lp4760
sg12
(lp4761
g1295
ag1300
ag780
asg29
(dp4762
sbsS'TTreeNode'
p4763
(i__main__
ClassDefinition
p4764
(dp4765
g4
I1
sg5
I01
sg6
g4763
sg7
S'TOrange'
p4766
sg9
I00
sg10
(lp4767
sg12
(lp4768
(S'TClassifier'
p4769
S'nodeClassifier'
p4770
S'node_classifier'
p4771
S'classifies an example'
p4772
I0
I0
I00
Ntp4773
a(S'TDistribution'
p4774
S'distribution'
p4775
g4775
S'distribution of classes in the node'
p4776
I0
I0
I00
Ntp4777
a(S'TDomainContingency'
p4778
S'contingency'
p4779
g4779
S'domain contingency for examples in the node'
p4780
I0
I0
I00
Ntp4781
a(S'TExampleGenerator'
p4782
S'examples'
p4783
g4783
S'learning examples (if stored)'
p4784
I0
I0
I00
Ntp4785
a(S'int'
p4786
S'weightID'
p4787
S'weight_ID'
p4788
S'weightID used to construct this node'
p4789
I0
I0
I01
Ntp4790
a(S'TClassifier'
p4791
S'branchSelector'
p4792
S'branch_selector'
p4793
S'classifier that select a branch for an example'
p4794
I0
I0
I00
Ntp4795
a(S'TTreeNodeList'
p4796
S'branches'
p4797
g4797
S'classifiers presenting the branches'
p4798
I0
I0
I00
Ntp4799
a(S'TStringList'
p4800
S'branchDescriptions'
p4801
S'branch_descriptions'
p4802
S'descriptions of branches'
p4803
I0
I0
I00
Ntp4804
a(S'TDiscDistribution'
p4805
S'branchSizes'
p4806
S'branch_sizes'
p4807
S'numbers of examples in branches'
p4808
I0
I0
I00
Ntp4809
asg29
(dp4810
sbsS'TTransformValue_IsDefined'
p4811
(i__main__
ClassDefinition
p4812
(dp4813
g4
I1
sg5
I01
sg6
g4811
sg7
S'TTransformValue'
p4814
sg9
I00
sg10
(lp4815
sg12
(lp4816
g817
asg29
(dp4817
sbsS'TFilter_hasClassValue'
p4818
(i__main__
ClassDefinition
p4819
(dp4820
g4
I1
sg5
I01
sg6
g4818
sg7
S'TFilter'
p4821
sg9
I00
sg10
(lp4822
sg12
(lp4823
g688
ag692
asg29
(dp4824
sbsS'TStopDistributionClustering_binary'
p4825
(i__main__
ClassDefinition
p4826
(dp4827
g4
I1
sg5
I01
sg6
g4825
sg7
S'TStopDistributionClustering'
p4828
sg9
I00
sg10
(lp4829
sg12
(lp4830
sg29
(dp4831
sbsS'TIMByRows'
p4832
(i__main__
ClassDefinition
p4833
(dp4834
g4
I1
sg5
I01
sg6
g4832
sg7
S'TOrange'
p4835
sg9
I00
sg10
(lp4836
sg12
(lp4837
(S'int'
p4838
S'varType'
p4839
S'var_type'
p4840
S' class variable type'
p4841
I0
I0
I01
S'Variable_Type'
p4842
tp4843
asg29
(dp4844
sbsS'TRuleFinder'
p4845
(i__main__
ClassDefinition
p4846
(dp4847
g4
I1
sg5
I01
sg6
g4845
sg7
S'TOrange'
p4848
sg9
I01
sg10
(lp4849
sg12
(lp4850
g4041
ag4044
asg29
(dp4851
sbsS'TClassifierByExampleTable'
p4852
(i__main__
ClassDefinition
p4853
(dp4854
g4
I1
sg5
I01
sg6
g4852
sg7
S'TClassifierFD'
p4855
sg9
I00
sg10
(lp4856
sg12
(lp4857
(S'TExampleTable'
p4858
S'sortedExamples'
p4859
S'sorted_examples'
p4860
S'a table of examples'
p4861
I0
I0
I00
Ntp4862
a(S'bool'
p4863
S'containsUnknowns'
p4864
S'contains_unknowns'
p4865
S'if true, the table contains unknown values'
p4866
I0
I0
I01
Ntp4867
a(S'TClassifier'
p4868
S'classifierForUnknown'
p4869
S'classifier_for_unknown'
p4870
S'a classifier for unknown cases'
p4871
I0
I0
I00
Ntp4872
a(S'TEFMDataDescription'
p4873
S'dataDescription'
p4874
S'data_description'
p4875
S'data description'
p4876
I0
I0
I00
Ntp4877
ag284
ag94
ag99
asg29
(dp4878
sbsS'TKernelFunc'
p4879
(i__main__
ClassDefinition
p4880
(dp4881
g4
I1
sg5
I01
sg6
g4879
sg7
S'TOrange'
p4882
sg9
I01
sg10
(lp4883
sg12
(lp4884
sg29
(dp4885
sbsS'TChangeExampleGenerator'
p4886
(i__main__
ClassDefinition
p4887
(dp4888
g4
I1
sg5
I01
sg6
g4886
sg7
S'TAdapterGenerator'
p4889
sg9
I01
sg10
(lp4890
sg12
(lp4891
g299
ag303
asg29
(dp4892
sbsS'TRule'
p4893
(i__main__
ClassDefinition
p4894
(dp4895
g4
I1
sg5
I01
sg6
g4893
sg7
S'TOrange'
p4896
sg9
I00
sg10
(lp4897
sg12
(lp4898
(S'TFilter'
p4899
S'filter'
p4900
g4900
S'stored filter for this rule'
p4901
I0
I0
I00
Ntp4902
a(S'TFilter'
p4903
S'valuesFilter'
p4904
S'values_filter'
p4905
S'Filter_values representation of main filter (sometimes needed)'
p4906
I0
I0
I00
Ntp4907
a(S'TClassifier'
p4908
S'classifier'
p4909
g4909
S'classifies an example'
p4910
I0
I0
I00
Ntp4911
a(S'TLearner'
p4912
S'learner'
p4913
g4913
S'learns a classifier from data'
p4914
I0
I0
I00
Ntp4915
a(S'TRule'
p4916
S'parentRule'
p4917
S'parent_rule'
p4918
g566
I0
I0
I00
Ntp4919
a(S'TDistribution'
p4920
S'baseDist'
p4921
S'base_dist'
p4922
S'initial distribution'
p4923
I0
I0
I00
Ntp4924
a(S'TDistribution'
p4925
S'classDistribution'
p4926
S'class_distribution'
p4927
S'distribution of classes covered by the rule'
p4928
I0
I0
I00
Ntp4929
a(S'TExampleTable'
p4930
S'examples'
p4931
g4931
S'covered examples'
p4932
I0
I0
I00
Ntp4933
a(S'int'
p4934
S'weightID'
p4935
S'weight_ID'
p4936
S'weight for the stored examples'
p4937
I0
I0
I01
Ntp4938
a(S'float'
p4939
S'quality'
p4940
g4940
S'some measure of rule quality'
p4941
I0
I0
I01
Ntp4942
a(S'int'
p4943
S'complexity'
p4944
g4944
g566
I0
I0
I01
Ntp4945
a(S'float'
p4946
S'chi'
p4947
g4947
g566
I0
I0
I01
Ntp4948
a(S'int'
p4949
S'requiredConditions'
p4950
S'required_conditions'
p4951
S'conditions that are mandatory in rule - rule attribute significance avoids these'
p4952
I0
I0
I01
Ntp4953
asg29
(dp4954
sbsS'TIntervalDiscretizer'
p4955
(i__main__
ClassDefinition
p4956
(dp4957
g4
I1
sg5
I01
sg6
g4955
sg7
S'TDiscretizer'
p4958
sg9
I00
sg10
(lp4959
sg12
(lp4960
(S'TFloatList'
p4961
S'points'
p4962
g4962
S'cut-off points'
p4963
I0
I0
I00
Ntp4964
ag817
asg29
(dp4965
sbsS'TClassifierByLookupTable2'
p4966
(i__main__
ClassDefinition
p4967
(dp4968
g4
I1
sg5
I01
sg6
g4966
sg7
S'TClassifierByLookupTable'
p4969
sg9
I00
sg10
(lp4970
sg12
(lp4971
(S'TVariable'
p4972
S'variable1'
p4973
g4973
S'the first attribute used for classification'
p4974
I01
I0
I00
Ntp4975
a(S'TVariable'
p4976
S'variable2'
p4977
g4977
S'the second attribute used for classification'
p4978
I01
I0
I00
Ntp4979
a(S'int'
p4980
S'noOfValues1'
p4981
S'no_of_values1'
p4982
S'number of values of the first attribute'
p4983
I01
I0
I01
Ntp4984
a(S'int'
p4985
S'noOfValues2'
p4986
S'no_of_values2'
p4987
S'number of values of the second attribute'
p4988
I01
I0
I01
Ntp4989
a(S'TEFMDataDescription'
p4990
S'dataDescription'
p4991
S'data_description'
p4992
S'data description'
p4993
I0
I0
I00
Ntp4994
ag85
ag89
ag94
ag99
asg29
(dp4995
sbsS'TPreprocessor_addClassNoise'
p4996
(i__main__
ClassDefinition
p4997
(dp4998
g4
I1
sg5
I01
sg6
g4996
sg7
S'TPreprocessor'
p4999
sg9
I00
sg10
(lp5000
sg12
(lp5001
(S'float'
p5002
S'proportion'
p5003
g5003
S'proportion of changed class values'
p5004
I0
I0
I01
Ntp5005
a(S'TRandomGenerator'
p5006
S'randomGenerator'
p5007
S'random_generator'
p5008
S'random number generator'
p5009
I0
I0
I00
Ntp5010
asg29
(dp5011
sbsS'TExampleGenerator'
p5012
(i__main__
ClassDefinition
p5013
(dp5014
g4
I1
sg5
I01
sg6
g5012
sg7
S'TOrange'
p5015
sg9
I01
sg10
(lp5016
sg12
(lp5017
g299
ag303
asg29
(dp5018
sbsS'TClassifierByLookupTable1'
p5019
(i__main__
ClassDefinition
p5020
(dp5021
g4
I1
sg5
I01
sg6
g5019
sg7
S'TClassifierByLookupTable'
p5022
sg9
I00
sg10
(lp5023
sg12
(lp5024
(S'TVariable'
p5025
S'variable1'
p5026
(g5026
S'variable'
p5027
tp5028
S' attribute used for classification'
p5029
I01
I0
I00
Ntp5030
ag85
ag89
ag94
ag99
asg29
(dp5031
sbsS'TRuleClassifierConstructor_Python'
p5032
(i__main__
ClassDefinition
p5033
(dp5034
g4
I1
sg5
I01
sg6
g5032
sg7
S'TRuleClassifierConstructor'
p5035
sg9
I00
sg10
(lp5036
sg12
(lp5037
sg29
(dp5038
sbsS'TRemoveRedundantOneValue'
p5039
(i__main__
ClassDefinition
p5040
(dp5041
g4
I1
sg5
I01
sg6
g5039
sg7
S'TRemoveRedundant'
p5042
sg9
I00
sg10
(lp5043
sg12
(lp5044
(S'bool'
p5045
S'onData'
p5046
S'on_data'
p5047
S'observe the actual number of value on the data (not on attribute definitions)'
p5048
I0
I0
I01
Ntp5049
ag1338
asg29
(dp5050
sbsS'TDistributionAssessor_Relief'
p5051
(i__main__
ClassDefinition
p5052
(dp5053
g4
I1
sg5
I01
sg6
g5051
sg7
S'TDistributionAssessor'
p5054
sg9
I00
sg10
(lp5055
sg12
(lp5056
sg29
(dp5057
sbsS'TEnumVariable'
p5058
(i__main__
ClassDefinition
p5059
(dp5060
g4
I1
sg5
I01
sg6
g5058
sg7
S'TVariable'
p5061
sg9
I00
sg10
(lp5062
sg12
(lp5063
(S'TStringList'
p5064
S'values'
p5065
g5065
S"attribute's values"
p5066
I0
I0
I00
Ntp5067
a(S'int'
p5068
S'baseValue'
p5069
S'base_value'
p5070
S'the index of the base value'
p5071
I0
I0
I01
Ntp5072
ag326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp5073
sbsS'THeatmapConstructor'
p5074
(i__main__
ClassDefinition
p5075
(dp5076
g4
I1
sg5
I0
sg6
g5074
sg7
S'TOrange'
p5077
sg9
I00
sg10
(lp5078
sg12
(lp5079
(S'TExampleTable'
p5080
S'sortedExamples'
p5081
S'sorted_examples'
p5082
S'sortedExamples'
p5083
I01
I0
I00
Ntp5084
a(S'int'
p5085
S'nColumns'
p5086
S'n_columns'
p5087
S'number of columns'
p5088
I01
I0
I01
Ntp5089
a(S'int'
p5090
S'nRows'
p5091
S'n_rows'
p5092
S'number of rows'
p5093
I01
I0
I01
Ntp5094
a(S'int'
p5095
S'nClasses'
p5096
S'n_classes'
p5097
S'number of classes (0 if the data is not classified)'
p5098
I01
I0
I01
Ntp5099
asg29
(dp5100
sbsS'TConditionalProbabilityEstimatorConstructor_loess'
p5101
(i__main__
ClassDefinition
p5102
(dp5103
g4
I1
sg5
I01
sg6
g5101
sg7
S'TConditionalProbabilityEstimatorConstructor'
p5104
sg9
I00
sg10
(lp5105
sg12
(lp5106
(S'float'
p5107
S'windowProportion'
p5108
S'window_proportion'
p5109
S'The proportion of points in a window for LR'
p5110
I0
I0
I01
Ntp5111
a(S'int'
p5112
S'nPoints'
p5113
S'n_points'
p5114
S'The number of points on curve'
p5115
I0
I0
I01
Ntp5116
a(S'int'
p5117
S'distributionMethod'
p5118
S'distribution_method'
p5119
S" Meaning of the 'nPoints'"
p5120
I0
I0
I01
S'ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod'
p5121
tp5122
asg29
(dp5123
S'DistributionMethod'
p5124
(lp5125
(S'Minimal'
p5126
S'DISTRIBUTE_MINIMAL'
p5127
tp5128
a(S'Factor'
p5129
S'DISTRIBUTE_FACTOR'
p5130
tp5131
a(S'Fixed'
p5132
S'DISTRIBUTE_FIXED'
p5133
tp5134
a(S'Uniform'
p5135
S'DISTRIBUTE_UNIFORM'
p5136
tp5137
a(S'Maximal'
p5138
S'DISTRIBUTE_MAXIMAL'
p5139
tp5140
assbsS'TPreprocessor_addMissing'
p5141
(i__main__
ClassDefinition
p5142
(dp5143
g4
I1
sg5
I01
sg6
g5141
sg7
S'TPreprocessor'
p5144
sg9
I00
sg10
(lp5145
sg12
(lp5146
(S'TVariableFloatMap'
p5147
S'proportions'
p5148
g5148
S'proportion of removed values for individual values'
p5149
I0
I0
I00
Ntp5150
a(S'float'
p5151
S'defaultProportion'
p5152
S'default_proportion'
p5153
S'default proportion of removed values (for attributes not specified above)'
p5154
I0
I0
I01
Ntp5155
a(S'int'
p5156
S'specialType'
p5157
S'special_type'
p5158
S'special value type (1=DC, 2=DK)'
p5159
I0
I0
I01
Ntp5160
a(S'TRandomGenerator'
p5161
S'randomGenerator'
p5162
S'random_generator'
p5163
S'random number generator'
p5164
I0
I0
I00
Ntp5165
asg29
(dp5166
sbsS'TRuleBeamCandidateSelector'
p5167
(i__main__
ClassDefinition
p5168
(dp5169
g4
I1
sg5
I01
sg6
g5167
sg7
S'TOrange'
p5170
sg9
I01
sg10
(lp5171
sg12
(lp5172
sg29
(dp5173
sbsS'TSubsetsGenerator_minMaxSize'
p5174
(i__main__
ClassDefinition
p5175
(dp5176
g4
I1
sg5
I01
sg6
g5174
sg7
S'TSubsetsGenerator'
p5177
sg9
I00
sg10
(lp5178
sg12
(lp5179
(S'int'
p5180
S'min'
p5181
g5181
S'minimal subset size'
p5182
I0
I0
I01
Ntp5183
a(S'int'
p5184
S'max'
p5185
g5185
S'maximal subset size'
p5186
I0
I0
I01
Ntp5187
ag200
asg29
(dp5188
sbsS'TClusteringTreeLearner'
p5189
(i__main__
ClassDefinition
p5190
(dp5191
g4
I1
sg5
I01
sg6
g5189
sg7
S'TMultiLearner'
p5192
sg9
I00
sg10
(lp5193
sg12
(lp5194
(S'float'
p5195
S'minMajority'
p5196
S'min_majority'
p5197
S'the minimal majority each class variable must exceed to stop building'
p5198
I0
I0
I01
Ntp5199
a(S'float'
p5200
S'minMSE'
p5201
S'min_MSE'
p5202
S'the minimal MSE each class variable must be lower than to stop building'
p5203
I0
I0
I01
Ntp5204
a(S'int'
p5205
S'minInstances'
p5206
S'min_instances'
p5207
S'the minimal number of examples for division to continue'
p5208
I0
I0
I01
Ntp5209
a(S'int'
p5210
S'maxDepth'
p5211
S'max_depth'
p5212
S'the maximal depth a tree can reach'
p5213
I0
I0
I01
Ntp5214
a(S'int'
p5215
S'method'
p5216
g5216
g566
I0
I0
I01
Ntp5217
a(S'float'
p5218
S'skipProb'
p5219
S'skip_prob'
p5220
g566
I0
I0
I01
Ntp5221
a(S'TRandomGenerator'
p5222
S'randomGenerator'
p5223
S'random_generator'
p5224
g566
I0
I0
I00
Ntp5225
ag3430
ag3434
asg29
(dp5226
sbsS'TTreeExampleSplitter_UnknownsToAll'
p5227
(i__main__
ClassDefinition
p5228
(dp5229
g4
I1
sg5
I01
sg6
g5227
sg7
S'TTreeExampleSplitter'
p5230
sg9
I00
sg10
(lp5231
sg12
(lp5232
sg29
(dp5233
sbsS'TValueFilter_stringList'
p5234
(i__main__
ClassDefinition
p5235
(dp5236
g4
I1
sg5
I01
sg6
g5234
sg7
S'TValueFilter'
p5237
sg9
I00
sg10
(lp5238
sg12
(lp5239
(S'TStringList'
p5240
S'values'
p5241
g5241
S'accepted values'
p5242
I0
I0
I00
Ntp5243
a(S'bool'
p5244
S'caseSensitive'
p5245
S'case_sensitive'
p5246
S'if true (default), the comparison is case sensitive'
p5247
I0
I0
I01
Ntp5248
ag1054
ag1059
asg29
(dp5249
sbsS'TContingencyClass'
p5250
(i__main__
ClassDefinition
p5251
(dp5252
g4
I1
sg5
I01
sg6
g5250
sg7
S'TContingency'
p5253
sg9
I01
sg10
(lp5254
sg12
(lp5255
g1670
ag1675
ag1681
ag1686
ag1691
ag1696
asg29
(dp5256
sbsS'TAssociationClassifier'
p5257
(i__main__
ClassDefinition
p5258
(dp5259
g4
I1
sg5
I01
sg6
g5257
sg7
S'TClassifierFD'
p5260
sg9
I00
sg10
(lp5261
sg12
(lp5262
(S'TAssociationRules'
p5263
S'rules'
p5264
g5264
S'association rules'
p5265
I0
I0
I00
Ntp5266
a(S'int'
p5267
S'voteWeight'
p5268
S'vote_weight'
p5269
S'vote weight (s=support, c=confidence, p=product)'
p5270
I0
I0
I01
Ntp5271
ag284
ag94
ag99
asg29
(dp5272
sbsS'TDomainDistributions'
p5273
(ipyprops
ClassDefinition
p5274
(dp5275
g4
I0
sg5
I01
sg6
S'TDomainDistributions'
p5276
sg7
g136
sg9
I0
sg10
(lp5277
sg12
(lp5278
sg29
(dp5279
sbsS'TSVMLearnerSparse'
p5280
(i__main__
ClassDefinition
p5281
(dp5282
g4
I1
sg5
I01
sg6
g5280
sg7
S'TSVMLearner'
p5283
sg9
I00
sg10
(lp5284
sg12
(lp5285
(S'bool'
p5286
S'useNonMeta'
p5287
S'use_non_meta'
p5288
S'include non meta attributes in the learning process'
p5289
I0
I0
I01
Ntp5290
ag4186
ag4191
ag4195
ag4199
ag4203
ag4207
ag4211
ag4214
ag4218
ag4221
ag4225
ag4229
ag4233
ag4238
ag110
asg29
(dp5291
sbsS'TDomain'
p5292
(i__main__
ClassDefinition
p5293
(dp5294
g4
I1
sg5
I01
sg6
g5292
sg7
S'TOrange'
p5295
sg9
I00
sg10
(lp5296
sg12
(lp5297
(S'TVariable'
p5298
S'classVar'
p5299
S'class_var'
p5300
S'class variable'
p5301
I01
I0
I00
Ntp5302
a(S'TVarList'
p5303
S'attributes'
p5304
(g5304
S'features'
p5305
tp5306
S' list of attributes, excluding the class'
p5307
I01
I0
I00
Ntp5308
a(S'TVarList'
p5309
S'variables'
p5310
g5310
S'list of attributes, including the class at the end of the list'
p5311
I01
I0
I00
Ntp5312
a(S'TVarList'
p5313
S'classVars'
p5314
S'class_vars'
p5315
S'list of class variables, if multiple; else None'
p5316
I01
I0
I00
Ntp5317
a(S'int'
p5318
S'version'
p5319
g5319
S"unique version identifier; it's changed each time a domain is changed"
p5320
I01
I0
I01
Ntp5321
asg29
(dp5322
sbsS'TTreePruner_SameMajority'
p5323
(i__main__
ClassDefinition
p5324
(dp5325
g4
I1
sg5
I01
sg6
g5323
sg7
S'TTreePruner'
p5326
sg9
I00
sg10
(lp5327
sg12
(lp5328
sg29
(dp5329
sbsS'TSubsetsGenerator_constant_iterator'
p5330
(i__main__
ClassDefinition
p5331
(dp5332
g4
I1
sg5
I01
sg6
g5330
sg7
S'TSubsetsGenerator_iterator'
p5333
sg9
I00
sg10
(lp5334
sg12
(lp5335
(S'TVarList'
p5336
S'constant'
p5337
g5337
S'a subset that is returned (once!)'
p5338
I0
I0
I00
Ntp5339
a(S'bool'
p5340
S'moreToCome'
p5341
S'more_to_come'
p5342
g566
I0
I0
I01
Ntp5343
ag503
asg29
(dp5344
sbsS'TExampleDistConstructor'
p5345
(i__main__
ClassDefinition
p5346
(dp5347
g4
I1
sg5
I01
sg6
g5345
sg7
S'TOrange'
p5348
sg9
I01
sg10
(lp5349
sg12
(lp5350
sg29
(dp5351
sbsS'TIMByIMByRows'
p5352
(i__main__
ClassDefinition
p5353
(dp5354
g4
I1
sg5
I01
sg6
g5352
sg7
S'TIMConstructor'
p5355
sg9
I00
sg10
(lp5356
sg12
(lp5357
g1242
asg29
(dp5358
sbsS'TAlignmentList'
p5359
(ipyprops
ClassDefinition
p5360
(dp5361
g4
I0
sg5
I01
sg6
g5359
sg7
g136
sg9
I0
sg10
(lp5362
sg12
(lp5363
sg29
(dp5364
sbsS'TDiscrete2Continuous'
p5365
(i__main__
ClassDefinition
p5366
(dp5367
g4
I1
sg5
I01
sg6
g5365
sg7
S'TTransformValue'
p5368
sg9
I00
sg10
(lp5369
sg12
(lp5370
(S'int'
p5371
S'value'
p5372
g5372
S'target value'
p5373
I0
I0
I01
Ntp5374
a(S'bool'
p5375
S'invert'
p5376
g5376
S'give 1.0 to values not equal to the target'
p5377
I0
I0
I01
Ntp5378
a(S'bool'
p5379
S'zeroBased'
p5380
S'zero_based'
p5381
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p5382
I0
I0
I01
Ntp5383
ag817
asg29
(dp5384
sbsS'TDomainDiscretization'
p5385
(i__main__
ClassDefinition
p5386
(dp5387
g4
I1
sg5
I01
sg6
g5385
sg7
S'TOrange'
p5388
sg9
I00
sg10
(lp5389
sg12
(lp5390
(S'TDiscretization'
p5391
S'discretization'
p5392
g5392
S'discretization'
p5393
I0
I0
I00
Ntp5394
asg29
(dp5395
sbsS'TColumnAssessor_m'
p5396
(i__main__
ClassDefinition
p5397
(dp5398
g4
I1
sg5
I01
sg6
g5396
sg7
S'TColumnAssessor'
p5399
sg9
I00
sg10
(lp5400
sg12
(lp5401
(S'float'
p5402
g1205
g1205
S'm for m-estimate'
p5403
I0
I0
I01
Ntp5404
asg29
(dp5405
sbsS'TImputer_defaults'
p5406
(i__main__
ClassDefinition
p5407
(dp5408
g4
I1
sg5
I01
sg6
g5406
sg7
S'TImputer'
p5409
sg9
I00
sg10
(lp5410
sg12
(lp5411
(S'TExample'
p5412
S'defaults'
p5413
g5413
S'values that are to be inserted instead of missing ones'
p5414
I0
I0
I00
Ntp5415
asg29
(dp5416
sbsS'TRuleEvaluator_mEVC'
p5417
(i__main__
ClassDefinition
p5418
(dp5419
g4
I1
sg5
I01
sg6
g5417
sg7
S'TRuleEvaluator'
p5420
sg9
I00
sg10
(lp5421
sg12
(lp5422
(S'float'
p5423
g1205
g1205
S'Parameter m for m-estimate after EVC correction'
p5424
I0
I0
I01
Ntp5425
a(S'TEVDistGetter'
p5426
S'evDistGetter'
p5427
S'ev_dist_getter'
p5428
S'get EVC distribution for chi correction'
p5429
I0
I0
I00
Ntp5430
a(S'TVariable'
p5431
S'probVar'
p5432
S'prob_var'
p5433
S'probability coverage variable (meta usually)'
p5434
I0
I0
I00
Ntp5435
a(S'TRuleValidator'
p5436
S'validator'
p5437
g5437
S'rule validator for best rule'
p5438
I0
I0
I00
Ntp5439
a(S'int'
p5440
S'min_improved'
p5441
g5441
S'minimal number of improved examples'
p5442
I0
I0
I01
Ntp5443
a(S'float'
p5444
S'min_improved_perc'
p5445
g5445
S'minimal percentage of improved examples'
p5446
I0
I0
I01
Ntp5447
a(S'TRule'
p5448
S'bestRule'
p5449
S'best_rule'
p5450
S'best rule found and evaluated given conditions (min_improved, validator)'
p5451
I0
I0
I00
Ntp5452
a(S'float'
p5453
S'ruleAlpha'
p5454
S'rule_alpha'
p5455
S"minimal 'true' rule significance"
p5456
I0
I0
I01
Ntp5457
a(S'float'
p5458
S'attributeAlpha'
p5459
S'attribute_alpha'
p5460
S'minimal attribute significance'
p5461
I0
I0
I01
Ntp5462
a(S'bool'
p5463
S'returnExpectedProb'
p5464
S'return_expected_prob'
p5465
S'if true, evaluator returns expected class probability, if false, current class probability'
p5466
I0
I0
I01
Ntp5467
a(S'int'
p5468
S'optimismReduction'
p5469
S'optimism_reduction'
p5470
S'to select optimstic (0), pessimistic (1) or EVC (2) evaluation'
p5471
I0
I0
I01
Ntp5472
asg29
(dp5473
sbsS'TContingency'
p5474
(i__main__
ClassDefinition
p5475
(dp5476
g4
I1
sg5
I01
sg6
g5474
sg7
S'TOrange'
p5477
sg9
I00
sg10
(lp5478
sg12
(lp5479
g1670
ag1675
ag1681
ag1686
ag1691
ag1696
asg29
(dp5480
sbsS'TImputer_Python'
p5481
(i__main__
ClassDefinition
p5482
(dp5483
g4
I1
sg5
I01
sg6
g5481
sg7
S'TImputer'
p5484
sg9
I00
sg10
(lp5485
sg12
(lp5486
sg29
(dp5487
sbsS'TClassifierGenerator'
p5488
(i__main__
ClassDefinition
p5489
(dp5490
g4
I1
sg5
I01
sg6
g5488
sg7
S'TExampleGenerator'
p5491
sg9
I00
sg10
(lp5492
sg12
(lp5493
(S'TClassifier'
p5494
S'classify'
p5495
g5495
S'classifier'
p5496
I0
I0
I00
Ntp5497
ag299
ag303
asg29
(dp5498
sbsS'TRuleDataStoppingCriteria_Python'
p5499
(i__main__
ClassDefinition
p5500
(dp5501
g4
I1
sg5
I01
sg6
g5499
sg7
S'TRuleDataStoppingCriteria'
p5502
sg9
I00
sg10
(lp5503
sg12
(lp5504
sg29
(dp5505
sbsS'TTreeDescender_UnknownToCommonSelector'
p5506
(i__main__
ClassDefinition
p5507
(dp5508
g4
I1
sg5
I01
sg6
g5506
sg7
g1585
sg9
I0
sg10
(lp5509
sg12
(lp5510
sg29
(dp5511
sbsS'THierarchicalCluster'
p5512
(i__main__
ClassDefinition
p5513
(dp5514
g4
I1
sg5
I01
sg6
g5512
sg7
S'TOrange'
p5515
sg9
I00
sg10
(lp5516
sg12
(lp5517
(S'THierarchicalClusterList'
p5518
S'branches'
p5519
g5519
S'subclusters'
p5520
I0
I0
I00
Ntp5521
a(S'float'
p5522
S'height'
p5523
g5523
S'height'
p5524
I0
I0
I01
Ntp5525
a(S'TIntList'
p5526
S'mapping'
p5527
g5527
S'indices to the list of all elements in the clustering'
p5528
I0
I0
I00
Ntp5529
a(S'int'
p5530
S'first'
p5531
g5531
S"the index into 'elements' to the first element of the cluster"
p5532
I0
I0
I01
Ntp5533
a(S'int'
p5534
S'last'
p5535
g5535
S"the index into 'elements' to the one after the last element of the cluster"
p5536
I0
I0
I01
Ntp5537
asg29
(dp5538
sbsS'TPreprocessIM'
p5539
(i__main__
ClassDefinition
p5540
(dp5541
g4
I1
sg5
I01
sg6
g5539
sg7
S'TOrange'
p5542
sg9
I01
sg10
(lp5543
sg12
(lp5544
sg29
(dp5545
sbsS'TLongList'
p5546
(ipyprops
ClassDefinition
p5547
(dp5548
g4
I0
sg5
I01
sg6
g5546
sg7
g136
sg9
I0
sg10
(lp5549
sg12
(lp5550
sg29
(dp5551
sbsS'TBasketFeeder'
p5552
(i__main__
ClassDefinition
p5553
(dp5554
g4
I1
sg5
I01
sg6
g5552
sg7
S'TOrange'
p5555
sg9
I00
sg10
(lp5556
sg12
(lp5557
(S'bool'
p5558
S'dontStore'
p5559
S'dont_store'
p5560
S'disables items storing'
p5561
I0
I0
I01
Ntp5562
a(S'bool'
p5563
S'dontCheckStored'
p5564
S'dont_check_stored'
p5565
S'disables items lookup in the global cache'
p5566
I0
I0
I01
Ntp5567
a(S'TDomain'
p5568
S'domain'
p5569
g5569
S'domain where the meta attributes are stored'
p5570
I0
I0
I00
Ntp5571
a(S'TDomain'
p5572
S'sourceDomain'
p5573
S'source_domain'
p5574
S'domain with items that can be reused'
p5575
I0
I0
I00
Ntp5576
asg29
(dp5577
sbsS'TRuleEvaluator_Laplace'
p5578
(i__main__
ClassDefinition
p5579
(dp5580
g4
I1
sg5
I01
sg6
g5578
sg7
S'TRuleEvaluator'
p5581
sg9
I00
sg10
(lp5582
sg12
(lp5583
sg29
(dp5584
sbsS'TColumnAssessor_N'
p5585
(i__main__
ClassDefinition
p5586
(dp5587
g4
I1
sg5
I01
sg6
g5585
sg7
S'TColumnAssessor'
p5588
sg9
I00
sg10
(lp5589
sg12
(lp5590
sg29
(dp5591
sbsS'TSubsetsGenerator_minMaxSize_iterator'
p5592
(i__main__
ClassDefinition
p5593
(dp5594
g4
I1
sg5
I01
sg6
g5592
sg7
S'TSubsetsGenerator_iterator'
p5595
sg9
I00
sg10
(lp5596
sg12
(lp5597
(S'int'
p5598
g2564
g2564
g566
I01
I0
I01
Ntp5599
a(S'int'
p5600
S'max'
p5601
g5601
S'maximal subset size'
p5602
I0
I0
I01
Ntp5603
a(S'bool'
p5604
S'moreToCome'
p5605
S'more_to_come'
p5606
g566
I01
I0
I01
Ntp5607
ag503
asg29
(dp5608
sbsS'TExamplesDistanceConstructor_Lp'
p5609
(i__main__
ClassDefinition
p5610
(dp5611
g4
I1
sg5
I01
sg6
g5609
sg7
S'TExamplesDistanceConstructor_Normalized'
p5612
sg9
I00
sg10
(lp5613
sg12
(lp5614
(S'float'
p5615
g2270
g2270
g2270
I0
I0
I01
Ntp5616
ag2104
ag2109
ag1360
asg29
(dp5617
sbsS'TComputeDomainContingency'
p5618
(i__main__
ClassDefinition
p5619
(dp5620
g4
I1
sg5
I01
sg6
g5618
sg7
S'TOrange'
p5621
sg9
I00
sg10
(lp5622
sg12
(lp5623
g28
asg29
(dp5624
sbsS'TExample'
p5625
(i__main__
ClassDefinition
p5626
(dp5627
g4
I1
sg5
I01
sg6
g5625
sg7
S'TOrange'
p5628
sg9
I00
sg10
(lp5629
sg12
(lp5630
g2670
ag2673
asg29
(dp5631
sbsS'TFixedDiscretization'
p5632
(i__main__
ClassDefinition
p5633
(dp5634
g4
I1
sg5
I01
sg6
g5632
sg7
S'TDiscretization'
p5635
sg9
I00
sg10
(lp5636
sg12
(lp5637
(S'TFloatList'
p5638
S'points'
p5639
g5639
S'cut-off points'
p5640
I0
I0
I00
Ntp5641
asg29
(dp5642
sbsS'TDomainContingency'
p5643
(ipyprops
ClassDefinition
p5644
(dp5645
g4
I0
sg5
I01
sg6
S'TDomainContingency'
p5646
sg7
g136
sg9
I0
sg10
(lp5647
sg12
(lp5648
sg29
(dp5649
sbsS'TPreprocessor_addGaussianClassNoise'
p5650
(i__main__
ClassDefinition
p5651
(dp5652
g4
I1
sg5
I01
sg6
g5650
sg7
S'TPreprocessor'
p5653
sg9
I00
sg10
(lp5654
sg12
(lp5655
(S'float'
p5656
S'deviation'
p5657
g5657
S'class deviation'
p5658
I0
I0
I01
Ntp5659
a(S'TRandomGenerator'
p5660
S'randomGenerator'
p5661
S'random_generator'
p5662
S'random number generator'
p5663
I0
I0
I00
Ntp5664
asg29
(dp5665
sbsS'TRuleDataStoppingCriteria'
p5666
(i__main__
ClassDefinition
p5667
(dp5668
g4
I1
sg5
I01
sg6
g5666
sg7
S'TOrange'
p5669
sg9
I01
sg10
(lp5670
sg12
(lp5671
sg29
(dp5672
sbsS'TPreprocessor_filter'
p5673
(i__main__
ClassDefinition
p5674
(dp5675
g4
I1
sg5
I01
sg6
g5673
sg7
S'TPreprocessor'
p5676
sg9
I00
sg10
(lp5677
sg12
(lp5678
(S'TFilter'
p5679
S'filter'
p5680
g5680
S'filter'
p5681
I0
I0
I00
Ntp5682
asg29
(dp5683
sbsS'TSOMNodeList'
p5684
(ipyprops
ClassDefinition
p5685
(dp5686
g4
I0
sg5
I01
sg6
g5684
sg7
g136
sg9
I0
sg10
(lp5687
sg12
(lp5688
sg29
(dp5689
sbsS'TExampleDistBySorting'
p5690
(i__main__
ClassDefinition
p5691
(dp5692
g4
I1
sg5
I01
sg6
g5690
sg7
S'TExampleDistConstructor'
p5693
sg9
I00
sg10
(lp5694
sg12
(lp5695
sg29
(dp5696
sbsS'TGraphAsMatrix'
p5697
(i__main__
ClassDefinition
p5698
(dp5699
g4
I1
sg5
I01
sg6
g5697
sg7
S'TGraph'
p5700
sg9
I00
sg10
(lp5701
sg12
(lp5702
g1476
ag1481
ag1485
asg29
(dp5703
sbsS'TValueFilter_discrete'
p5704
(i__main__
ClassDefinition
p5705
(dp5706
g4
I1
sg5
I01
sg6
g5704
sg7
S'TValueFilter'
p5707
sg9
I00
sg10
(lp5708
sg12
(lp5709
(S'TValueList'
p5710
S'values'
p5711
g5711
S'accepted values'
p5712
I0
I0
I00
Ntp5713
a(S'bool'
p5714
S'negate'
p5715
g5715
S'negate'
p5716
I0
I0
I01
Ntp5717
ag1054
ag1059
asg29
(dp5718
sbsS'TAssociationRulesInducer'
p5719
(i__main__
ClassDefinition
p5720
(dp5721
g4
I1
sg5
I01
sg6
g5719
sg7
S'TOrange'
p5722
sg9
I00
sg10
(lp5723
sg12
(lp5724
(S'int'
p5725
S'maxItemSets'
p5726
S'max_item_sets'
p5727
S'maximal number of itemsets (increase if you want)'
p5728
I0
I0
I01
Ntp5729
a(S'float'
p5730
S'confidence'
p5731
g5731
S'required confidence'
p5732
I0
I0
I01
Ntp5733
a(S'float'
p5734
S'support'
p5735
g5735
S'required support'
p5736
I0
I0
I01
Ntp5737
a(S'bool'
p5738
S'classificationRules'
p5739
S'classification_rules'
p5740
S'if true, rules will have the class and only the class attribute on the right-hand side'
p5741
I0
I0
I01
Ntp5742
a(S'bool'
p5743
S'storeExamples'
p5744
S'store_examples'
p5745
S'if true, each rule is going to have tables with references to examples which match its left side or both sides'
p5746
I0
I0
I01
Ntp5747
asg29
(dp5748
sbsS'TMakeRandomIndices2'
p5749
(i__main__
ClassDefinition
p5750
(dp5751
g4
I1
sg5
I01
sg6
g5749
sg7
S'TMakeRandomIndices'
p5752
sg9
I00
sg10
(lp5753
sg12
(lp5754
(S'float'
p5755
S'p0'
p5756
g5756
S"a proportion or a number of 0's"
p5757
I0
I0
I01
Ntp5758
ag711
ag715
ag720
asg29
(dp5759
sbsS'TTreeStopCriteria'
p5760
(i__main__
ClassDefinition
p5761
(dp5762
g4
I1
sg5
I01
sg6
g5760
sg7
S'TOrange'
p5763
sg9
I00
sg10
(lp5764
sg12
(lp5765
sg29
(dp5766
sbsS'TPreprocessor_addMissingClasses'
p5767
(i__main__
ClassDefinition
p5768
(dp5769
g4
I1
sg5
I01
sg6
g5767
sg7
S'TPreprocessor'
p5770
sg9
I00
sg10
(lp5771
sg12
(lp5772
(S'float'
p5773
S'proportion'
p5774
g5774
S'proportion of removed class values'
p5775
I0
I0
I01
Ntp5776
a(S'int'
p5777
S'specialType'
p5778
S'special_type'
p5779
S'special value type (1=DC, 2=DK)'
p5780
I0
I0
I01
Ntp5781
a(S'TRandomGenerator'
p5782
S'randomGenerator'
p5783
S'random_generator'
p5784
S'random number generator'
p5785
I0
I0
I00
Ntp5786
asg29
(dp5787
sbsS'TLookupLearner'
p5788
(i__main__
ClassDefinition
p5789
(dp5790
g4
I1
sg5
I01
sg6
g5788
sg7
S'TLearner'
p5791
sg9
I00
sg10
(lp5792
sg12
(lp5793
(S'TLearner'
p5794
S'learnerForUnknown'
p5795
S'learner_for_unknown'
p5796
S'a learner for classifying cases not found in the table'
p5797
I0
I0
I00
Ntp5798
a(S'bool'
p5799
S'allowFastLookups'
p5800
S'allow_fast_lookups'
p5801
S'if true, it constructs LookupClassifiers for <=3 attributes'
p5802
I0
I0
I01
Ntp5803
a(S'int'
p5804
S'unknownsHandling'
p5805
S'unknowns_handling'
p5806
S'0 omit examples with unknowns, 1 distribute them, 2 keep them in table'
p5807
I0
I0
I01
Ntp5808
ag110
asg29
(dp5809
sbsS'TBasketExampleGenerator'
p5810
(i__main__
ClassDefinition
p5811
(dp5812
g4
I1
sg5
I01
sg6
g5810
sg7
S'TFileExampleGenerator'
p5813
sg9
I00
sg10
(lp5814
sg12
(lp5815
g1641
ag1646
ag1651
ag299
ag303
asg29
(dp5816
sbsS'TRuleEvaluator_Entropy'
p5817
(i__main__
ClassDefinition
p5818
(dp5819
g4
I1
sg5
I01
sg6
g5817
sg7
S'TRuleEvaluator'
p5820
sg9
I00
sg10
(lp5821
sg12
(lp5822
sg29
(dp5823
sbsS'TMeasureAttribute_chiSquare'
p5824
(i__main__
ClassDefinition
p5825
(dp5826
g4
I1
sg5
I01
sg6
g5824
sg7
S'TMeasureAttributeFromProbabilities'
p5827
sg9
I00
sg10
(lp5828
sg12
(lp5829
(S'bool'
p5830
S'computeProbabilities'
p5831
S'compute_probabilities'
p5832
g566
I0
I0
I01
Ntp5833
ag903
ag908
ag914
ag919
ag924
ag929
ag934
asg29
(dp5834
sbsS'TDistribution'
p5835
(i__main__
ClassDefinition
p5836
(dp5837
g4
I1
sg5
I01
sg6
g5835
sg7
S'TSomeValue'
p5838
sg9
I01
sg10
(lp5839
sg12
(lp5840
g1125
ag1129
ag1133
ag1137
ag1141
ag1146
ag1151
ag1156
asg29
(dp5841
sbsS'TExamplesDistance_DTW'
p5842
(i__main__
ClassDefinition
p5843
(dp5844
g4
I1
sg5
I01
sg6
g5842
sg7
S'TExamplesDistance_Normalized'
p5845
sg9
I00
sg10
(lp5846
sg12
(lp5847
(S'int'
p5848
S'dtwDistance'
p5849
S'dtw_distance'
p5850
S' distance measure between individual attributes (default: square of difference)'
p5851
I0
I0
I01
S'ExamplesDistance_DTW_DistanceType'
p5852
tp5853
ag447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp5854
S'DistanceType'
p5855
(lp5856
(S'Euclidean'
p5857
I0
tp5858
a(S'Derivative'
p5859
I1
tp5860
assbsS'TTreeExampleSplitter_UnknownsToRandom'
p5861
(i__main__
ClassDefinition
p5862
(dp5863
g4
I1
sg5
I01
sg6
g5861
sg7
S'TTreeExampleSplitter'
p5864
sg9
I00
sg10
(lp5865
sg12
(lp5866
sg29
(dp5867
sbsS'TTreePruner_m'
p5868
(i__main__
ClassDefinition
p5869
(dp5870
g4
I1
sg5
I01
sg6
g5868
sg7
S'TTreePruner'
p5871
sg9
I00
sg10
(lp5872
sg12
(lp5873
(S'float'
p5874
g1205
g1205
S'm for m-estimate'
p5875
I0
I0
I01
Ntp5876
asg29
(dp5877
sbsS'TImputer'
p5878
(i__main__
ClassDefinition
p5879
(dp5880
g4
I1
sg5
I01
sg6
g5878
sg7
S'TOrange'
p5881
sg9
I01
sg10
(lp5882
sg12
(lp5883
sg29
(dp5884
sbsS'TExamplesDistanceConstructor_DTW'
p5885
(i__main__
ClassDefinition
p5886
(dp5887
g4
I1
sg5
I01
sg6
g5885
sg7
S'TExamplesDistanceConstructor_Normalized'
p5888
sg9
I00
sg10
(lp5889
sg12
(lp5890
(S'int'
p5891
S'dtwDistance'
p5892
S'dtw_distance'
p5893
S'distance measure between individual attributes (default: square of difference)'
p5894
I0
I0
I01
Ntp5895
ag2104
ag2109
ag1360
asg29
(dp5896
sbsS'TStopIMClusteringByAssessor_n'
p5897
(i__main__
ClassDefinition
p5898
(dp5899
g4
I1
sg5
I01
sg6
g5897
sg7
S'TStopIMClusteringByAssessor'
p5900
sg9
I00
sg10
(lp5901
sg12
(lp5902
(S'int'
p5903
g1011
g1011
S'number of clusters'
p5904
I0
I0
I01
Ntp5905
asg29
(dp5906
sbsS'TVarListList'
p5907
(ipyprops
ClassDefinition
p5908
(dp5909
g4
I0
sg5
I01
sg6
g5907
sg7
g136
sg9
I0
sg10
(lp5910
sg12
(lp5911
sg29
(dp5912
sbsS'TRandomGenerator'
p5913
(i__main__
ClassDefinition
p5914
(dp5915
g4
I1
sg5
I01
sg6
g5913
sg7
S'TOrange'
p5916
sg9
I00
sg10
(lp5917
sg12
(lp5918
(S'int'
p5919
S'initseed'
p5920
g5920
S'initial random seed'
p5921
I0
I0
I01
Ntp5922
a(S'int'
p5923
S'uses'
p5924
g5924
S'#times a number was returned'
p5925
I0
I0
I01
Ntp5926
asg29
(dp5927
sbsS'TThresholdCA'
p5928
(i__main__
ClassDefinition
p5929
(dp5930
g4
I1
sg5
I01
sg6
g5928
sg7
S'TOrange'
p5931
sg9
I00
sg10
(lp5932
sg12
(lp5933
sg29
(dp5934
sbsS'TFloatListList'
p5935
(ipyprops
ClassDefinition
p5936
(dp5937
g4
I0
sg5
I01
sg6
g5935
sg7
g136
sg9
I0
sg10
(lp5938
sg12
(lp5939
sg29
(dp5940
sbsS'TPreprocessor_imputeByLearner'
p5941
(i__main__
ClassDefinition
p5942
(dp5943
g4
I1
sg5
I01
sg6
g5941
sg7
S'TPreprocessor'
p5944
sg9
I00
sg10
(lp5945
sg12
(lp5946
(S'TLearner'
p5947
S'learner'
p5948
g5948
S'learner used for inducing a model for imputation'
p5949
I0
I0
I00
Ntp5950
asg29
(dp5951
sbsS'TRuleBeamRefiner_Python'
p5952
(i__main__
ClassDefinition
p5953
(dp5954
g4
I1
sg5
I01
sg6
g5952
sg7
S'TRuleBeamRefiner'
p5955
sg9
I00
sg10
(lp5956
sg12
(lp5957
sg29
(dp5958
sbsS'TClassifierFromVarFD'
p5959
(i__main__
ClassDefinition
p5960
(dp5961
g4
I1
sg5
I01
sg6
g5959
sg7
S'TClassifierFD'
p5962
sg9
I00
sg10
(lp5963
sg12
(lp5964
(S'int'
p5965
S'position'
p5966
g5966
S'position of the attribute in domain'
p5967
I0
I0
I01
Ntp5968
a(S'TTransformValue'
p5969
S'transformer'
p5970
g5970
S'transformer'
p5971
I0
I0
I00
Ntp5972
a(S'TDistribution'
p5973
S'distributionForUnknown'
p5974
S'distribution_for_unknown'
p5975
S'distribution for unknown value'
p5976
I0
I0
I00
Ntp5977
a(S'bool'
p5978
S'transformUnknowns'
p5979
S'transform_unknowns'
p5980
S'if false (default is true), unknowns stay unknown or are changed into distribution if given'
p5981
I0
I0
I01
Ntp5982
ag284
ag94
ag99
asg29
(dp5983
sbsS'TSimpleTreeLearner'
p5984
(i__main__
ClassDefinition
p5985
(dp5986
g4
I1
sg5
I01
sg6
g5984
sg7
S'TLearner'
p5987
sg9
I00
sg10
(lp5988
sg12
(lp5989
(S'float'
p5990
S'maxMajority'
p5991
S'max_majority'
p5992
g566
I0
I0
I01
Ntp5993
a(S'int'
p5994
S'minInstances'
p5995
S'min_instances'
p5996
g566
I0
I0
I01
Ntp5997
a(S'int'
p5998
S'maxDepth'
p5999
S'max_depth'
p6000
g566
I0
I0
I01
Ntp6001
a(S'float'
p6002
S'skipProb'
p6003
S'skip_prob'
p6004
g566
I0
I0
I01
Ntp6005
a(S'TRandomGenerator'
p6006
S'randomGenerator'
p6007
S'random_generator'
p6008
g566
I0
I0
I00
Ntp6009
ag110
asg29
(dp6010
sbsS'TImputer_model'
p6011
(i__main__
ClassDefinition
p6012
(dp6013
g4
I1
sg5
I01
sg6
g6011
sg7
S'TImputer'
p6014
sg9
I00
sg10
(lp6015
sg12
(lp6016
(S'TClassifierList'
p6017
S'models'
p6018
g6018
S'classifiers'
p6019
I0
I0
I00
Ntp6020
asg29
(dp6021
sbsS'TLogRegLearner'
p6022
(i__main__
ClassDefinition
p6023
(dp6024
g4
I1
sg5
I01
sg6
g6022
sg7
S'TLearner'
p6025
sg9
I00
sg10
(lp6026
sg12
(lp6027
(S'TLogRegFitter'
p6028
S'fitter'
p6029
g6029
S'fits beta coefficients and calculates beta errors.'
p6030
I0
I0
I00
Ntp6031
a(S'TImputerConstructor'
p6032
S'imputerConstructor'
p6033
S'imputer_constructor'
p6034
S'if present, it constructs an imputer for unknown values'
p6035
I0
I0
I00
Ntp6036
a(S'TDomainContinuizer'
p6037
S'domainContinuizer'
p6038
S'domain_continuizer'
p6039
S'if present, it constructs continuous domain if needed; if absent, default is used'
p6040
I0
I0
I00
Ntp6041
ag110
asg29
(dp6042
sbsS'TPreprocessor_takeMissing'
p6043
(i__main__
ClassDefinition
p6044
(dp6045
g4
I1
sg5
I01
sg6
g6043
sg7
S'TPreprocessor'
p6046
sg9
I00
sg10
(lp6047
sg12
(lp6048
sg29
(dp6049
sbsS'TMeasureAttribute_IM'
p6050
(i__main__
ClassDefinition
p6051
(dp6052
g4
I1
sg5
I01
sg6
g6050
sg7
S'TMeasureAttribute'
p6053
sg9
I00
sg10
(lp6054
sg12
(lp6055
(S'TIMConstructor'
p6056
S'IMconstructor'
p6057
g6057
S'incompatibility matrix constructor'
p6058
I0
I0
I00
Ntp6059
a(S'TColumnAssessor'
p6060
S'columnAssessor'
p6061
S'column_assessor'
p6062
S'column quality assessor'
p6063
I0
I0
I00
Ntp6064
ag919
ag924
ag929
ag934
asg29
(dp6065
sbsS'TFeatureByDistributions'
p6066
(i__main__
ClassDefinition
p6067
(dp6068
g4
I1
sg5
I01
sg6
g6066
sg7
S'TFeatureInducer'
p6069
sg9
I00
sg10
(lp6070
sg12
(lp6071
(S'TClustersFromDistributions'
p6072
S'clustersFromDistributions'
p6073
S'clusters_from_distributions'
p6074
S'clustering algorithm'
p6075
I0
I0
I00
Ntp6076
a(S'int'
p6077
S'completion'
p6078
g6078
S' decides how to determine the class for points not covered by any cluster'
p6079
I0
I0
I01
S'FeatureByDistributions_Completion'
p6080
tp6081
asg29
(dp6082
S'Completion'
p6083
(lp6084
(S'NoCompletion'
p6085
S'completion_no'
p6086
tp6087
a(S'CompletionByDefault'
p6088
S'completion_default'
p6089
tp6090
a(S'CompletionByBayes'
p6091
S'completion_bayes'
p6092
tp6093
assbsS'TCostMatrix'
p6094
(i__main__
ClassDefinition
p6095
(dp6096
g4
I1
sg5
I01
sg6
g6094
sg7
S'TOrange'
p6097
sg9
I00
sg10
(lp6098
sg12
(lp6099
(S'TVariable'
p6100
S'classVar'
p6101
S'class_var'
p6102
S'attribute to which the matrix applies'
p6103
I0
I0
I00
Ntp6104
a(S'int'
p6105
S'dimension'
p6106
g6106
S'dimension (should equal classVar.noOfValues())'
p6107
I01
I0
I01
Ntp6108
asg29
(dp6109
sbsS'TStopIMClusteringByAssessor_noProfit'
p6110
(i__main__
ClassDefinition
p6111
(dp6112
g4
I1
sg5
I01
sg6
g6110
sg7
S'TStopIMClusteringByAssessor'
p6113
sg9
I00
sg10
(lp6114
sg12
(lp6115
(S'float'
p6116
S'minProfitProportion'
p6117
S'min_profit_proportion'
p6118
S'minimal allowable profit proportion'
p6119
I0
I0
I01
Ntp6120
asg29
(dp6121
sbsS'TRemoveUnusedValues'
p6122
(i__main__
ClassDefinition
p6123
(dp6124
g4
I1
sg5
I01
sg6
g6122
sg7
S'TOrange'
p6125
sg9
I00
sg10
(lp6126
sg12
(lp6127
(S'bool'
p6128
S'removeOneValued'
p6129
S'remove_one_valued'
p6130
S'if true (default is false), one valued attributes are also removed'
p6131
I0
I0
I01
Ntp6132
asg29
(dp6133
sbsS'TExamplesDistance_Normalized'
p6134
(i__main__
ClassDefinition
p6135
(dp6136
g4
I1
sg5
I01
sg6
g6134
sg7
S'TExamplesDistance'
p6137
sg9
I01
sg10
(lp6138
sg12
(lp6139
g447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp6140
sbsS'TExamplesDistance_Euclidean'
p6141
(i__main__
ClassDefinition
p6142
(dp6143
g4
I1
sg5
I01
sg6
g6141
sg7
S'TExamplesDistance_Normalized'
p6144
sg9
I00
sg10
(lp6145
sg12
(lp6146
(S'TDomainDistributions'
p6147
S'distributions'
p6148
g6148
S'distributions (of discrete attributes only)'
p6149
I0
I0
I00
Ntp6150
a(S'TAttributedFloatList'
p6151
S'bothSpecialDist'
p6152
S'both_special_dist'
p6153
S'distances between discrete attributes if both values are unknown'
p6154
I0
I0
I00
Ntp6155
ag447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp6156
sbsS'TPreprocessor_take'
p6157
(i__main__
ClassDefinition
p6158
(dp6159
g4
I1
sg5
I01
sg6
g6157
sg7
S'TPreprocessor'
p6160
sg9
I00
sg10
(lp6161
sg12
(lp6162
(S'TVariableFilterMap'
p6163
S'values'
p6164
g6164
S'variable-filter pairs'
p6165
I0
I0
I00
Ntp6166
a(S'bool'
p6167
S'conjunction'
p6168
g6168
S'decides whether to take conjunction or disjunction of values'
p6169
I0
I0
I01
Ntp6170
asg29
(dp6171
sbsS'TIMConstructor'
p6172
(i__main__
ClassDefinition
p6173
(dp6174
g4
I1
sg5
I01
sg6
g6172
sg7
S'TOrange'
p6175
sg9
I01
sg10
(lp6176
sg12
(lp6177
g1242
asg29
(dp6178
sbsS'TRuleFinder_Python'
p6179
(i__main__
ClassDefinition
p6180
(dp6181
g4
I1
sg5
I01
sg6
g6179
sg7
S'TRuleFinder'
p6182
sg9
I00
sg10
(lp6183
sg12
(lp6184
g4041
ag4044
asg29
(dp6185
sbsS'TTabDelimExampleGenerator'
p6186
(i__main__
ClassDefinition
p6187
(dp6188
g4
I1
sg5
I01
sg6
g6186
sg7
S'TFileExampleGenerator'
p6189
sg9
I00
sg10
(lp6190
sg12
(lp6191
(S'TIntList'
p6192
S'attributeTypes'
p6193
S'attribute_types'
p6194
S'types of attributes (-1 normal, 0 skip, <-1 = meta ID)'
p6195
I0
I0
I00
Ntp6196
a(S'int'
p6197
S'classPos'
p6198
S'class_pos'
p6199
S'position of the class attribute'
p6200
I0
I0
I01
Ntp6201
a(S'TIntList'
p6202
S'classPoses'
p6203
S'class_poses'
p6204
S'positions of class attributes if there are multiple; otherwise None'
p6205
I0
I0
I00
Ntp6206
a(S'int'
p6207
S'basketPos'
p6208
S'basket_pos'
p6209
S'position of the (virtual) basket attribute'
p6210
I0
I0
I01
Ntp6211
a(S'int'
p6212
S'headerLines'
p6213
S'header_lines'
p6214
S'number of header lines (3 for .tab, 1 for .txt)'
p6215
I0
I0
I01
Ntp6216
a(S'bool'
p6217
S'csv'
p6218
g6218
S"also allow ',' as a separator"
p6219
I0
I0
I01
Ntp6220
a(S'TBasketFeeder'
p6221
S'basketFeeder'
p6222
S'basket_feeder'
p6223
S'takes care of inserting the meta attributes from the basket if need be'
p6224
I0
I0
I00
Ntp6225
ag1641
ag1646
ag1651
ag299
ag303
asg29
(dp6226
sbsS'TRandomClassifier'
p6227
(i__main__
ClassDefinition
p6228
(dp6229
g4
I1
sg5
I01
sg6
g6227
sg7
S'TClassifier'
p6230
sg9
I00
sg10
(lp6231
sg12
(lp6232
(S'TDistribution'
p6233
S'probabilities'
p6234
g6234
S'probabilities of predictions'
p6235
I0
I0
I00
Ntp6236
ag94
ag99
asg29
(dp6237
sbsS'TkNNLearner'
p6238
(i__main__
ClassDefinition
p6239
(dp6240
g4
I1
sg5
I01
sg6
g6238
sg7
S'TLearner'
p6241
sg9
I00
sg10
(lp6242
sg12
(lp6243
(S'float'
p6244
g1201
g1201
S'number of neighbours (0 for sqrt of #examples)'
p6245
I0
I0
I01
Ntp6246
a(S'bool'
p6247
S'rankWeight'
p6248
S'rank_weight'
p6249
S'enable weighting by ranks'
p6250
I0
I0
I01
Ntp6251
a(S'TExamplesDistanceConstructor'
p6252
S'distanceConstructor'
p6253
S'distance_constructor'
p6254
S'metrics'
p6255
I0
I0
I00
Ntp6256
ag110
asg29
(dp6257
sbsS'TTreeDescender_UnknownToNode'
p6258
(i__main__
ClassDefinition
p6259
(dp6260
g4
I1
sg5
I01
sg6
g6258
sg7
g1585
sg9
I0
sg10
(lp6261
sg12
(lp6262
sg29
(dp6263
sbsS'TIntFloatList'
p6264
(ipyprops
ClassDefinition
p6265
(dp6266
g4
I0
sg5
I01
sg6
g6264
sg7
g136
sg9
I0
sg10
(lp6267
sg12
(lp6268
sg29
(dp6269
sbsS'TDistributionAssessor_mf'
p6270
(i__main__
ClassDefinition
p6271
(dp6272
g4
I1
sg5
I01
sg6
g6270
sg7
S'TDistributionAssessor'
p6273
sg9
I00
sg10
(lp6274
sg12
(lp6275
(S'float'
p6276
g1205
g1205
S'm for m-estimate'
p6277
I0
I0
I01
Ntp6278
asg29
(dp6279
sbsS'TExampleClusters'
p6280
(i__main__
ClassDefinition
p6281
(dp6282
g4
I1
sg5
I01
sg6
g6280
sg7
S'TGeneralExampleClustering'
p6283
sg9
I00
sg10
(lp6284
sg12
(lp6285
(S'TExampleCluster'
p6286
S'root'
p6287
g6287
S'root of cluster hierarchy'
p6288
I0
I0
I00
Ntp6289
a(S'float'
p6290
S'quality'
p6291
g6291
S"'quality' of clustering"
p6292
I0
I0
I01
Ntp6293
asg29
(dp6294
sbsS'TExamplesDistance_Python'
p6295
(i__main__
ClassDefinition
p6296
(dp6297
g4
I1
sg5
I01
sg6
g6295
sg7
S'TExamplesDistance'
p6298
sg9
I00
sg10
(lp6299
sg12
(lp6300
sg29
(dp6301
sbsS'TCostLearner'
p6302
(i__main__
ClassDefinition
p6303
(dp6304
g4
I1
sg5
I01
sg6
g6302
sg7
S'TMajorityLearner'
p6305
sg9
I00
sg10
(lp6306
sg12
(lp6307
(S'TCostMatrix'
p6308
S'cost'
p6309
g6309
S'cost matrix'
p6310
I0
I0
I00
Ntp6311
ag843
ag848
ag110
asg29
(dp6312
sbsS'TEFMDataDescription'
p6313
(i__main__
ClassDefinition
p6314
(dp6315
g4
I1
sg5
I01
sg6
g6313
sg7
S'TOrange'
p6316
sg9
I00
sg10
(lp6317
S'domainDistributions'
p6318
asg12
(lp6319
(S'TDomain'
p6320
S'domain'
p6321
g6321
S'domain'
p6322
I01
I0
I00
Ntp6323
asg29
(dp6324
sbsS'TClassifierFD'
p6325
(i__main__
ClassDefinition
p6326
(dp6327
g4
I1
sg5
I01
sg6
g6325
sg7
S'TClassifier'
p6328
sg9
I00
sg10
(lp6329
sg12
(lp6330
g284
ag94
ag99
asg29
(dp6331
sbsS'TPreprocessor_drop'
p6332
(i__main__
ClassDefinition
p6333
(dp6334
g4
I1
sg5
I01
sg6
g6332
sg7
S'TPreprocessor'
p6335
sg9
I00
sg10
(lp6336
sg12
(lp6337
(S'TVariableFilterMap'
p6338
S'values'
p6339
g6339
S'variable-filter pairs'
p6340
I0
I0
I00
Ntp6341
a(S'bool'
p6342
S'conjunction'
p6343
g6343
S'decides whether to take conjunction or disjunction of values'
p6344
I0
I0
I01
Ntp6345
asg29
(dp6346
sbsS'TTreeDescender_UnknownToCommonBranch'
p6347
(i__main__
ClassDefinition
p6348
(dp6349
g4
I1
sg5
I01
sg6
g6347
sg7
g1585
sg9
I0
sg10
(lp6350
sg12
(lp6351
sg29
(dp6352
sbsS'TPreprocessor_addNoise'
p6353
(i__main__
ClassDefinition
p6354
(dp6355
g4
I1
sg5
I01
sg6
g6353
sg7
S'TPreprocessor'
p6356
sg9
I00
sg10
(lp6357
sg12
(lp6358
(S'TVariableFloatMap'
p6359
S'proportions'
p6360
g6360
S'proportion of changed values for individual attributes'
p6361
I0
I0
I00
Ntp6362
a(S'float'
p6363
S'defaultProportion'
p6364
S'default_proportion'
p6365
S'default proportion of changed values (for attributes not specified above)'
p6366
I0
I0
I01
Ntp6367
a(S'TRandomGenerator'
p6368
S'randomGenerator'
p6369
S'random_generator'
p6370
S'random number generator'
p6371
I0
I0
I00
Ntp6372
asg29
(dp6373
sbsS'TStopIMClusteringByAssessor_binary'
p6374
(i__main__
ClassDefinition
p6375
(dp6376
g4
I1
sg5
I01
sg6
g6374
sg7
S'TStopIMClusteringByAssessor'
p6377
sg9
I00
sg10
(lp6378
sg12
(lp6379
sg29
(dp6380
sbsS'TColumnAssessor_mf'
p6381
(i__main__
ClassDefinition
p6382
(dp6383
g4
I1
sg5
I01
sg6
g6381
sg7
S'TColumnAssessor'
p6384
sg9
I00
sg10
(lp6385
sg12
(lp6386
(S'float'
p6387
g1205
g1205
S'm for m-estimate'
p6388
I0
I0
I01
Ntp6389
asg29
(dp6390
sbsS'TExamplesDistanceConstructor'
p6391
(i__main__
ClassDefinition
p6392
(dp6393
g4
I1
sg5
I01
sg6
g6391
sg7
S'TOrange'
p6394
sg9
I01
sg10
(lp6395
sg12
(lp6396
g1360
asg29
(dp6397
sbsS'TSubsetsGenerator'
p6398
(i__main__
ClassDefinition
p6399
(dp6400
g4
I1
sg5
I01
sg6
g6398
sg7
S'TOrange'
p6401
sg9
I01
sg10
(lp6402
sg12
(lp6403
g200
asg29
(dp6404
sbsS'TPreprocessor_addCensorWeight'
p6405
(i__main__
ClassDefinition
p6406
(dp6407
g4
I1
sg5
I01
sg6
g6405
sg7
S'TPreprocessor'
p6408
sg9
I00
sg10
(lp6409
sg12
(lp6410
(S'TVariable'
p6411
S'outcomeVar'
p6412
S'outcome_var'
p6413
S'outcome variable'
p6414
I0
I0
I00
Ntp6415
a(S'TVariable'
p6416
S'timeVar'
p6417
S'time_var'
p6418
S'time variable'
p6419
I0
I0
I00
Ntp6420
a(S'TValue'
p6421
S'eventValue'
p6422
S'event_value'
p6423
S'event (fail) value'
p6424
I0
I0
I01
Ntp6425
a(S'int'
p6426
S'method'
p6427
g6427
S' weighting method'
p6428
I0
I0
I01
S'Preprocessor_addCensorWeight_Method'
p6429
tp6430
a(S'float'
p6431
S'maxTime'
p6432
S'max_time'
p6433
S'maximal time'
p6434
I0
I0
I01
Ntp6435
a(S'bool'
p6436
S'addComplementary'
p6437
S'add_complementary'
p6438
S'if true (default is false), complementary examples are added for censored examples'
p6439
I0
I0
I01
Ntp6440
asg29
(dp6441
S'Method'
p6442
(lp6443
(S'Linear'
p6444
S'TPreprocessor_addCensorWeight::linear'
p6445
tp6446
a(S'KM'
p6447
S'TPreprocessor_addCensorWeight::km'
p6448
tp6449
a(S'Bayes'
p6450
S'TPreprocessor_addCensorWeight::bayes'
p6451
tp6452
assbsS'TRuleBeamCandidateSelector_Python'
p6453
(i__main__
ClassDefinition
p6454
(dp6455
g4
I1
sg5
I01
sg6
g6453
sg7
S'TRuleBeamCandidateSelector'
p6456
sg9
I00
sg10
(lp6457
sg12
(lp6458
sg29
(dp6459
sbsS'TIntList'
p6460
(ipyprops
ClassDefinition
p6461
(dp6462
g4
I0
sg5
I01
sg6
g6460
sg7
g136
sg9
I0
sg10
(lp6463
sg12
(lp6464
sg29
(dp6465
sbsS'TEntropyDiscretization'
p6466
(i__main__
ClassDefinition
p6467
(dp6468
g4
I1
sg5
I01
sg6
g6466
sg7
S'TDiscretization'
p6469
sg9
I00
sg10
(lp6470
sg12
(lp6471
(S'int'
p6472
S'maxNumberOfIntervals'
p6473
(g6473
g1011
tp6474
S' maximal number of intervals; default = 0 (no limits)'
p6475
I0
I0
I01
Ntp6476
a(S'bool'
p6477
S'forceAttribute'
p6478
(g6478
S'forced'
p6479
tp6480
S' minimal number of intervals; default = 0 (no limits)'
p6481
I0
I0
I01
Ntp6482
asg29
(dp6483
sbsS'TIMBySorting'
p6484
(i__main__
ClassDefinition
p6485
(dp6486
g4
I1
sg5
I01
sg6
g6484
sg7
S'TIMConstructor'
p6487
sg9
I00
sg10
(lp6488
sg12
(lp6489
g1242
asg29
(dp6490
sbsS'TImputerConstructor_asValue'
p6491
(i__main__
ClassDefinition
p6492
(dp6493
g4
I1
sg5
I01
sg6
g6491
sg7
S'TImputerConstructor'
p6494
sg9
I00
sg10
(lp6495
sg12
(lp6496
g157
asg29
(dp6497
sbsS'TGaussianDistribution'
p6498
(i__main__
ClassDefinition
p6499
(dp6500
g4
I1
sg5
I01
sg6
g6498
sg7
S'TDistribution'
p6501
sg9
I00
sg10
(lp6502
sg12
(lp6503
(S'float'
p6504
S'mean'
p6505
g6505
S'mu'
p6506
I0
I0
I01
Ntp6507
a(S'float'
p6508
S'sigma'
p6509
g6509
S'sigma'
p6510
I0
I0
I01
Ntp6511
ag1125
ag1129
ag1133
ag1137
ag1141
ag1146
ag1151
ag1156
asg29
(dp6512
sbsS'TExampleDistVector'
p6513
(i__main__
ClassDefinition
p6514
(dp6515
g4
I1
sg5
I01
sg6
g6513
sg7
S'TOrange'
p6516
sg9
I00
sg10
(lp6517
sg12
(lp6518
sg29
(dp6519
sbsS'TConditionalProbabilityEstimatorList'
p6520
(ipyprops
ClassDefinition
p6521
(dp6522
g4
I0
sg5
I01
sg6
g6520
sg7
g136
sg9
I0
sg10
(lp6523
sg12
(lp6524
sg29
(dp6525
sbsS'TRuleBeamFilter_Width'
p6526
(i__main__
ClassDefinition
p6527
(dp6528
g4
I1
sg5
I01
sg6
g6526
sg7
S'TRuleBeamFilter'
p6529
sg9
I00
sg10
(lp6530
sg12
(lp6531
(S'int'
p6532
S'width'
p6533
g6533
g566
I0
I0
I01
Ntp6534
asg29
(dp6535
sbsS'TProbabilityEstimator'
p6536
(i__main__
ClassDefinition
p6537
(dp6538
g4
I1
sg5
I01
sg6
g6536
sg7
S'TOrange'
p6539
sg9
I01
sg10
(lp6540
sg12
(lp6541
g1508
ag1513
asg29
(dp6542
sbsS'TIMClustering'
p6543
(i__main__
ClassDefinition
p6544
(dp6545
g4
I1
sg5
I01
sg6
g6543
sg7
S'TOrange'
p6546
sg9
I00
sg10
(lp6547
sg12
(lp6548
(S'TIM'
p6549
S'im'
p6550
g6550
S'incompatibilty matrix'
p6551
I0
I0
I00
Ntp6552
a(S'TIntList'
p6553
S'clusters'
p6554
g6554
S'cluster index for each matrix column'
p6555
I0
I0
I00
Ntp6556
a(S'int'
p6557
S'maxCluster'
p6558
S'max_cluster'
p6559
S'the highest cluster index'
p6560
I0
I0
I01
Ntp6561
a(S'float'
p6562
S'quality'
p6563
g6563
S'cluster quality'
p6564
I0
I0
I01
Ntp6565
asg29
(dp6566
sbsS'TRuleStoppingCriteria'
p6567
(i__main__
ClassDefinition
p6568
(dp6569
g4
I1
sg5
I01
sg6
g6567
sg7
S'TOrange'
p6570
sg9
I01
sg10
(lp6571
sg12
(lp6572
sg29
(dp6573
sbsS'TImputerConstructor_model'
p6574
(i__main__
ClassDefinition
p6575
(dp6576
g4
I1
sg5
I01
sg6
g6574
sg7
S'TImputerConstructor'
p6577
sg9
I00
sg10
(lp6578
sg12
(lp6579
(S'TLearner'
p6580
S'learnerDiscrete'
p6581
S'learner_discrete'
p6582
S'learner for discrete attributes'
p6583
I0
I0
I00
Ntp6584
a(S'TLearner'
p6585
S'learnerContinuous'
p6586
S'learner_continuous'
p6587
S'learner for continuous attributes'
p6588
I0
I0
I00
Ntp6589
a(S'bool'
p6590
S'useClass'
p6591
S'use_class'
p6592
S'tells whether to use class value in imputation (default: false)'
p6593
I0
I0
I01
Ntp6594
ag157
asg29
(dp6595
sbsS'TFindNearestConstructor_BruteForce'
p6596
(i__main__
ClassDefinition
p6597
(dp6598
g4
I1
sg5
I01
sg6
g6596
sg7
S'TFindNearestConstructor'
p6599
sg9
I00
sg10
(lp6600
sg12
(lp6601
g1873
ag1878
asg29
(dp6602
sbsS'TImputerConstructor'
p6603
(i__main__
ClassDefinition
p6604
(dp6605
g4
I1
sg5
I01
sg6
g6603
sg7
S'TOrange'
p6606
sg9
I01
sg10
(lp6607
sg12
(lp6608
g157
asg29
(dp6609
sbsS'TPreprocessor'
p6610
(i__main__
ClassDefinition
p6611
(dp6612
g4
I1
sg5
I01
sg6
g6610
sg7
S'TOrange'
p6613
sg9
I01
sg10
(lp6614
sg12
(lp6615
sg29
(dp6616
sbsS'TDiscretizer'
p6617
(i__main__
ClassDefinition
p6618
(dp6619
g4
I1
sg5
I01
sg6
g6617
sg7
S'TTransformValue'
p6620
sg9
I01
sg10
(lp6621
sg12
(lp6622
g817
asg29
(dp6623
sbsS'TIMByRowsPreprocessor'
p6624
(i__main__
ClassDefinition
p6625
(dp6626
g4
I1
sg5
I01
sg6
g6624
sg7
S'TOrange'
p6627
sg9
I01
sg10
(lp6628
sg12
(lp6629
sg29
(dp6630
sbsS'TTreeStopCriteria_common'
p6631
(i__main__
ClassDefinition
p6632
(dp6633
g4
I1
sg5
I01
sg6
g6631
sg7
S'TTreeStopCriteria'
p6634
sg9
I00
sg10
(lp6635
sg12
(lp6636
(S'float'
p6637
S'maxMajority'
p6638
S'max_majority'
p6639
S'a maximal proportion of majority class for division to continue'
p6640
I0
I0
I01
Ntp6641
a(S'float'
p6642
S'minInstances'
p6643
S'min_instances'
p6644
S'a minimal number of examples for division to continue'
p6645
I0
I0
I01
Ntp6646
asg29
(dp6647
sbsS'TTreeStopCriteria_Python'
p6648
(i__main__
ClassDefinition
p6649
(dp6650
g4
I1
sg5
I01
sg6
g6648
sg7
S'TTreeStopCriteria'
p6651
sg9
I00
sg10
(lp6652
sg12
(lp6653
sg29
(dp6654
sbsS'TExamplesDistanceConstructor_Maximal'
p6655
(i__main__
ClassDefinition
p6656
(dp6657
g4
I1
sg5
I01
sg6
g6655
sg7
S'TExamplesDistanceConstructor_Normalized'
p6658
sg9
I00
sg10
(lp6659
sg12
(lp6660
g2104
ag2109
ag1360
asg29
(dp6661
sbsS'TIGByIM'
p6662
(i__main__
ClassDefinition
p6663
(dp6664
g4
I1
sg5
I01
sg6
g6662
sg7
S'TIGConstructor'
p6665
sg9
I00
sg10
(lp6666
sg12
(lp6667
(S'TIMConstructor'
p6668
S'IMconstructor'
p6669
g6669
S'IM constructor'
p6670
I0
I0
I00
Ntp6671
asg29
(dp6672
sbsS'TRuleEvaluator_LRS'
p6673
(i__main__
ClassDefinition
p6674
(dp6675
g4
I1
sg5
I01
sg6
g6673
sg7
S'TRuleEvaluator'
p6676
sg9
I00
sg10
(lp6677
sg12
(lp6678
(S'TRuleList'
p6679
S'rules'
p6680
g6680
g566
I0
I0
I00
Ntp6681
a(S'bool'
p6682
S'storeRules'
p6683
S'store_rules'
p6684
g566
I0
I0
I01
Ntp6685
asg29
(dp6686
sbs.