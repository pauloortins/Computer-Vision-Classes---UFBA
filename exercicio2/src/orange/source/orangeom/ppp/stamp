(dp0
S'TComputeDomainContingency_ImputeWithClassifier'
p1
(i__main__
ClassDefinition
p2
(dp3
S'extended'
p4
I1
sS'imported'
p5
I01
sS'name'
p6
g1
sS'parent'
p7
S'TComputeDomainContingency'
p8
sS'abstract'
p9
I00
sS'components'
p10
(lp11
sS'properties'
p12
(lp13
(S'TLearner'
p14
S'learnerForDiscrete'
p15
S'learner_for_discrete'
p16
S'constructs a classifier for imputation of discrete values'
p17
I0
I0
I00
Ntp18
a(S'TLearner'
p19
S'learnerForContinuous'
p20
S'learner_for_continuous'
p21
S'constructs a classifier for imputation of continuous values'
p22
I0
I0
I00
Ntp23
a(S'bool'
p24
S'classIsOuter'
p25
S'class_is_outer'
p26
S'tells whether the class is the outer variable in contingencies'
p27
I0
I0
I01
Ntp28
asS'constants'
p29
(dp30
sbsS'TRuleDataStoppingCriteria_NoPositives'
p31
(i__main__
ClassDefinition
p32
(dp33
g4
I1
sg5
I01
sg6
g31
sg7
S'TRuleDataStoppingCriteria'
p34
sg9
I00
sg10
(lp35
sg12
(lp36
sg29
(dp37
sbsS'TExampleCluster'
p38
(i__main__
ClassDefinition
p39
(dp40
g4
I1
sg5
I01
sg6
g38
sg7
S'TOrange'
p41
sg9
I00
sg10
(lp42
sg12
(lp43
(S'TExampleCluster'
p44
S'left'
p45
g45
S"'left' cluster"
p46
I0
I0
I00
Ntp47
a(S'TExampleCluster'
p48
S'right'
p49
g49
S"'right' cluster"
p50
I0
I0
I00
Ntp51
a(S'float'
p52
S'distance'
p53
g53
S'distance between the two clusters (not defined for leaves)'
p54
I0
I0
I01
Ntp55
a(S'TExample'
p56
S'centroid'
p57
g57
S"cluster's centroid (always defined for leaves)"
p58
I0
I0
I00
Ntp59
asg29
(dp60
sbsS'TClassifierByLookupTableN'
p61
(i__main__
ClassDefinition
p62
(dp63
g4
I1
sg5
I01
sg6
g61
sg7
S'TClassifierByLookupTable'
p64
sg9
I00
sg10
(lp65
sg12
(lp66
(S'TVarList'
p67
S'variables'
p68
g68
S'attributes'
p69
I01
I0
I00
Ntp70
a(S'TIntList'
p71
S'noOfValues'
p72
S'no_of_values'
p73
S'number of values for each attribute'
p74
I01
I0
I00
Ntp75
a(S'TEFMDataDescription'
p76
S'dataDescription'
p77
S'data_description'
p78
S'data description'
p79
I0
I0
I00
Ntp80
a(S'TValueList'
p81
S'lookupTable'
p82
S'lookup_table'
p83
S'a list of class values, one for each attribute value'
p84
I01
I0
I00
Ntp85
a(S'TDistributionList'
p86
S'distributions'
p87
g87
S'a list of class distributions, one for each attribute value'
p88
I01
I0
I00
Ntp89
a(S'TVariable'
p90
S'classVar'
p91
S'class_var'
p92
S'class variable'
p93
I0
I0
I00
Ntp94
a(S'bool'
p95
S'computesProbabilities'
p96
S'computes_probabilities'
p97
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p98
I0
I0
I01
Ntp99
asg29
(dp100
sbsS'TLearner_Python'
p101
(i__main__
ClassDefinition
p102
(dp103
g4
I1
sg5
I01
sg6
g101
sg7
S'TLearner'
p104
sg9
I00
sg10
(lp105
sg12
(lp106
(S'int'
p107
S'needs'
p108
g108
S'the kind of data that learner needs'
p109
I01
I0
I01
Ntp110
asg29
(dp111
sbsS'TSammonStress'
p112
(i__main__
ClassDefinition
p113
(dp114
g4
I1
sg5
I0
sg6
g112
sg7
S'TStressFunc'
p115
sg9
I00
sg10
(lp116
sg12
(lp117
sg29
(dp118
sbsS'TConditionalProbabilityEstimator_FromDistribution'
p119
(i__main__
ClassDefinition
p120
(dp121
g4
I1
sg5
I01
sg6
g119
sg7
S'TConditionalProbabilityEstimator'
p122
sg9
I00
sg10
(lp123
sg12
(lp124
(S'TContingency'
p125
S'probabilities'
p126
g126
S'Contingency that stores conditional probabilities'
p127
I0
I0
I00
Ntp128
a(S'bool'
p129
S'supportsDiscrete'
p130
S'supports_discrete'
p131
S'can estimate probabilities of discrete attributes'
p132
I01
I0
I01
Ntp133
a(S'bool'
p134
S'supportsContinuous'
p135
S'supports_continuous'
p136
S'can estimate probabilities of continuous attributes'
p137
I01
I0
I01
Ntp138
asg29
(dp139
sbsS'THeatmapList'
p140
(ipyprops
ClassDefinition
p141
(dp142
g4
I0
sg5
I01
sg6
g140
sg7
S'TOrange'
p143
sg9
I0
sg10
(lp144
sg12
(lp145
sg29
(dp146
sbsS'TFeatureInducer'
p147
(i__main__
ClassDefinition
p148
(dp149
g4
I1
sg5
I01
sg6
g147
sg7
S'TOrange'
p150
sg9
I01
sg10
(lp151
sg12
(lp152
sg29
(dp153
sbsS'TImputerConstruct_Python'
p154
(i__main__
ClassDefinition
p155
(dp156
g4
I1
sg5
I01
sg6
g154
sg7
S'TImputerConstructor'
p157
sg9
I00
sg10
(lp158
sg12
(lp159
(S'bool'
p160
S'imputeClass'
p161
S'impute_class'
p162
S'tells whether to impute the class value (default: true)'
p163
I0
I0
I01
Ntp164
asg29
(dp165
sbsS'TExampleGeneratorList'
p166
(ipyprops
ClassDefinition
p167
(dp168
g4
I0
sg5
I01
sg6
g166
sg7
g143
sg9
I0
sg10
(lp169
sg12
(lp170
sg29
(dp171
sbsS'TIMByRowsConstructor'
p172
(i__main__
ClassDefinition
p173
(dp174
g4
I1
sg5
I01
sg6
g172
sg7
S'TOrange'
p175
sg9
I01
sg10
(lp176
sg12
(lp177
sg29
(dp178
sbsS'TSubsetsGenerator_withRestrictions'
p179
(i__main__
ClassDefinition
p180
(dp181
g4
I1
sg5
I01
sg6
g179
sg7
S'TSubsetsGenerator'
p182
sg9
I00
sg10
(lp183
sg12
(lp184
(S'TSubsetsGenerator'
p185
S'subGenerator'
p186
S'sub_generator'
p187
S'subset generator'
p188
I0
I0
I00
Ntp189
a(S'TVarList'
p190
S'required'
p191
g191
S'set of required attributes'
p192
I0
I0
I00
Ntp193
a(S'TVarList'
p194
S'forbidden'
p195
g195
S'set of forbidden attributes'
p196
I0
I0
I00
Ntp197
a(S'TVarListList'
p198
S'forbiddenSubSubsets'
p199
S'forbidden_sub_subsets'
p200
S'set of forbidden subsets (attributes that must not occur together)'
p201
I0
I0
I00
Ntp202
a(S'TVarList'
p203
S'varList'
p204
S'var_list'
p205
S'a set of attributes from which subsets are generated'
p206
I0
I0
I00
Ntp207
asg29
(dp208
sbsS'TEVDistList'
p209
(ipyprops
ClassDefinition
p210
(dp211
g4
I0
sg5
I01
sg6
g209
sg7
g143
sg9
I0
sg10
(lp212
sg12
(lp213
sg29
(dp214
sbsS'TValueFilterList'
p215
(ipyprops
ClassDefinition
p216
(dp217
g4
I0
sg5
I01
sg6
g215
sg7
g143
sg9
I0
sg10
(lp218
sg12
(lp219
sg29
(dp220
sbsS'TRuleBeamFilter_Python'
p221
(i__main__
ClassDefinition
p222
(dp223
g4
I1
sg5
I01
sg6
g221
sg7
S'TRuleBeamFilter'
p224
sg9
I00
sg10
(lp225
sg12
(lp226
sg29
(dp227
sbsS'TTreeExampleSplitter'
p228
(i__main__
ClassDefinition
p229
(dp230
g4
I1
sg5
I01
sg6
g228
sg7
S'TOrange'
p231
sg9
I01
sg10
(lp232
sg12
(lp233
sg29
(dp234
sbsS'TSVMClassifier'
p235
(i__main__
ClassDefinition
p236
(dp237
g4
I1
sg5
I01
sg6
g235
sg7
S'TClassifierFD'
p238
sg9
I00
sg10
(lp239
sg12
(lp240
(S'TIntList'
p241
S'nSV'
p242
S'n_SV'
p243
S'nSV'
p244
I0
I0
I00
Ntp245
a(S'TFloatList'
p246
S'rho'
p247
g247
S'rho'
p248
I0
I0
I00
Ntp249
a(S'TFloatListList'
p250
S'coef'
p251
g251
S'coef'
p252
I0
I0
I00
Ntp253
a(S'TFloatList'
p254
S'probA'
p255
S'prob_a'
p256
S'probA - pairwise probability information'
p257
I0
I0
I00
Ntp258
a(S'TFloatList'
p259
S'probB'
p260
S'prob_b'
p261
S'probB - pairwise probability information'
p262
I0
I0
I00
Ntp263
a(S'TExampleTable'
p264
S'supportVectors'
p265
S'support_vectors'
p266
S'support vectors'
p267
I0
I0
I00
Ntp268
a(S'TExampleTable'
p269
S'examples'
p270
g270
S'examples used to train the classifier'
p271
I0
I0
I00
Ntp272
a(S'TKernelFunc'
p273
S'kernelFunc'
p274
S'kernel_func'
p275
S'custom kernel function'
p276
I0
I0
I00
Ntp277
a(S'int'
p278
S'svm_type'
p279
g279
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p280
I0
I0
I01
S'SVMLearner_SVMType'
p281
tp282
a(S'int'
p283
S'kernel_type'
p284
g284
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p285
I0
I0
I01
S'SVMLearner_Kernel'
p286
tp287
a(S'TDomain'
p288
S'domain'
p289
g289
S'domain'
p290
I0
I0
I00
Ntp291
ag94
ag99
asg29
(dp292
sbsS'TFilteredGenerator'
p293
(i__main__
ClassDefinition
p294
(dp295
g4
I1
sg5
I01
sg6
g293
sg7
S'TAdapterGenerator'
p296
sg9
I00
sg10
(lp297
sg12
(lp298
(S'TFilter'
p299
S'filter'
p300
g300
S'decides which examples are skipped'
p301
I0
I0
I00
Ntp302
a(S'TDomain'
p303
S'domain'
p304
g304
S'domain'
p305
I0
I0
I00
Ntp306
a(S'int'
p307
S'version'
p308
g308
S'unique version identifier'
p309
I01
I0
I01
Ntp310
asg29
(dp311
sbsS'TPythonVariable'
p312
(i__main__
ClassDefinition
p313
(dp314
g4
I1
sg5
I01
sg6
g312
sg7
S'TVariable'
p315
sg9
I00
sg10
(lp316
sg12
(lp317
(S'bool'
p318
S'usePickle'
p319
S'use_pickle'
p320
S'tells whether to use pickle for saving to/loading from files'
p321
I0
I0
I01
Ntp322
a(S'bool'
p323
S'useSomeValue'
p324
S'use_some_value'
p325
S'tells whether the Variable will operate on Value or SomeValue (default)'
p326
I0
I0
I01
Ntp327
a(S'int'
p328
S'varType'
p329
S'var_type'
p330
S' variable type'
p331
I0
I0
I01
S'Variable_Type'
p332
tp333
a(S'bool'
p334
S'ordered'
p335
g335
S'variable values are ordered'
p336
I0
I0
I01
Ntp337
a(S'bool'
p338
S'distributed'
p339
g339
S'variable values are distributions'
p340
I0
I0
I01
Ntp341
a(S'int'
p342
S'defaultMetaId'
p343
S'default_meta_id'
p344
S'default (proposed, suggested...) meta id for this variable'
p345
I0
I0
I01
Ntp346
a(S'TRandomGenerator'
p347
S'randomGenerator'
p348
S'random_generator'
p349
S'random generator for random values (initialized when first needed)'
p350
I0
I0
I00
Ntp351
a(S'TVariable'
p352
S'sourceVariable'
p353
S'source_variable'
p354
S'The attribute that this attribute is computed from (when applicable)'
p355
I0
I0
I00
Ntp356
a(S'TClassifier'
p357
S'getValueFrom'
p358
S'get_value_from'
p359
S'Function to compute the value from values of other variables'
p360
I0
I0
I00
Ntp361
asg29
(dp362
sbsS'TTreeLearner'
p363
(i__main__
ClassDefinition
p364
(dp365
g4
I1
sg5
I01
sg6
g363
sg7
S'TLearner'
p366
sg9
I00
sg10
(lp367
sg12
(lp368
(S'TTreeSplitConstructor'
p369
S'split'
p370
g370
S'split criterion'
p371
I0
I0
I00
Ntp372
a(S'TTreeStopCriteria'
p373
S'stop'
p374
g374
S'stop criterion'
p375
I0
I0
I00
Ntp376
a(S'TComputeDomainContingency'
p377
S'contingencyComputer'
p378
S'contingency_computer'
p379
S'computes contingency matrix'
p380
I0
I0
I00
Ntp381
a(S'TLearner'
p382
S'nodeLearner'
p383
S'node_learner'
p384
S'node learner'
p385
I0
I0
I00
Ntp386
a(S'TTreeExampleSplitter'
p387
S'exampleSplitter'
p388
S'example_splitter'
p389
S'splits examples to branches'
p390
I0
I0
I00
Ntp391
a(S'int'
p392
S'maxDepth'
p393
S'max_depth'
p394
S'maximal tree depth (0 = root only, -1 = no limit)'
p395
I0
I0
I01
Ntp396
a(S'bool'
p397
S'storeExamples'
p398
S'store_examples'
p399
S'if true (default: false), learning examples in nodes are stored'
p400
I0
I0
I01
Ntp401
a(S'bool'
p402
S'storeDistributions'
p403
S'store_distributions'
p404
S'if true (default), class distributions of learning examples in nodes are stored'
p405
I0
I0
I01
Ntp406
a(S'bool'
p407
S'storeContingencies'
p408
S'store_contingencies'
p409
S'if true (default), contingency matrices for examples are stored'
p410
I0
I0
I01
Ntp411
a(S'bool'
p412
S'storeNodeClassifier'
p413
S'store_node_classifier'
p414
S'if true (default), the internal nodes have classifiers; needed for pruning'
p415
I0
I0
I01
Ntp416
a(S'TTreeDescender'
p417
S'descender'
p418
g418
S'descends down the tree'
p419
I0
I0
I00
Ntp420
ag110
asg29
(dp421
sbsS'TPreprocessor_shuffle'
p422
(i__main__
ClassDefinition
p423
(dp424
g4
I1
sg5
I01
sg6
g422
sg7
S'TPreprocessor'
p425
sg9
I00
sg10
(lp426
sg12
(lp427
(S'TVarList'
p428
S'attributes'
p429
g429
S'tells which attributes to shuffle'
p430
I0
I0
I00
Ntp431
a(S'TRandomGenerator'
p432
S'randomGenerator'
p433
S'random_generator'
p434
S'random number generator'
p435
I0
I0
I00
Ntp436
asg29
(dp437
sbsS'TLearner'
p438
(i__main__
ClassDefinition
p439
(dp440
g4
I1
sg5
I01
sg6
g438
sg7
S'TOrange'
p441
sg9
I00
sg10
(lp442
sg12
(lp443
g110
asg29
(dp444
sbsS'TExamplesDistance_Maximal'
p445
(i__main__
ClassDefinition
p446
(dp447
g4
I1
sg5
I01
sg6
g445
sg7
S'TExamplesDistance_Normalized'
p448
sg9
I00
sg10
(lp449
sg12
(lp450
(S'TAttributedFloatList'
p451
S'normalizers'
p452
g452
S'normalizing factors for attributes'
p453
I0
I0
I00
Ntp454
a(S'TAttributedFloatList'
p455
S'bases'
p456
g456
S'lowest values for attributes'
p457
I0
I0
I00
Ntp458
a(S'TAttributedFloatList'
p459
S'averages'
p460
g460
S'average values for continuous attribute values'
p461
I0
I0
I00
Ntp462
a(S'TAttributedFloatList'
p463
S'variances'
p464
g464
S'variations for continuous attribute values'
p465
I0
I0
I00
Ntp466
a(S'int'
p467
S'domainVersion'
p468
S'domain_version'
p469
S'version of domain on which the ranges were computed'
p470
I0
I0
I01
Ntp471
a(S'bool'
p472
S'normalize'
p473
g473
S'tells whether to normalize distances between attributes'
p474
I0
I0
I01
Ntp475
a(S'bool'
p476
S'ignoreUnknowns'
p477
S'ignore_unknowns'
p478
S'if true (default: false) unknown values are ignored in computation'
p479
I0
I0
I01
Ntp480
asg29
(dp481
sbsS'TSubsetsGenerator_withRestrictions_iterator'
p482
(i__main__
ClassDefinition
p483
(dp484
g4
I1
sg5
I01
sg6
g482
sg7
S'TSubsetsGenerator_iterator'
p485
sg9
I00
sg10
(lp486
sg12
(lp487
(S'TSubsetsGenerator_iterator'
p488
S'subGenerator_iterator'
p489
S'sub_generator_iterator'
p490
S'subset generator'
p491
I0
I0
I00
Ntp492
a(S'TVarList'
p493
S'required'
p494
g494
S'set of required attributes'
p495
I0
I0
I00
Ntp496
a(S'TVarList'
p497
S'forbidden'
p498
g498
S'set of forbidden attributes'
p499
I0
I0
I00
Ntp500
a(S'TVarListList'
p501
S'forbiddenSubSubsets'
p502
S'forbidden_sub_subsets'
p503
S'set of forbidden subsets (attributes that must not occur together)'
p504
I0
I0
I00
Ntp505
a(S'TVarList'
p506
S'varList'
p507
S'var_list'
p508
S'a set of attributes from which subsets are generated'
p509
I0
I0
I00
Ntp510
asg29
(dp511
sbsS'TPreprocessor_discretize'
p512
(i__main__
ClassDefinition
p513
(dp514
g4
I1
sg5
I01
sg6
g512
sg7
S'TPreprocessor'
p515
sg9
I00
sg10
(lp516
sg12
(lp517
(S'TVarList'
p518
S'attributes'
p519
g519
S'attributes to be discretized (all, if not defined or empty)'
p520
I0
I0
I00
Ntp521
a(S'bool'
p522
S'discretizeClass'
p523
S'discretize_class'
p524
S'also discretize the class attribute (default: false)'
p525
I0
I0
I01
Ntp526
a(S'TDiscretization'
p527
S'method'
p528
g528
S'discretization method'
p529
I0
I0
I00
Ntp530
asg29
(dp531
sbsS'TRuleClassifier_logit'
p532
(i__main__
ClassDefinition
p533
(dp534
g4
I1
sg5
I01
sg6
g532
sg7
S'TRuleClassifier'
p535
sg9
I00
sg10
(lp536
sg12
(lp537
(S'TDistribution'
p538
S'prior'
p539
g539
S'prior distribution'
p540
I0
I0
I00
Ntp541
a(S'TDomain'
p542
S'domain'
p543
g543
S'Domain'
p544
I0
I0
I00
Ntp545
a(S'TFloatList'
p546
S'ruleBetas'
p547
S'rule_betas'
p548
S'Rule betas'
p549
I0
I0
I00
Ntp550
a(S'float'
p551
S'minSignificance'
p552
S'min_significance'
p553
S'minimum requested significance for betas. '
p554
I0
I0
I01
Ntp555
a(S'float'
p556
S'minBeta'
p557
S'min_beta'
p558
S'minimum beta by rule to be included in the model. '
p559
I0
I0
I01
Ntp560
a(S'bool'
p561
S'setPrefixRules'
p562
S'set_prefix_rules'
p563
S'should we order prefix rules ? '
p564
I0
I0
I01
Ntp565
a(S'bool'
p566
S'optimizeBetasFlag'
p567
S'optimize_betas_flag'
p568
S'should we assign betas to rules ? '
p569
I0
I0
I01
Ntp570
a(S'float'
p571
S'penalty'
p572
g572
S''
p573
I0
I0
I01
Ntp574
a(S'TClassifier'
p575
S'priorClassifier'
p576
S'prior_classifier'
p577
S'prior classifier used if provided'
p578
I0
I0
I00
Ntp579
a(S'TLogitClassifierState'
p580
S'currentState'
p581
S'current_state'
p582
g573
I0
I0
I00
Ntp583
a(S'TFloatList'
p584
S'wsd'
p585
g585
g573
I0
I0
I00
Ntp586
a(S'TFloatList'
p587
S'wavgCov'
p588
S'wavg_cov'
p589
g573
I0
I0
I00
Ntp590
a(S'TFloatList'
p591
S'wSatQ'
p592
S'w_sat_q'
p593
g573
I0
I0
I00
Ntp594
a(S'TFloatList'
p595
S'wsig'
p596
g596
g573
I0
I0
I00
Ntp597
a(S'TRuleList'
p598
S'prefixRules'
p599
S'prefix_rules'
p600
S'rules that trigger before logit sum.'
p601
I0
I0
I00
Ntp602
a(S'TRuleList'
p603
S'rules'
p604
g604
g573
I0
I0
I00
Ntp605
a(S'TExampleTable'
p606
S'examples'
p607
g607
g573
I0
I0
I00
Ntp608
a(S'int'
p609
S'weightID'
p610
S'weight_ID'
p611
g573
I0
I0
I01
Ntp612
ag94
ag99
asg29
(dp613
sbsS'TProgressCallback_Python'
p614
(i__main__
ClassDefinition
p615
(dp616
g4
I1
sg5
I01
sg6
g614
sg7
S'TProgressCallback'
p617
sg9
I00
sg10
(lp618
sg12
(lp619
sg29
(dp620
sbsS'TImputeClassifier'
p621
(i__main__
ClassDefinition
p622
(dp623
g4
I1
sg5
I01
sg6
g621
sg7
S'TClassifier'
p624
sg9
I00
sg10
(lp625
sg12
(lp626
(S'TClassifierFromVar'
p627
S'classifierFromVar'
p628
S'classifier_from_var'
p629
S'ClassifierFromVar that is used to retrieve defined values'
p630
I0
I0
I00
Ntp631
a(S'TClassifier'
p632
S'imputer'
p633
g633
S'classifier that is used to determine the missing values '
p634
I0
I0
I00
Ntp635
ag94
ag99
asg29
(dp636
sbsS'TRuleCovererAndRemover'
p637
(i__main__
ClassDefinition
p638
(dp639
g4
I1
sg5
I01
sg6
g637
sg7
S'TOrange'
p640
sg9
I01
sg10
(lp641
sg12
(lp642
sg29
(dp643
sbsS'TFilterList'
p644
(ipyprops
ClassDefinition
p645
(dp646
g4
I0
sg5
I01
sg6
g644
sg7
g143
sg9
I0
sg10
(lp647
sg12
(lp648
sg29
(dp649
sbsS'TPythonValue'
p650
(i__main__
ClassDefinition
p651
(dp652
g4
I1
sg5
I01
sg6
g650
sg7
S'TSomeValue'
p653
sg9
I00
sg10
(lp654
sg12
(lp655
sg29
(dp656
sbsS'TAssociationRulesSparseInducer'
p657
(i__main__
ClassDefinition
p658
(dp659
g4
I1
sg5
I01
sg6
g657
sg7
S'TOrange'
p660
sg9
I00
sg10
(lp661
sg12
(lp662
(S'int'
p663
S'maxItemSets'
p664
S'max_item_sets'
p665
S'maximal number of itemsets (increase if you want)'
p666
I0
I0
I01
Ntp667
a(S'float'
p668
S'confidence'
p669
g669
S'required confidence'
p670
I0
I0
I01
Ntp671
a(S'float'
p672
S'support'
p673
g673
S'required support'
p674
I0
I0
I01
Ntp675
a(S'bool'
p676
S'storeExamples'
p677
S'store_examples'
p678
S'stores examples corresponding to rules'
p679
I0
I0
I01
Ntp680
asg29
(dp681
sbsS'TFilter_sameExample'
p682
(i__main__
ClassDefinition
p683
(dp684
g4
I1
sg5
I01
sg6
g682
sg7
S'TFilter'
p685
sg9
I00
sg10
(lp686
sg12
(lp687
(S'TExample'
p688
S'example'
p689
g689
S'example with which examples are compared'
p690
I0
I0
I00
Ntp691
a(S'bool'
p692
S'negate'
p693
g693
S'if true, filter output should be negated.'
p694
I0
I0
I01
Ntp695
a(S'TDomain'
p696
S'domain'
p697
g697
S'domain to which the examples are converted (if needed)'
p698
I0
I0
I00
Ntp699
asg29
(dp700
sbsS'TRuleClassifierConstructor'
p701
(i__main__
ClassDefinition
p702
(dp703
g4
I1
sg5
I01
sg6
g701
sg7
S'TOrange'
p704
sg9
I01
sg10
(lp705
sg12
(lp706
sg29
(dp707
sbsS'TMakeRandomIndicesMultiple'
p708
(i__main__
ClassDefinition
p709
(dp710
g4
I1
sg5
I01
sg6
g708
sg7
S'TMakeRandomIndices'
p711
sg9
I00
sg10
(lp712
sg12
(lp713
(S'int'
p714
S'stratified'
p715
g715
S' requests stratified distributions'
p716
I0
I0
I01
S'MakeRandomIndices_Stratification'
p717
tp718
a(S'int'
p719
S'randseed'
p720
g720
S'a seed for random generator'
p721
I0
I0
I01
Ntp722
a(S'TRandomGenerator'
p723
S'randomGenerator'
p724
S'random_generator'
p725
S'a random generator'
p726
I0
I0
I00
Ntp727
asg29
(dp728
sbsS'TLearnerFD'
p729
(i__main__
ClassDefinition
p730
(dp731
g4
I1
sg5
I01
sg6
g729
sg7
S'TLearner'
p732
sg9
I00
sg10
(lp733
sg12
(lp734
(S'TDomain'
p735
S'domain'
p736
g736
S'domain'
p737
I0
I0
I00
Ntp738
ag110
asg29
(dp739
sbsS'TP2NN'
p740
(i__main__
ClassDefinition
p741
(dp742
g4
I1
sg5
I01
sg6
g740
sg7
S'TPNN'
p743
sg9
I00
sg10
(lp744
sg12
(lp745
(S'int'
p746
S'dimensions'
p747
g747
S'the number of dimensions'
p748
I01
I0
I01
Ntp749
a(S'TFloatList'
p750
S'offsets'
p751
g751
S'offsets to subtract from the attribute values'
p752
I0
I0
I00
Ntp753
a(S'TFloatList'
p754
S'normalizers'
p755
g755
S'number to divide the values by'
p756
I0
I0
I00
Ntp757
a(S'TFloatList'
p758
S'averages'
p759
g759
S'numbers to use instead of the missing'
p760
I0
I0
I00
Ntp761
a(S'bool'
p762
S'normalizeExamples'
p763
S'normalize_examples'
p764
S'if true, attribute values are divided to sum up to 1'
p765
I0
I0
I01
Ntp766
a(S'int'
p767
S'nExamples'
p768
S'n_examples'
p769
S'the number of examples'
p770
I01
I0
I01
Ntp771
a(S'int'
p772
S'law'
p773
g773
S'law'
p774
I0
I0
I01
Ntp775
ag291
ag94
ag99
asg29
(dp776
sbsS'TTreeSplitConstructor'
p777
(i__main__
ClassDefinition
p778
(dp779
g4
I1
sg5
I01
sg6
g777
sg7
S'TOrange'
p780
sg9
I01
sg10
(lp781
sg12
(lp782
(S'float'
p783
S'minSubset'
p784
S'min_subset'
p785
S'minimal number of examples in a subset'
p786
I0
I0
I01
Ntp787
asg29
(dp788
sbsS'TMultiClassifier'
p789
(i__main__
ClassDefinition
p790
(dp791
g4
I1
sg5
I01
sg6
g789
sg7
S'TOrange'
p792
sg9
I00
sg10
(lp793
sg12
(lp794
(S'TVarList'
p795
S'classVars'
p796
S'class_vars'
p797
S'class variables'
p798
I0
I0
I00
Ntp799
a(S'TDomain'
p800
S'domain'
p801
g801
S'domain'
p802
I0
I0
I00
Ntp803
a(S'bool'
p804
S'computesProbabilities'
p805
S'computes_probabilities'
p806
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p807
I0
I0
I01
Ntp808
asg29
(dp809
sbsS'TMapIntValue'
p810
(i__main__
ClassDefinition
p811
(dp812
g4
I1
sg5
I01
sg6
g810
sg7
S'TTransformValue'
p813
sg9
I00
sg10
(lp814
sg12
(lp815
(S'TIntList'
p816
S'mapping'
p817
g817
S'a lookup table'
p818
I0
I0
I00
Ntp819
a(S'TTransformValue'
p820
S'subTransform'
p821
S'sub_transform'
p822
S'transformation executed prior to this'
p823
I0
I0
I00
Ntp824
asg29
(dp825
sbsS'TDistributionAssessor_Kramer'
p826
(i__main__
ClassDefinition
p827
(dp828
g4
I1
sg5
I01
sg6
g826
sg7
S'TDistributionAssessor'
p829
sg9
I00
sg10
(lp830
sg12
(lp831
sg29
(dp832
sbsS'TTreeExampleSplitter_UnknownsToBranch'
p833
(i__main__
ClassDefinition
p834
(dp835
g4
I1
sg5
I01
sg6
g833
sg7
S'TTreeExampleSplitter'
p836
sg9
I00
sg10
(lp837
sg12
(lp838
sg29
(dp839
sbsS'TMajorityLearner'
p840
(i__main__
ClassDefinition
p841
(dp842
g4
I1
sg5
I01
sg6
g840
sg7
S'TLearner'
p843
sg9
I00
sg10
(lp844
sg12
(lp845
(S'TProbabilityEstimatorConstructor'
p846
S'estimatorConstructor'
p847
S'estimator_constructor'
p848
S'constructs probability estimator'
p849
I0
I0
I00
Ntp850
a(S'TDistribution'
p851
S'aprioriDistribution'
p852
S'apriori_distribution'
p853
S'apriori class distribution'
p854
I0
I0
I00
Ntp855
ag110
asg29
(dp856
sbsS'TEVDistGetter_Standard'
p857
(i__main__
ClassDefinition
p858
(dp859
g4
I1
sg5
I01
sg6
g857
sg7
S'TEVDistGetter'
p860
sg9
I00
sg10
(lp861
sg12
(lp862
(S'TEVDistList'
p863
S'dists'
p864
g864
S'EVC distribution (sorted by rule length, 0 = for rules without conditions)'
p865
I0
I0
I00
Ntp866
asg29
(dp867
sbsS'TFeatureByIM'
p868
(i__main__
ClassDefinition
p869
(dp870
g4
I1
sg5
I01
sg6
g868
sg7
S'TFeatureInducer'
p871
sg9
I00
sg10
(lp872
sg12
(lp873
(S'TIMConstructor'
p874
S'IMconstructor'
p875
g875
S'incompatibility matrix constructor'
p876
I0
I0
I00
Ntp877
a(S'TClustersFromIM'
p878
S'clustersFromIM'
p879
S'clusters_from_IM'
p880
S'clustering algorithm'
p881
I0
I0
I00
Ntp882
a(S'int'
p883
S'completion'
p884
g884
S' decides how to determine the class for points not covered by any cluster'
p885
I0
I0
I01
S'FeatureByIM_Completion'
p886
tp887
asg29
(dp888
S'Completion'
p889
(lp890
(S'NoCompletion'
p891
S'completion_no'
p892
tp893
a(S'CompletionByDefault'
p894
S'completion_default'
p895
tp896
a(S'CompletionByBayes'
p897
S'completion_bayes'
p898
tp899
assbsS'TMeasureAttributeFromProbabilities'
p900
(i__main__
ClassDefinition
p901
(dp902
g4
I1
sg5
I01
sg6
g900
sg7
S'TMeasureAttribute'
p903
sg9
I01
sg10
(lp904
sg12
(lp905
(S'TProbabilityEstimatorConstructor'
p906
S'estimatorConstructor'
p907
S'estimator_constructor'
p908
S'probability estimator (none by default)'
p909
I0
I0
I00
Ntp910
a(S'TConditionalProbabilityEstimatorConstructor'
p911
S'conditionalEstimatorConstructor'
p912
S'conditional_estimator_constructor'
p913
S'conditional probability estimator (none by default)'
p914
I0
I0
I00
Ntp915
a(S'int'
p916
S'unknownsTreatment'
p917
S'unknowns_treatment'
p918
S' treatment of unknown values'
p919
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p920
tp921
a(S'int'
p922
S'needs'
p923
g923
S' describes what kind of data is needed for computation'
p924
I0
I0
I01
S'MeasureAttribute_Needs'
p925
tp926
a(S'bool'
p927
S'handlesDiscrete'
p928
S'handles_discrete'
p929
S'tells whether the measure can handle discrete attributes'
p930
I0
I0
I01
Ntp931
a(S'bool'
p932
S'handlesContinuous'
p933
S'handles_continuous'
p934
S'tells whether the measure can handle continuous attributes'
p935
I0
I0
I01
Ntp936
a(S'bool'
p937
S'computesThresholds'
p938
S'computes_thresholds'
p939
S'tells whether the measure can compute threshold functions/maxima for continuous attributes'
p940
I0
I0
I01
Ntp941
asg29
(dp942
sbsS'TProbabilityEstimatorConstructor_relative'
p943
(i__main__
ClassDefinition
p944
(dp945
g4
I1
sg5
I01
sg6
g943
sg7
S'TProbabilityEstimatorConstructor'
p946
sg9
I00
sg10
(lp947
sg12
(lp948
sg29
(dp949
sbsS'TClassifierByLookupTable3'
p950
(i__main__
ClassDefinition
p951
(dp952
g4
I1
sg5
I01
sg6
g950
sg7
S'TClassifierByLookupTable'
p953
sg9
I00
sg10
(lp954
sg12
(lp955
(S'TVariable'
p956
S'variable1'
p957
g957
S'the first attribute used for classification'
p958
I01
I0
I00
Ntp959
a(S'TVariable'
p960
S'variable2'
p961
g961
S'the second attribute used for classification'
p962
I01
I0
I00
Ntp963
a(S'TVariable'
p964
S'variable3'
p965
g965
S'the third attribute used for classification'
p966
I01
I0
I00
Ntp967
a(S'int'
p968
S'noOfValues1'
p969
S'no_of_values1'
p970
S'number of values of the first attribute'
p971
I01
I0
I01
Ntp972
a(S'int'
p973
S'noOfValues2'
p974
S'no_of_values2'
p975
S'number of values of the second attribute'
p976
I01
I0
I01
Ntp977
a(S'int'
p978
S'noOfValues3'
p979
S'no_of_values3'
p980
S'number of values of the third attribute'
p981
I01
I0
I01
Ntp982
a(S'TEFMDataDescription'
p983
S'dataDescription'
p984
S'data_description'
p985
S'data description'
p986
I0
I0
I00
Ntp987
ag85
ag89
ag94
ag99
asg29
(dp988
sbsS'TImputerConstructor_maximal'
p989
(i__main__
ClassDefinition
p990
(dp991
g4
I1
sg5
I01
sg6
g989
sg7
S'TImputerConstructor'
p992
sg9
I00
sg10
(lp993
sg12
(lp994
g164
asg29
(dp995
sbsS'TRuleBeamRefiner'
p996
(i__main__
ClassDefinition
p997
(dp998
g4
I1
sg5
I01
sg6
g996
sg7
S'TOrange'
p999
sg9
I01
sg10
(lp1000
sg12
(lp1001
sg29
(dp1002
sbsS'TSubsetsGenerator_iterator'
p1003
(i__main__
ClassDefinition
p1004
(dp1005
g4
I1
sg5
I01
sg6
g1003
sg7
S'TOrange'
p1006
sg9
I01
sg10
(lp1007
sg12
(lp1008
g510
asg29
(dp1009
sbsS'TEquiDistDiscretizer'
p1010
(i__main__
ClassDefinition
p1011
(dp1012
g4
I1
sg5
I01
sg6
g1010
sg7
S'TDiscretizer'
p1013
sg9
I00
sg10
(lp1014
sg12
(lp1015
(S'int'
p1016
S'numberOfIntervals'
p1017
(g1017
S'n'
p1018
tp1019
S' number of intervals'
p1020
I0
I0
I01
Ntp1021
a(S'float'
p1022
S'firstCut'
p1023
S'first_cut'
p1024
S'the first cut-off point'
p1025
I0
I0
I01
Ntp1026
a(S'float'
p1027
S'step'
p1028
g1028
S'step (width of interval)'
p1029
I0
I0
I01
Ntp1030
ag824
asg29
(dp1031
sbsS'TValueFilter_string'
p1032
(i__main__
ClassDefinition
p1033
(dp1034
g4
I1
sg5
I01
sg6
g1032
sg7
S'TValueFilter'
p1035
sg9
I00
sg10
(lp1036
sg12
(lp1037
(S'string'
p1038
S'min'
p1039
(g1039
S'ref'
p1040
tp1041
S' reference value (lower bound for interval operators)'
p1042
I0
I0
I01
Ntp1043
a(S'string'
p1044
S'max'
p1045
g1045
S'upper bound for interval operators'
p1046
I0
I0
I01
Ntp1047
a(S'int'
p1048
S'oper'
p1049
g1049
S' operator'
p1050
I0
I0
I01
S'ValueFilter_Operator'
p1051
tp1052
a(S'bool'
p1053
S'caseSensitive'
p1054
S'case_sensitive'
p1055
S'if true (default), the operator is case sensitive'
p1056
I0
I0
I01
Ntp1057
a(S'int'
p1058
S'position'
p1059
g1059
S"attribute's position in domain"
p1060
I0
I0
I01
Ntp1061
a(S'int'
p1062
S'acceptSpecial'
p1063
S'accept_special'
p1064
S'tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)'
p1065
I0
I0
I01
Ntp1066
asg29
(dp1067
sbsS'TFindNearest_BruteForce'
p1068
(i__main__
ClassDefinition
p1069
(dp1070
g4
I1
sg5
I01
sg6
g1068
sg7
S'TFindNearest'
p1071
sg9
I00
sg10
(lp1072
sg12
(lp1073
(S'TExamplesDistance'
p1074
S'distance'
p1075
g1075
S'metrics'
p1076
I0
I0
I00
Ntp1077
a(S'TExampleGenerator'
p1078
S'examples'
p1079
g1079
S'a list of stored examples'
p1080
I0
I0
I00
Ntp1081
a(S'int'
p1082
S'weightID'
p1083
S'weight_ID'
p1084
S'weight to use when counting examples'
p1085
I0
I0
I01
Ntp1086
a(S'int'
p1087
S'distanceID'
p1088
S'distance_ID'
p1089
S'id of meta attribute where the distance should be stored (0 = no storing)'
p1090
I0
I0
I01
Ntp1091
a(S'bool'
p1092
S'includeSame'
p1093
S'include_same'
p1094
S'tells whether to include examples that are same as the reference example'
p1095
I0
I0
I01
Ntp1096
asg29
(dp1097
sbsS'TRuleBeamInitializer'
p1098
(i__main__
ClassDefinition
p1099
(dp1100
g4
I1
sg5
I01
sg6
g1098
sg7
S'TOrange'
p1101
sg9
I01
sg10
(lp1102
sg12
(lp1103
sg29
(dp1104
sbsS'TMeasureAttribute_relevance'
p1105
(i__main__
ClassDefinition
p1106
(dp1107
g4
I1
sg5
I01
sg6
g1105
sg7
S'TMeasureAttributeFromProbabilities'
p1108
sg9
I00
sg10
(lp1109
sg12
(lp1110
g910
ag915
ag921
ag926
ag931
ag936
ag941
asg29
(dp1111
sbsS'TFilter_hasSpecial'
p1112
(i__main__
ClassDefinition
p1113
(dp1114
g4
I1
sg5
I01
sg6
g1112
sg7
S'TFilter'
p1115
sg9
I00
sg10
(lp1116
sg12
(lp1117
g695
ag699
asg29
(dp1118
sbsS'TDiscDistribution'
p1119
(i__main__
ClassDefinition
p1120
(dp1121
g4
I1
sg5
I01
sg6
g1119
sg7
S'TDistribution'
p1122
sg9
I00
sg10
(lp1123
sg12
(lp1124
(S'TFloatList'
p1125
S'variances'
p1126
g1126
S'variances'
p1127
I0
I0
I00
Ntp1128
a(S'TVariable'
p1129
S'variable'
p1130
g1130
S'attribute descriptor (optional)'
p1131
I0
I0
I00
Ntp1132
a(S'float'
p1133
S'unknowns'
p1134
g1134
S'number of unknown values'
p1135
I0
I0
I01
Ntp1136
a(S'float'
p1137
S'abs'
p1138
g1138
S'sum of frequencies (not including unknown values!)'
p1139
I0
I0
I01
Ntp1140
a(S'float'
p1141
S'cases'
p1142
g1142
S"number of cases; as abs, but doesn't change at *= and normalize()"
p1143
I0
I0
I01
Ntp1144
a(S'bool'
p1145
S'normalized'
p1146
g1146
S'distribution is normalized'
p1147
I0
I0
I01
Ntp1148
a(S'bool'
p1149
S'supportsDiscrete'
p1150
S'supports_discrete'
p1151
S'distribution supports discrete interface'
p1152
I01
I0
I01
Ntp1153
a(S'bool'
p1154
S'supportsContinuous'
p1155
S'supports_continuous'
p1156
S'distribution supports continuous interface'
p1157
I01
I0
I01
Ntp1158
a(S'TRandomGenerator'
p1159
S'randomGenerator'
p1160
S'random_generator'
p1161
S'random generator; initialized when needed, if not given earlier'
p1162
I0
I0
I00
Ntp1163
asg29
(dp1164
sbsS'TBayesLearner'
p1165
(i__main__
ClassDefinition
p1166
(dp1167
g4
I1
sg5
I01
sg6
g1165
sg7
S'TLearner'
p1168
sg9
I00
sg10
(lp1169
sg12
(lp1170
(S'TProbabilityEstimatorConstructor'
p1171
S'estimatorConstructor'
p1172
S'estimator_constructor'
p1173
S'constructs a probability estimator for P(C)'
p1174
I0
I0
I00
Ntp1175
a(S'TConditionalProbabilityEstimatorConstructor'
p1176
S'conditionalEstimatorConstructor'
p1177
S'conditional_estimator_constructor'
p1178
S'constructs a probability estimator for P(C|A) '
p1179
I0
I0
I00
Ntp1180
a(S'TConditionalProbabilityEstimatorConstructor'
p1181
S'conditionalEstimatorConstructorContinuous'
p1182
S'conditional_estimator_constructor_continuous'
p1183
S'constructs a probability estimator for P(C|A) for continuous attributes'
p1184
I0
I0
I00
Ntp1185
a(S'bool'
p1186
S'normalizePredictions'
p1187
S'normalize_predictions'
p1188
S'instructs learner to construct a classifier that normalizes probabilities'
p1189
I0
I0
I01
Ntp1190
a(S'bool'
p1191
S'adjustThreshold'
p1192
S'adjust_threshold'
p1193
S'adjust probability thresholds (for binary classes only)'
p1194
I0
I0
I01
Ntp1195
ag110
asg29
(dp1196
sbsS'TIMByRelief'
p1197
(i__main__
ClassDefinition
p1198
(dp1199
g4
I1
sg5
I01
sg6
g1197
sg7
S'TIMConstructor'
p1200
sg9
I00
sg10
(lp1201
sg12
(lp1202
(S'TExamplesDistance_Relief'
p1203
S'distance'
p1204
g1204
S'distance measure'
p1205
I0
I0
I00
Ntp1206
a(S'float'
p1207
S'k'
p1208
g1208
S'number of neighbours'
p1209
I0
I0
I01
Ntp1210
a(S'float'
p1211
S'm'
p1212
g1212
S'number of reference examples'
p1213
I0
I0
I01
Ntp1214
a(S'float'
p1215
S'kFromColumns'
p1216
S'k_from_columns'
p1217
S'if positive, number of neighbours is #columns*kFromColumns'
p1218
I0
I0
I01
Ntp1219
a(S'bool'
p1220
S'ignoreSameExample'
p1221
S'ignore_same_example'
p1222
S'does not put reference example into M'
p1223
I0
I0
I01
Ntp1224
a(S'bool'
p1225
S'convertToBinary'
p1226
S'convert_to_binary'
p1227
S'convert to binary class (hit-miss)'
p1228
I0
I0
I01
Ntp1229
a(S'bool'
p1230
S'correctClassFirst'
p1231
S'correct_class_first'
p1232
S'puts the correct class proportion to the first place'
p1233
I0
I0
I01
Ntp1234
a(S'bool'
p1235
S'allExamples'
p1236
S'all_examples'
p1237
S'uses all examples for reference examples'
p1238
I0
I0
I01
Ntp1239
a(S'bool'
p1240
S'allSameNeighbours'
p1241
S'all_same_neighbours'
p1242
S'uses all the examples same to the reference as neighbours'
p1243
I0
I0
I01
Ntp1244
a(S'bool'
p1245
S'recordRowExamples'
p1246
S'record_row_examples'
p1247
S'enables creation of rowExample list'
p1248
I0
I0
I01
Ntp1249
asg29
(dp1250
sbsS'TConditionalProbabilityEstimator'
p1251
(i__main__
ClassDefinition
p1252
(dp1253
g4
I1
sg5
I01
sg6
g1251
sg7
S'TOrange'
p1254
sg9
I01
sg10
(lp1255
sg12
(lp1256
g133
ag138
asg29
(dp1257
sbsS'TColumnAssessor_Laplace'
p1258
(i__main__
ClassDefinition
p1259
(dp1260
g4
I1
sg5
I01
sg6
g1258
sg7
S'TColumnAssessor'
p1261
sg9
I00
sg10
(lp1262
sg12
(lp1263
sg29
(dp1264
sbsS'TPreprocessor_addGaussianNoise'
p1265
(i__main__
ClassDefinition
p1266
(dp1267
g4
I1
sg5
I01
sg6
g1265
sg7
S'TPreprocessor'
p1268
sg9
I00
sg10
(lp1269
sg12
(lp1270
(S'TVariableFloatMap'
p1271
S'deviations'
p1272
g1272
S'deviations individual attribute values'
p1273
I0
I0
I00
Ntp1274
a(S'float'
p1275
S'defaultDeviation'
p1276
S'default_deviation'
p1277
S'default deviation'
p1278
I0
I0
I01
Ntp1279
a(S'TRandomGenerator'
p1280
S'randomGenerator'
p1281
S'random_generator'
p1282
S'random number generator'
p1283
I0
I0
I00
Ntp1284
asg29
(dp1285
sbsS'TRuleStoppingCriteria_NegativeDistribution'
p1286
(i__main__
ClassDefinition
p1287
(dp1288
g4
I1
sg5
I01
sg6
g1286
sg7
S'TRuleStoppingCriteria'
p1289
sg9
I00
sg10
(lp1290
sg12
(lp1291
sg29
(dp1292
sbsS'TTreeSplitConstructor_ExhaustiveBinary'
p1293
(i__main__
ClassDefinition
p1294
(dp1295
g4
I1
sg5
I01
sg6
g1293
sg7
S'TTreeSplitConstructor_Measure'
p1296
sg9
I00
sg10
(lp1297
sg12
(lp1298
(S'TMeasureAttribute'
p1299
S'measure'
p1300
g1300
S'attribute quality measure'
p1301
I0
I0
I00
Ntp1302
a(S'float'
p1303
S'worstAcceptable'
p1304
S'worst_acceptable'
p1305
S'the worst acceptable quality of the attribute'
p1306
I0
I0
I01
Ntp1307
ag787
asg29
(dp1308
sbsS'TTreeClassifier'
p1309
(i__main__
ClassDefinition
p1310
(dp1311
g4
I1
sg5
I01
sg6
g1309
sg7
S'TClassifierFD'
p1312
sg9
I00
sg10
(lp1313
sg12
(lp1314
(S'TTreeNode'
p1315
S'tree'
p1316
g1316
S'decision tree'
p1317
I0
I0
I00
Ntp1318
a(S'TTreeDescender'
p1319
S'descender'
p1320
g1320
S'object that descends down the tree'
p1321
I0
I0
I00
Ntp1322
ag291
ag94
ag99
asg29
(dp1323
sbsS'TFilter_compatibleExample'
p1324
(i__main__
ClassDefinition
p1325
(dp1326
g4
I1
sg5
I01
sg6
g1324
sg7
S'TFilter'
p1327
sg9
I00
sg10
(lp1328
sg12
(lp1329
(S'TExample'
p1330
S'example'
p1331
g1331
S'example with which examples are compared'
p1332
I0
I0
I00
Ntp1333
ag695
ag699
asg29
(dp1334
sbsS'TRemoveRedundant'
p1335
(i__main__
ClassDefinition
p1336
(dp1337
g4
I1
sg5
I01
sg6
g1335
sg7
S'TOrange'
p1338
sg9
I01
sg10
(lp1339
sg12
(lp1340
(S'bool'
p1341
S'keepValues'
p1342
S'keep_values'
p1343
S'keep an attribute if number values is only smaller, not one'
p1344
I0
I0
I01
Ntp1345
asg29
(dp1346
sbsS'TExamplesDistanceConstructor_Hamming'
p1347
(i__main__
ClassDefinition
p1348
(dp1349
g4
I1
sg5
I01
sg6
g1347
sg7
S'TExamplesDistanceConstructor'
p1350
sg9
I00
sg10
(lp1351
sg12
(lp1352
(S'bool'
p1353
S'ignoreClass'
p1354
S'ignore_class'
p1355
S'if true (default), class value is ignored when computing distances'
p1356
I0
I0
I01
Ntp1357
a(S'bool'
p1358
S'ignoreUnknowns'
p1359
S'ignore_unknowns'
p1360
S'if true (default: false) unknown values are ignored in computation'
p1361
I0
I0
I01
Ntp1362
a(S'bool'
p1363
S'ignoreClass'
p1364
S'ignore_class'
p1365
S'if true (default), class value is ignored when computing distances'
p1366
I0
I0
I01
Ntp1367
asg29
(dp1368
sbsS'TSomeValue'
p1369
(i__main__
ClassDefinition
p1370
(dp1371
g4
I1
sg5
I01
sg6
g1369
sg7
S'TOrange'
p1372
sg9
I01
sg10
(lp1373
sg12
(lp1374
sg29
(dp1375
sbsS'TRuleClassifierConstructor_firstRule'
p1376
(i__main__
ClassDefinition
p1377
(dp1378
g4
I1
sg5
I01
sg6
g1376
sg7
S'TRuleClassifierConstructor'
p1379
sg9
I00
sg10
(lp1380
sg12
(lp1381
sg29
(dp1382
sbsS'TStressFunc'
p1383
(i__main__
ClassDefinition
p1384
(dp1385
g4
I1
sg5
I0
sg6
g1383
sg7
S'TOrange'
p1386
sg9
I01
sg10
(lp1387
sg12
(lp1388
sg29
(dp1389
sbsS'TStopDistributionClustering_noProfit'
p1390
(i__main__
ClassDefinition
p1391
(dp1392
g4
I1
sg5
I01
sg6
g1390
sg7
S'TStopDistributionClustering'
p1393
sg9
I00
sg10
(lp1394
sg12
(lp1395
(S'float'
p1396
S'minProfitProportion'
p1397
S'min_profit_proportion'
p1398
S'minimal allowable profit proportion'
p1399
I0
I0
I01
Ntp1400
asg29
(dp1401
sbsS'TBiModalDiscretization'
p1402
(i__main__
ClassDefinition
p1403
(dp1404
g4
I1
sg5
I01
sg6
g1402
sg7
S'TDiscretization'
p1405
sg9
I00
sg10
(lp1406
sg12
(lp1407
(S'bool'
p1408
S'splitInTwo'
p1409
S'split_in_two'
p1410
S'if true (default), flanks are merged into a single interval'
p1411
I0
I0
I01
Ntp1412
asg29
(dp1413
sbsS'TColoredIG'
p1414
(i__main__
ClassDefinition
p1415
(dp1416
g4
I1
sg5
I01
sg6
g1414
sg7
S'TGeneralExampleClustering'
p1417
sg9
I00
sg10
(lp1418
sg12
(lp1419
(S'TIG'
p1420
S'ig'
p1421
g1421
S'incompatibility graph'
p1422
I0
I0
I00
Ntp1423
a(S'TIntList'
p1424
S'colors'
p1425
g1425
S'colors (one element corresponding to each ig node)'
p1426
I0
I0
I00
Ntp1427
asg29
(dp1428
sbsS'TMeasureAttribute'
p1429
(i__main__
ClassDefinition
p1430
(dp1431
g4
I1
sg5
I01
sg6
g1429
sg7
S'TOrange'
p1432
sg9
I00
sg10
(lp1433
sg12
(lp1434
g926
ag931
ag936
ag941
asg29
(dp1435
S'Needs'
p1436
(lp1437
(S'Contingency_Class'
p1438
I0
tp1439
a(S'DomainContingency'
p1440
I1
tp1441
a(S'Generator'
p1442
I2
tp1443
asS'UnknownsTreatment'
p1444
(lp1445
(S'IgnoreUnknowns'
p1446
I0
tp1447
a(S'ReduceByUnknowns'
p1448
I1
tp1449
a(S'UnknownsToCommon'
p1450
I2
tp1451
a(S'UnknownsAsValue'
p1452
I3
tp1453
assbsS'TRuleEvaluator'
p1454
(i__main__
ClassDefinition
p1455
(dp1456
g4
I1
sg5
I01
sg6
g1454
sg7
S'TOrange'
p1457
sg9
I01
sg10
(lp1458
sg12
(lp1459
sg29
(dp1460
sbsS'TStringVariable'
p1461
(i__main__
ClassDefinition
p1462
(dp1463
g4
I1
sg5
I01
sg6
g1461
sg7
S'TVariable'
p1464
sg9
I00
sg10
(lp1465
sg12
(lp1466
g333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp1467
sbsS'TAssessIMQuality'
p1468
(i__main__
ClassDefinition
p1469
(dp1470
g4
I1
sg5
I01
sg6
g1468
sg7
S'TOrange'
p1471
sg9
I00
sg10
(lp1472
sg12
(lp1473
(S'TColumnAssessor'
p1474
S'columnAssessor'
p1475
S'column_assessor'
p1476
S'column quality assessor'
p1477
I0
I0
I00
Ntp1478
asg29
(dp1479
sbsS'TGraphAsTree'
p1480
(i__main__
ClassDefinition
p1481
(dp1482
g4
I1
sg5
I01
sg6
g1480
sg7
S'TGraph'
p1483
sg9
I00
sg10
(lp1484
sg12
(lp1485
(S'int'
p1486
S'nVertices'
p1487
S'n_vertices'
p1488
S'the number of vertices'
p1489
I01
I0
I01
Ntp1490
a(S'int'
p1491
S'nEdgeTypes'
p1492
S'n_edge_types'
p1493
S'the number of edge types'
p1494
I01
I0
I01
Ntp1495
a(S'bool'
p1496
S'directed'
p1497
g1497
S'directed'
p1498
I01
I0
I01
Ntp1499
asg29
(dp1500
sbsS'TTreeExampleSplitter_IgnoreUnknowns'
p1501
(i__main__
ClassDefinition
p1502
(dp1503
g4
I1
sg5
I01
sg6
g1501
sg7
S'TTreeExampleSplitter'
p1504
sg9
I00
sg10
(lp1505
sg12
(lp1506
sg29
(dp1507
sbsS'TProbabilityEstimator_FromDistribution'
p1508
(i__main__
ClassDefinition
p1509
(dp1510
g4
I1
sg5
I01
sg6
g1508
sg7
S'TProbabilityEstimator'
p1511
sg9
I00
sg10
(lp1512
sg12
(lp1513
(S'TDistribution'
p1514
S'probabilities'
p1515
g1515
S'probabilities'
p1516
I0
I0
I00
Ntp1517
a(S'bool'
p1518
S'supportsDiscrete'
p1519
S'supports_discrete'
p1520
S'can estimate probabilities of discrete attributes'
p1521
I01
I0
I01
Ntp1522
a(S'bool'
p1523
S'supportsContinuous'
p1524
S'supports_continuous'
p1525
S'can estimate probabilities of continuous attributes'
p1526
I01
I0
I01
Ntp1527
asg29
(dp1528
sbsS'TC45TreeNode'
p1529
(i__main__
ClassDefinition
p1530
(dp1531
g4
I1
sg5
I01
sg6
g1529
sg7
S'TOrange'
p1532
sg9
I00
sg10
(lp1533
sg12
(lp1534
(S'int'
p1535
S'nodeType'
p1536
S'node_type'
p1537
S' 0 = leaf,  1 = branch,  2 = cut,  3 = subset'
p1538
I0
I0
I01
S'C45TreeNode_NodeType'
p1539
tp1540
a(S'TValue'
p1541
S'leaf'
p1542
g1542
S'most frequent class at this node'
p1543
I0
I0
I01
Ntp1544
a(S'float'
p1545
S'items'
p1546
g1546
S'no of items at this node'
p1547
I0
I0
I01
Ntp1548
a(S'TDiscDistribution'
p1549
S'classDist'
p1550
S'class_dist'
p1551
S'class distribution of items'
p1552
I0
I0
I00
Ntp1553
a(S'TVariable'
p1554
S'tested'
p1555
g1555
S'attribute referenced in test'
p1556
I0
I0
I00
Ntp1557
a(S'float'
p1558
S'cut'
p1559
g1559
S'threshold for continuous attribute'
p1560
I0
I0
I01
Ntp1561
a(S'float'
p1562
S'lower'
p1563
g1563
S'lower limit of soft threshold'
p1564
I0
I0
I01
Ntp1565
a(S'float'
p1566
S'upper'
p1567
g1567
S'upper limit of soft threshold'
p1568
I0
I0
I01
Ntp1569
a(S'TIntList'
p1570
S'mapping'
p1571
g1571
S'mapping for discrete value'
p1572
I0
I0
I00
Ntp1573
a(S'TC45TreeNodeList'
p1574
S'branch'
p1575
g1575
S'branch[x] = (sub)tree for outcome x */'
p1576
I0
I0
I00
Ntp1577
asg29
(dp1578
S'NodeType'
p1579
(lp1580
(S'Leaf'
p1581
S'0'
p1582
tp1583
a(S'Branch'
p1584
I1
tp1585
a(S'Cut'
p1586
I2
tp1587
a(S'Subset'
p1588
I3
tp1589
assbsS'TDistributionList'
p1590
(ipyprops
ClassDefinition
p1591
(dp1592
g4
I0
sg5
I01
sg6
g1590
sg7
g143
sg9
I0
sg10
(lp1593
sg12
(lp1594
sg29
(dp1595
sbsS'TTreeDescender_UnknownMergeAsBranchSizes'
p1596
(i__main__
ClassDefinition
p1597
(dp1598
g4
I1
sg5
I01
sg6
g1596
sg7
S'TTreeDescender'
p1599
sg9
I0
sg10
(lp1600
sg12
(lp1601
sg29
(dp1602
sbsS'THierarchicalClusterOrdering'
p1603
(i__main__
ClassDefinition
p1604
(dp1605
g4
I1
sg5
I01
sg6
g1603
sg7
S'TOrange'
p1606
sg9
I00
sg10
(lp1607
sg12
(lp1608
(S'TProgressCallback'
p1609
S'progress_callback'
p1610
g1610
S'progress callback function'
p1611
I0
I0
I00
Ntp1612
asg29
(dp1613
sbsS'TLogitClassifierState'
p1614
(i__main__
ClassDefinition
p1615
(dp1616
g4
I1
sg5
I01
sg6
g1614
sg7
S'TOrange'
p1617
sg9
I00
sg10
(lp1618
sg12
(lp1619
(S'TRuleList'
p1620
S'rules'
p1621
g1621
g573
I0
I0
I00
Ntp1622
a(S'TExampleTable'
p1623
S'examples'
p1624
g1624
g573
I0
I0
I00
Ntp1625
a(S'TFloatList'
p1626
S'avgProb'
p1627
S'avg_prob'
p1628
g573
I0
I0
I00
Ntp1629
a(S'TFloatList'
p1630
S'avgPriorProb'
p1631
S'avg_prior_prob'
p1632
g573
I0
I0
I00
Ntp1633
a(S'TIntList'
p1634
S'prefixRules'
p1635
S'prefix_rules'
p1636
g573
I0
I0
I00
Ntp1637
asg29
(dp1638
sbsS'TExamplesDistance'
p1639
(i__main__
ClassDefinition
p1640
(dp1641
g4
I1
sg5
I01
sg6
g1639
sg7
S'TOrange'
p1642
sg9
I01
sg10
(lp1643
sg12
(lp1644
sg29
(dp1645
sbsS'TFileExampleGenerator'
p1646
(i__main__
ClassDefinition
p1647
(dp1648
g4
I1
sg5
I01
sg6
g1646
sg7
S'TExampleGenerator'
p1649
sg9
I01
sg10
(lp1650
sg12
(lp1651
(S'string'
p1652
S'filename'
p1653
g1653
S'filename'
p1654
I0
I0
I01
Ntp1655
a(S'int'
p1656
S'startDataPos'
p1657
S'start_data_pos'
p1658
S'starting position of the data in file'
p1659
I0
I0
I01
Ntp1660
a(S'int'
p1661
S'startDataLine'
p1662
S'start_data_line'
p1663
S'line in the file where the data starts'
p1664
I0
I0
I01
Ntp1665
ag306
ag310
asg29
(dp1666
sbsS'TMeasureAttribute_gainRatio'
p1667
(i__main__
ClassDefinition
p1668
(dp1669
g4
I1
sg5
I01
sg6
g1667
sg7
S'TMeasureAttributeFromProbabilities'
p1670
sg9
I00
sg10
(lp1671
sg12
(lp1672
g910
ag915
ag921
ag926
ag931
ag936
ag941
asg29
(dp1673
sbsS'TContingencyClassAttr'
p1674
(i__main__
ClassDefinition
p1675
(dp1676
g4
I1
sg5
I01
sg6
g1674
sg7
S'TContingencyClass'
p1677
sg9
I00
sg10
(lp1678
sg12
(lp1679
(S'TVariable'
p1680
S'outerVariable'
p1681
S'outer_variable'
p1682
S'outer attribute'
p1683
I0
I0
I00
Ntp1684
a(S'TVariable'
p1685
S'innerVariable'
p1686
S'inner_variable'
p1687
S'inner attribute'
p1688
I0
I0
I00
Ntp1689
a(S'int'
p1690
S'varType'
p1691
S'var_type'
p1692
S' outer attribute type'
p1693
I0
I0
I01
S'Variable_Type'
p1694
tp1695
a(S'TDistribution'
p1696
S'outerDistribution'
p1697
S'outer_distribution'
p1698
S'distribution of values of outer attributes'
p1699
I0
I0
I00
Ntp1700
a(S'TDistribution'
p1701
S'innerDistribution'
p1702
S'inner_distribution'
p1703
S'distribution of values of inner attributes'
p1704
I0
I0
I00
Ntp1705
a(S'TDistribution'
p1706
S'innerDistributionUnknown'
p1707
S'inner_distribution_unknown'
p1708
S'distribution of inner variable for examples where the outer value was unknown'
p1709
I0
I0
I00
Ntp1710
asg29
(dp1711
sbsS'TMissValuesGenerator'
p1712
(i__main__
ClassDefinition
p1713
(dp1714
g4
I1
sg5
I01
sg6
g1712
sg7
S'TChangeExampleGenerator'
p1715
sg9
I00
sg10
(lp1716
sg12
(lp1717
(S'TIntFloatList'
p1718
S'replaceProbabilities'
p1719
S'replace_probabilities'
p1720
S"probabilities for replacing attributes' values"
p1721
I0
I0
I00
Ntp1722
a(S'TRandomGenerator'
p1723
S'randomGenerator'
p1724
S'random_generator'
p1725
S'random generator'
p1726
I0
I0
I00
Ntp1727
ag306
ag310
asg29
(dp1728
sbsS'TLogRegClassifier'
p1729
(i__main__
ClassDefinition
p1730
(dp1731
g4
I1
sg5
I01
sg6
g1729
sg7
S'TClassifierFD'
p1732
sg9
I00
sg10
(lp1733
sg12
(lp1734
(S'TDomain'
p1735
S'continuizedDomain'
p1736
S'continuized_domain'
p1737
S'if absent, there is no continuous attributes in original domain'
p1738
I0
I0
I00
Ntp1739
a(S'TEFMDataDescription'
p1740
S'dataDescription'
p1741
S'data_description'
p1742
S'Data needed for classification in presence of undefined values'
p1743
I0
I0
I00
Ntp1744
a(S'TAttributedFloatList'
p1745
S'beta'
p1746
g1746
S'estimated beta coefficients for logistic regression'
p1747
I0
I0
I00
Ntp1748
a(S'TAttributedFloatList'
p1749
S'beta_se'
p1750
g1750
S'estimated standard errors for beta coefficients'
p1751
I0
I0
I00
Ntp1752
a(S'TAttributedFloatList'
p1753
S'wald_Z'
p1754
g1754
S'Wald Z statstic for beta coefficients'
p1755
I0
I0
I00
Ntp1756
a(S'TAttributedFloatList'
p1757
S'P'
p1758
g1758
S'estimated significances for beta coefficients'
p1759
I0
I0
I00
Ntp1760
a(S'float'
p1761
S'likelihood'
p1762
g1762
S"Likelihood: The likelihood function is the function which specifies the probability of the sample observed on the basis of a known model, as a function of the model's parameters. "
p1763
I0
I0
I01
Ntp1764
a(S'int'
p1765
S'fit_status'
p1766
g1766
S"Tells how the model fitting ended - either regularly (LogRegFitter.OK), or it was interrupted due to one of beta coefficients escaping towards infinity (LogRegFitter.Infinity) or since the values didn't converge (LogRegFitter.Divergence)."
p1767
I0
I0
I01
Ntp1768
a(S'TImputer'
p1769
S'imputer'
p1770
g1770
S'if present, it imputes unknown values'
p1771
I0
I0
I00
Ntp1772
ag291
ag94
ag99
asg29
(dp1773
sbsS'TEquiDistDiscretization'
p1774
(i__main__
ClassDefinition
p1775
(dp1776
g4
I1
sg5
I01
sg6
g1774
sg7
S'TDiscretization'
p1777
sg9
I00
sg10
(lp1778
sg12
(lp1779
(S'int'
p1780
S'numberOfIntervals'
p1781
(g1781
g1018
tp1782
S' number of intervals'
p1783
I0
I0
I01
Ntp1784
asg29
(dp1785
sbsS'TPreprocessor_select'
p1786
(i__main__
ClassDefinition
p1787
(dp1788
g4
I1
sg5
I01
sg6
g1786
sg7
S'TPreprocessor'
p1789
sg9
I00
sg10
(lp1790
sg12
(lp1791
(S'TVarList'
p1792
S'attributes'
p1793
g1793
S'tells which attributes to select'
p1794
I0
I0
I00
Ntp1795
asg29
(dp1796
sbsS'TSVMClassifierSparse'
p1797
(i__main__
ClassDefinition
p1798
(dp1799
g4
I1
sg5
I01
sg6
g1797
sg7
S'TSVMClassifier'
p1800
sg9
I00
sg10
(lp1801
sg12
(lp1802
(S'bool'
p1803
S'useNonMeta'
p1804
S'use_non_meta'
p1805
S'include non meta attributes'
p1806
I0
I0
I01
Ntp1807
ag245
ag249
ag253
ag258
ag263
ag268
ag272
ag277
ag282
ag287
ag291
ag94
ag99
asg29
(dp1808
sbsS'TFilter_disjunction'
p1809
(i__main__
ClassDefinition
p1810
(dp1811
g4
I1
sg5
I01
sg6
g1809
sg7
S'TFilter'
p1812
sg9
I00
sg10
(lp1813
sg12
(lp1814
(S'TFilterList'
p1815
S'filters'
p1816
g1816
S'a list of filters;'
p1817
I0
I0
I00
Ntp1818
ag695
ag699
asg29
(dp1819
sbsS'TMeasureAttribute_gini'
p1820
(i__main__
ClassDefinition
p1821
(dp1822
g4
I1
sg5
I01
sg6
g1820
sg7
S'TMeasureAttributeFromProbabilities'
p1823
sg9
I00
sg10
(lp1824
sg12
(lp1825
g910
ag915
ag921
ag926
ag931
ag936
ag941
asg29
(dp1826
sbsS'TAttributedFloatList'
p1827
(ipyprops
ClassDefinition
p1828
(dp1829
g4
I0
sg5
I01
sg6
g1827
sg7
S'TFloatList'
p1830
sg9
I0
sg10
(lp1831
sg12
(lp1832
sg29
(dp1833
sbsS'TIMByRowsByRelief'
p1834
(i__main__
ClassDefinition
p1835
(dp1836
g4
I1
sg5
I01
sg6
g1834
sg7
S'TIMByRowsConstructor'
p1837
sg9
I00
sg10
(lp1838
sg12
(lp1839
(S'float'
p1840
g1208
g1208
S'number of neighbours'
p1841
I0
I0
I01
Ntp1842
a(S'float'
p1843
g1212
g1212
S'number of reference examples'
p1844
I0
I0
I01
Ntp1845
a(S'float'
p1846
S'kFromColumns'
p1847
S'k_from_columns'
p1848
S'if positive, number of neighbours is #columns*kFromColumns'
p1849
I0
I0
I01
Ntp1850
a(S'bool'
p1851
S'ignoreSameExample'
p1852
S'ignore_same_example'
p1853
S'does not put reference example into M'
p1854
I0
I0
I01
Ntp1855
a(S'bool'
p1856
S'convertToBinary'
p1857
S'convert_to_binary'
p1858
S'convert to binary class (hit-miss)'
p1859
I0
I0
I01
Ntp1860
a(S'bool'
p1861
S'correctClassFirst'
p1862
S'correct_class_first'
p1863
S'puts the correct class proportion to the first place'
p1864
I0
I0
I01
Ntp1865
a(S'bool'
p1866
S'allExamples'
p1867
S'all_examples'
p1868
S'uses all examples for reference examples'
p1869
I0
I0
I01
Ntp1870
a(S'bool'
p1871
S'allSameNeighbours'
p1872
S'all_same_neighbours'
p1873
S'uses all the examples same to the reference as neighbours'
p1874
I0
I0
I01
Ntp1875
asg29
(dp1876
sbsS'TFindNearestConstructor'
p1877
(i__main__
ClassDefinition
p1878
(dp1879
g4
I1
sg5
I01
sg6
g1877
sg7
S'TOrange'
p1880
sg9
I01
sg10
(lp1881
sg12
(lp1882
(S'TExamplesDistanceConstructor'
p1883
S'distanceConstructor'
p1884
S'distance_constructor'
p1885
S'metrics'
p1886
I0
I0
I00
Ntp1887
a(S'bool'
p1888
S'includeSame'
p1889
S'include_same'
p1890
S'tells whether to include examples that are same as the reference example'
p1891
I0
I0
I01
Ntp1892
asg29
(dp1893
sbsS'TRuleClassifier_firstRule'
p1894
(i__main__
ClassDefinition
p1895
(dp1896
g4
I1
sg5
I01
sg6
g1894
sg7
S'TRuleClassifier'
p1897
sg9
I00
sg10
(lp1898
sg12
(lp1899
(S'TDistribution'
p1900
S'prior'
p1901
g1901
S'prior distribution'
p1902
I0
I0
I00
Ntp1903
ag605
ag608
ag612
ag94
ag99
asg29
(dp1904
sbsS'TColumnAssessor'
p1905
(i__main__
ClassDefinition
p1906
(dp1907
g4
I1
sg5
I01
sg6
g1905
sg7
S'TOrange'
p1908
sg9
I01
sg10
(lp1909
sg12
(lp1910
sg29
(dp1911
sbsS'TTableAverager'
p1912
(i__main__
ClassDefinition
p1913
(dp1914
g4
I1
sg5
I01
sg6
g1912
sg7
S'TOrange'
p1915
sg9
I00
sg10
(lp1916
sg12
(lp1917
sg29
(dp1918
sbsS'TComputeDomainContingency_Preprocessor'
p1919
(i__main__
ClassDefinition
p1920
(dp1921
g4
I1
sg5
I01
sg6
g1919
sg7
S'TComputeDomainContingency'
p1922
sg9
I00
sg10
(lp1923
sg12
(lp1924
(S'TPreprocessor'
p1925
S'preprocessor'
p1926
g1926
S'preprocesses the exmaples (see the manual for restrictions!)'
p1927
I0
I0
I00
Ntp1928
a(S'bool'
p1929
S'resultInOriginalDomain'
p1930
S'result_in_original_domain'
p1931
S'tells whether the resulting DomainContingency should consist of original attributes'
p1932
I0
I0
I01
Ntp1933
ag28
asg29
(dp1934
sbsS'TFloatFloatList'
p1935
(ipyprops
ClassDefinition
p1936
(dp1937
g4
I0
sg5
I01
sg6
g1935
sg7
g143
sg9
I0
sg10
(lp1938
sg12
(lp1939
sg29
(dp1940
sbsS'TMeasureAttribute_MSE'
p1941
(i__main__
ClassDefinition
p1942
(dp1943
g4
I1
sg5
I01
sg6
g1941
sg7
S'TMeasureAttribute'
p1944
sg9
I00
sg10
(lp1945
sg12
(lp1946
(S'float'
p1947
g1212
g1212
S'm for m-estimate'
p1948
I0
I0
I01
Ntp1949
a(S'int'
p1950
S'unknownsTreatment'
p1951
S'unknowns_treatment'
p1952
S' treatment of unknown values'
p1953
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p1954
tp1955
ag926
ag931
ag936
ag941
asg29
(dp1956
sbsS'TRuleList'
p1957
(ipyprops
ClassDefinition
p1958
(dp1959
g4
I0
sg5
I01
sg6
g1957
sg7
g143
sg9
I0
sg10
(lp1960
sg12
(lp1961
sg29
(dp1962
sbsS'TClusteringTreeClassifier'
p1963
(i__main__
ClassDefinition
p1964
(dp1965
g4
I1
sg5
I01
sg6
g1963
sg7
S'TMultiClassifier'
p1966
sg9
I00
sg10
(lp1967
sg12
(lp1968
g799
ag803
ag808
asg29
(dp1969
sbsS'TStopIMClusteringByAssessor_noBigChange'
p1970
(i__main__
ClassDefinition
p1971
(dp1972
g4
I1
sg5
I01
sg6
g1970
sg7
S'TStopIMClusteringByAssessor'
p1973
sg9
I00
sg10
(lp1974
sg12
(lp1975
sg29
(dp1976
sbsS'TItemsetsSparseInducer'
p1977
(i__main__
ClassDefinition
p1978
(dp1979
g4
I1
sg5
I01
sg6
g1977
sg7
S'TOrange'
p1980
sg9
I00
sg10
(lp1981
sg12
(lp1982
(S'int'
p1983
S'maxItemSets'
p1984
S'max_item_sets'
p1985
S'maximal number of itemsets (increase if you want)'
p1986
I0
I0
I01
Ntp1987
a(S'float'
p1988
S'support'
p1989
g1989
S'required support'
p1990
I0
I0
I01
Ntp1991
a(S'bool'
p1992
S'storeExamples'
p1993
S'store_examples'
p1994
S'stores examples corresponding to itemsets'
p1995
I0
I0
I01
Ntp1996
asg29
(dp1997
sbsS'TPreprocessor_dropMissing'
p1998
(i__main__
ClassDefinition
p1999
(dp2000
g4
I1
sg5
I01
sg6
g1998
sg7
S'TPreprocessor'
p2001
sg9
I00
sg10
(lp2002
sg12
(lp2003
sg29
(dp2004
sbsS'TDomainContinuizer'
p2005
(i__main__
ClassDefinition
p2006
(dp2007
g4
I1
sg5
I01
sg6
g2005
sg7
S'TOrange'
p2008
sg9
I00
sg10
(lp2009
sg12
(lp2010
(S'bool'
p2011
S'zeroBased'
p2012
S'zero_based'
p2013
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p2014
I0
I0
I01
Ntp2015
a(S'int'
p2016
S'continuousTreatment'
p2017
S'continuous_treatment'
p2018
S' 0-leave as they are, 1-divide by span, 1-normalize'
p2019
I0
I0
I01
S'DomainContinuizer_ContinuousTreatment'
p2020
tp2021
a(S'int'
p2022
S'multinomialTreatment'
p2023
S'multinomial_treatment'
p2024
S' 0-lowest value, 1-most frequent (or baseValue), 2-n binary, 3-ignore, 4-ignore all discrete, 5-error, 6-convert as ordinal, 7-ordinal,normalized'
p2025
I0
I0
I01
S'DomainContinuizer_MultinomialTreatment'
p2026
tp2027
a(S'int'
p2028
S'classTreatment'
p2029
S'class_treatment'
p2030
S' 3-leave as is unless target is given, 5-error if not continuous nor binary nor target given, 6-convert as ordinal (unless target given)'
p2031
I0
I0
I01
S'DomainContinuizer_ClassTreatment'
p2032
tp2033
asg29
(dp2034
S'MultinomialTreatment'
p2035
(lp2036
(S'LowestIsBase'
p2037
I0
tp2038
a(S'FrequentIsBase'
p2039
I1
tp2040
a(S'NValues'
p2041
I2
tp2042
a(S'Ignore'
p2043
I3
tp2044
a(S'IgnoreAllDiscrete'
p2045
I4
tp2046
a(S'ReportError'
p2047
I5
tp2048
a(S'AsOrdinal'
p2049
I6
tp2050
a(S'AsNormalizedOrdinal'
p2051
I7
tp2052
asS'ClassTreatment'
p2053
(lp2054
(S'LeaveUnlessTarget'
p2055
S'3'
p2056
tp2057
a(S'ErrorIfCannotHandle'
p2058
S'5'
p2059
tp2060
a(S'AsOrdinal'
p2061
S'6'
p2062
tp2063
asS'ContinuousTreatment'
p2064
(lp2065
(S'Leave'
p2066
I0
tp2067
a(S'NormalizeBySpan'
p2068
I1
tp2069
a(S'NormalizeByVariance'
p2070
I2
tp2071
assbsS'TNormalizeContinuous'
p2072
(i__main__
ClassDefinition
p2073
(dp2074
g4
I1
sg5
I01
sg6
g2072
sg7
S'TTransformValue'
p2075
sg9
I00
sg10
(lp2076
sg12
(lp2077
(S'float'
p2078
S'average'
p2079
g2079
S'the average value'
p2080
I0
I0
I01
Ntp2081
a(S'float'
p2082
S'span'
p2083
g2083
S'the value span'
p2084
I0
I0
I01
Ntp2085
ag824
asg29
(dp2086
sbsS'TSimpleTreeClassifier'
p2087
(i__main__
ClassDefinition
p2088
(dp2089
g4
I1
sg5
I01
sg6
g2087
sg7
S'TClassifier'
p2090
sg9
I00
sg10
(lp2091
sg12
(lp2092
g94
ag99
asg29
(dp2093
sbsS'TStressFunc_Python'
p2094
(i__main__
ClassDefinition
p2095
(dp2096
g4
I1
sg5
I0
sg6
g2094
sg7
S'TStressFunc'
p2097
sg9
I00
sg10
(lp2098
sg12
(lp2099
sg29
(dp2100
sbsS'TBiModalDiscretizer'
p2101
(i__main__
ClassDefinition
p2102
(dp2103
g4
I1
sg5
I01
sg6
g2101
sg7
S'TDiscretizer'
p2104
sg9
I00
sg10
(lp2105
sg12
(lp2106
(S'float'
p2107
S'low'
p2108
g2108
S'low threshold'
p2109
I0
I0
I01
Ntp2110
a(S'float'
p2111
S'high'
p2112
g2112
S'high threshold'
p2113
I0
I0
I01
Ntp2114
ag824
asg29
(dp2115
sbsS'TExamplesDistanceConstructor_Euclidean'
p2116
(i__main__
ClassDefinition
p2117
(dp2118
g4
I1
sg5
I01
sg6
g2116
sg7
S'TExamplesDistanceConstructor_Normalized'
p2119
sg9
I00
sg10
(lp2120
sg12
(lp2121
(S'bool'
p2122
S'normalize'
p2123
g2123
S'tells whether to normalize distances between attributes'
p2124
I0
I0
I01
Ntp2125
a(S'bool'
p2126
S'ignoreUnknowns'
p2127
S'ignore_unknowns'
p2128
S'if true (default: false) unknown values are ignored in computation'
p2129
I0
I0
I01
Ntp2130
ag1367
asg29
(dp2131
sbsS'TContingencyAttrAttr'
p2132
(i__main__
ClassDefinition
p2133
(dp2134
g4
I1
sg5
I01
sg6
g2132
sg7
S'TContingency'
p2135
sg9
I00
sg10
(lp2136
sg12
(lp2137
g1684
ag1689
ag1695
ag1700
ag1705
ag1710
asg29
(dp2138
sbsS'TRuleBeamRefiner_Selector'
p2139
(i__main__
ClassDefinition
p2140
(dp2141
g4
I1
sg5
I01
sg6
g2139
sg7
S'TRuleBeamRefiner'
p2142
sg9
I00
sg10
(lp2143
sg12
(lp2144
(S'TDiscretization'
p2145
S'discretization'
p2146
g2146
S'discretization for continuous attributes'
p2147
I0
I0
I00
Ntp2148
asg29
(dp2149
sbsS'TProbabilityEstimatorConstructor_Laplace'
p2150
(i__main__
ClassDefinition
p2151
(dp2152
g4
I1
sg5
I01
sg6
g2150
sg7
S'TProbabilityEstimatorConstructor'
p2153
sg9
I00
sg10
(lp2154
sg12
(lp2155
(S'float'
p2156
S'l'
p2157
g2157
S'number of examples added to each class (default: 1)'
p2158
I0
I0
I01
Ntp2159
a(S'bool'
p2160
S'renormalize'
p2161
g2161
S'computes the estimate on the original (not the normalized) distribution'
p2162
I0
I0
I01
Ntp2163
asg29
(dp2164
sbsS'TExamplesDistance_Relief'
p2165
(i__main__
ClassDefinition
p2166
(dp2167
g4
I1
sg5
I01
sg6
g2165
sg7
S'TExamplesDistance'
p2168
sg9
I00
sg10
(lp2169
sg12
(lp2170
(S'TDomainDistributions'
p2171
S'distributions'
p2172
g2172
S"distributions of attributes' values"
p2173
I0
I0
I00
Ntp2174
a(S'TAttributedFloatList'
p2175
S'averages'
p2176
g2176
S'average values of attributes'
p2177
I0
I0
I00
Ntp2178
a(S'TAttributedFloatList'
p2179
S'normalizations'
p2180
g2180
S"ranges of attributes' values"
p2181
I0
I0
I00
Ntp2182
a(S'TAttributedFloatList'
p2183
S'bothSpecial'
p2184
S'both_special'
p2185
S'distance if both values of both attributes are undefined'
p2186
I0
I0
I00
Ntp2187
asg29
(dp2188
sbsS'TExamplesDistance_Manhattan'
p2189
(i__main__
ClassDefinition
p2190
(dp2191
g4
I1
sg5
I01
sg6
g2189
sg7
S'TExamplesDistance_Normalized'
p2192
sg9
I00
sg10
(lp2193
sg12
(lp2194
g454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp2195
sbsS'TExamplesDistanceConstructor_Manhattan'
p2196
(i__main__
ClassDefinition
p2197
(dp2198
g4
I1
sg5
I01
sg6
g2196
sg7
S'TExamplesDistanceConstructor_Normalized'
p2199
sg9
I00
sg10
(lp2200
sg12
(lp2201
g2125
ag2130
ag1367
asg29
(dp2202
sbsS'TMeasureAttribute_gainRatioA'
p2203
(i__main__
ClassDefinition
p2204
(dp2205
g4
I1
sg5
I01
sg6
g2203
sg7
S'TMeasureAttribute_gainRatio'
p2206
sg9
I00
sg10
(lp2207
sg12
(lp2208
g910
ag915
ag921
ag926
ag931
ag936
ag941
asg29
(dp2209
sbsS'TTreeDescender'
p2210
(i__main__
ClassDefinition
p2211
(dp2212
g4
I1
sg5
I01
sg6
g2210
sg7
S'TOrange'
p2213
sg9
I01
sg10
(lp2214
sg12
(lp2215
sg29
(dp2216
sbsS'TColumnAssessor_Measure'
p2217
(i__main__
ClassDefinition
p2218
(dp2219
g4
I1
sg5
I01
sg6
g2217
sg7
S'TColumnAssessor'
p2220
sg9
I00
sg10
(lp2221
sg12
(lp2222
(S'TMeasureAttribute'
p2223
S'measure'
p2224
g2224
S'attribute quality measure'
p2225
I0
I0
I00
Ntp2226
asg29
(dp2227
sbsS'TIMBlurer'
p2228
(i__main__
ClassDefinition
p2229
(dp2230
g4
I1
sg5
I01
sg6
g2228
sg7
S'TIMByRowsPreprocessor'
p2231
sg9
I00
sg10
(lp2232
sg12
(lp2233
(S'float'
p2234
S'weight'
p2235
g2235
S'weight of neighbours'
p2236
I0
I0
I01
Ntp2237
a(S'float'
p2238
S'origWeight'
p2239
S'orig_weight'
p2240
S'weight of original row'
p2241
I0
I0
I01
Ntp2242
a(S'TFloatList'
p2243
S'attrWeights'
p2244
S'attr_weights'
p2245
S'weights by individual (different) attributes'
p2246
I0
I0
I00
Ntp2247
a(S'bool'
p2248
S'adjustOrigWeight'
p2249
S'adjust_orig_weight'
p2250
S'uses 1-weight(s) for weight of original row'
p2251
I0
I0
I01
Ntp2252
a(S'bool'
p2253
S'onlyEmpty'
p2254
S'only_empty'
p2255
S'blurs only empty cells'
p2256
I0
I0
I01
Ntp2257
asg29
(dp2258
sbsS'TFilter'
p2259
(i__main__
ClassDefinition
p2260
(dp2261
g4
I1
sg5
I01
sg6
g2259
sg7
S'TOrange'
p2262
sg9
I01
sg10
(lp2263
sg12
(lp2264
g695
ag699
asg29
(dp2265
sbsS'TC45Learner'
p2266
(i__main__
ClassDefinition
p2267
(dp2268
g4
I1
sg5
I01
sg6
g2266
sg7
S'TLearner'
p2269
sg9
I00
sg10
(lp2270
sg12
(lp2271
(S'bool'
p2272
S'gainRatio'
p2273
(g2273
S'g'
p2274
tp2275
S' use gain ratio (instead of information gain)'
p2276
I0
I0
I01
Ntp2277
a(S'bool'
p2278
S'subset'
p2279
(g2279
S's'
p2280
tp2281
S' use subsetting'
p2282
I0
I0
I01
Ntp2283
a(S'bool'
p2284
S'batch'
p2285
(g2285
S'b'
p2286
tp2287
S' batch'
p2288
I0
I0
I01
Ntp2289
a(S'bool'
p2290
S'probThresh'
p2291
(g2291
S'p'
p2292
tp2293
S' probability threshold'
p2294
I0
I0
I01
Ntp2295
a(S'int'
p2296
S'minObjs'
p2297
(g2297
g1212
tp2298
S' minimal number of objects (examples) in leaves'
p2299
I0
I0
I01
Ntp2300
a(S'int'
p2301
S'window'
p2302
(g2302
S'w'
p2303
tp2304
S' window'
p2305
I0
I0
I01
Ntp2306
a(S'int'
p2307
S'increment'
p2308
(g2308
S'i'
p2309
tp2310
S' increment'
p2311
I0
I0
I01
Ntp2312
a(S'float'
p2313
S'cf'
p2314
(g2314
S'c'
p2315
tp2316
S' cf'
p2317
I0
I0
I01
Ntp2318
a(S'int'
p2319
S'trials'
p2320
(g2320
S't'
p2321
tp2322
S' trials'
p2323
I0
I0
I01
Ntp2324
a(S'bool'
p2325
S'prune'
p2326
g2326
S'return pruned tree'
p2327
I0
I0
I01
Ntp2328
a(S'bool'
p2329
S'convertToOrange'
p2330
S'convert_to_orange'
p2331
S'return TreeClassifier instead of C45TreeClassifier'
p2332
I0
I0
I01
Ntp2333
a(S'bool'
p2334
S'storeExamples'
p2335
S'store_examples'
p2336
S'stores examples when (if) converting to TreeClassifier'
p2337
I0
I0
I01
Ntp2338
a(S'bool'
p2339
S'storeContingencies'
p2340
S'store_contingencies'
p2341
S'stores contingencies when (if) converting to TreeClassifier'
p2342
I0
I0
I01
Ntp2343
ag110
asg29
(dp2344
sbsS'TAttributedBoolList'
p2345
(ipyprops
ClassDefinition
p2346
(dp2347
g4
I0
sg5
I01
sg6
g2345
sg7
S'TBoolList'
p2348
sg9
I0
sg10
(lp2349
sg12
(lp2350
sg29
(dp2351
sbsS'TFeatureByMinComplexity'
p2352
(i__main__
ClassDefinition
p2353
(dp2354
g4
I1
sg5
I01
sg6
g2352
sg7
S'TFeatureInducer'
p2355
sg9
I00
sg10
(lp2356
sg12
(lp2357
(S'TColorIG'
p2358
S'colorIG'
p2359
S'color_IG'
p2360
S'graph coloring algorithm'
p2361
I0
I0
I00
Ntp2362
a(S'int'
p2363
S'completion'
p2364
g2364
S' decides how to determine the class for points not covered by any cluster'
p2365
I0
I0
I01
S'FeatureByMinComplexity_Completion'
p2366
tp2367
asg29
(dp2368
S'Completion'
p2369
(lp2370
(S'NoCompletion'
p2371
S'completion_no'
p2372
tp2373
a(S'CompletionByDefault'
p2374
S'completion_default'
p2375
tp2376
a(S'CompletionByBayes'
p2377
S'completion_bayes'
p2378
tp2379
assbsS'TPreprocessor_dropMissingClasses'
p2380
(i__main__
ClassDefinition
p2381
(dp2382
g4
I1
sg5
I01
sg6
g2380
sg7
S'TPreprocessor'
p2383
sg9
I00
sg10
(lp2384
sg12
(lp2385
sg29
(dp2386
sbsS'TkNNClassifier'
p2387
(i__main__
ClassDefinition
p2388
(dp2389
g4
I1
sg5
I01
sg6
g2387
sg7
S'TClassifierFD'
p2390
sg9
I00
sg10
(lp2391
sg12
(lp2392
(S'TFindNearest'
p2393
S'findNearest'
p2394
S'find_nearest'
p2395
g573
I0
I0
I00
Ntp2396
a(S'float'
p2397
g1208
g1208
S'number of neighbours (0 for sqrt of #examples)'
p2398
I0
I0
I01
Ntp2399
a(S'bool'
p2400
S'rankWeight'
p2401
S'rank_weight'
p2402
S'enable weighting by ranks'
p2403
I0
I0
I01
Ntp2404
a(S'int'
p2405
S'weightID'
p2406
S'weight_ID'
p2407
S'id of meta-attribute with weight'
p2408
I0
I0
I01
Ntp2409
a(S'int'
p2410
S'nExamples'
p2411
S'n_examples'
p2412
S'the number of learning examples '
p2413
I0
I0
I01
Ntp2414
ag291
ag94
ag99
asg29
(dp2415
sbsS'TMeasureAttribute_info'
p2416
(i__main__
ClassDefinition
p2417
(dp2418
g4
I1
sg5
I01
sg6
g2416
sg7
S'TMeasureAttributeFromProbabilities'
p2419
sg9
I00
sg10
(lp2420
sg12
(lp2421
g910
ag915
ag921
ag926
ag931
ag936
ag941
asg29
(dp2422
sbsS'TSgnSammonStress'
p2423
(i__main__
ClassDefinition
p2424
(dp2425
g4
I1
sg5
I0
sg6
g2423
sg7
S'TStressFunc'
p2426
sg9
I00
sg10
(lp2427
sg12
(lp2428
sg29
(dp2429
sbsS'TRuleBeamCandidateSelector_TakeAll'
p2430
(i__main__
ClassDefinition
p2431
(dp2432
g4
I1
sg5
I01
sg6
g2430
sg7
S'TRuleBeamCandidateSelector'
p2433
sg9
I00
sg10
(lp2434
sg12
(lp2435
sg29
(dp2436
sbsS'TExamplesDistanceConstructor_Relief'
p2437
(i__main__
ClassDefinition
p2438
(dp2439
g4
I1
sg5
I01
sg6
g2437
sg7
S'TExamplesDistanceConstructor'
p2440
sg9
I00
sg10
(lp2441
sg12
(lp2442
g1367
asg29
(dp2443
sbsS'TOrange'
p2444
(i__main__
ClassDefinition
p2445
(dp2446
g4
I1
sg5
I01
sg6
g2444
sg7
Nsg9
I00
sg10
(lp2447
sg12
(lp2448
sg29
(dp2449
sbsS'TRuleValidator'
p2450
(i__main__
ClassDefinition
p2451
(dp2452
g4
I1
sg5
I01
sg6
g2450
sg7
S'TOrange'
p2453
sg9
I01
sg10
(lp2454
sg12
(lp2455
sg29
(dp2456
sbsS'TColorIG'
p2457
(i__main__
ClassDefinition
p2458
(dp2459
g4
I1
sg5
I01
sg6
g2457
sg7
S'TOrange'
p2460
sg9
I01
sg10
(lp2461
sg12
(lp2462
sg29
(dp2463
sbsS'TRuleValidator_Python'
p2464
(i__main__
ClassDefinition
p2465
(dp2466
g4
I1
sg5
I01
sg6
g2464
sg7
S'TRuleValidator'
p2467
sg9
I00
sg10
(lp2468
sg12
(lp2469
sg29
(dp2470
sbsS'TSubsetsGenerator_constSize_iterator'
p2471
(i__main__
ClassDefinition
p2472
(dp2473
g4
I1
sg5
I01
sg6
g2471
sg7
S'TSubsetsGenerator_iterator'
p2474
sg9
I00
sg10
(lp2475
sg12
(lp2476
(S'bool'
p2477
S'moreToCome'
p2478
S'more_to_come'
p2479
g573
I01
I0
I01
Ntp2480
ag510
asg29
(dp2481
sbsS'TIMByRowsBySorting'
p2482
(i__main__
ClassDefinition
p2483
(dp2484
g4
I1
sg5
I01
sg6
g2482
sg7
S'TIMByRowsConstructor'
p2485
sg9
I00
sg10
(lp2486
sg12
(lp2487
sg29
(dp2488
sbsS'TAssociationLearner'
p2489
(i__main__
ClassDefinition
p2490
(dp2491
g4
I1
sg5
I01
sg6
g2489
sg7
S'TLearner'
p2492
sg9
I00
sg10
(lp2493
sg12
(lp2494
(S'float'
p2495
S'confidence'
p2496
g2496
S'required confidence'
p2497
I0
I0
I01
Ntp2498
a(S'float'
p2499
S'support'
p2500
g2500
S'required support'
p2501
I0
I0
I01
Ntp2502
a(S'int'
p2503
S'voteWeight'
p2504
S'vote_weight'
p2505
S'vote weight (s=support, c=confidence, p=product)'
p2506
I0
I0
I01
Ntp2507
a(S'int'
p2508
S'maxItemSets'
p2509
S'max_item_sets'
p2510
S'maximal number of itemsets (increase if you want)'
p2511
I0
I0
I01
Ntp2512
ag110
asg29
(dp2513
sbsS'TRuleBeamInitializer_Python'
p2514
(i__main__
ClassDefinition
p2515
(dp2516
g4
I1
sg5
I01
sg6
g2514
sg7
S'TRuleBeamInitializer'
p2517
sg9
I00
sg10
(lp2518
sg12
(lp2519
sg29
(dp2520
sbsS'TDistributionAssessor'
p2521
(i__main__
ClassDefinition
p2522
(dp2523
g4
I1
sg5
I01
sg6
g2521
sg7
S'TOrange'
p2524
sg9
I01
sg10
(lp2525
sg12
(lp2526
sg29
(dp2527
sbsS'TRuleCovererAndRemover_Python'
p2528
(i__main__
ClassDefinition
p2529
(dp2530
g4
I1
sg5
I01
sg6
g2528
sg7
S'TRuleCovererAndRemover'
p2531
sg9
I00
sg10
(lp2532
sg12
(lp2533
sg29
(dp2534
sbsNNsS'TConditionalProbabilityEstimatorConstructor_ByRows'
p2535
(i__main__
ClassDefinition
p2536
(dp2537
g4
I1
sg5
I01
sg6
g2535
sg7
S'TConditionalProbabilityEstimatorConstructor'
p2538
sg9
I00
sg10
(lp2539
sg12
(lp2540
(S'TProbabilityEstimatorConstructor'
p2541
S'estimatorConstructor'
p2542
S'estimator_constructor'
p2543
S'ProbabilityEstimator to be used '
p2544
I0
I0
I00
Ntp2545
asg29
(dp2546
sbsS'TCartesianClassifier'
p2547
(i__main__
ClassDefinition
p2548
(dp2549
g4
I1
sg5
I01
sg6
g2547
sg7
S'TClassifierFD'
p2550
sg9
I00
sg10
(lp2551
sg12
(lp2552
g291
ag94
ag99
asg29
(dp2553
sbsS'TGraphLayout'
p2554
(i__main__
ClassDefinition
p2555
(dp2556
g4
I1
sg5
I0
sg6
g2554
sg7
S'TOrange'
p2557
sg9
I00
sg10
(lp2558
sg12
(lp2559
sg29
(dp2560
sbsS'TLinearClassifier'
p2561
(i__main__
ClassDefinition
p2562
(dp2563
g4
I1
sg5
I01
sg6
g2561
sg7
S'TClassifierFD'
p2564
sg9
I00
sg10
(lp2565
sg12
(lp2566
(S'TFloatListList'
p2567
S'weights'
p2568
g2568
S'Computed feature weights'
p2569
I0
I0
I00
Ntp2570
a(S'TExampleTable'
p2571
S'examples'
p2572
g2572
S'Examples used to train the classifier'
p2573
I0
I0
I00
Ntp2574
a(S'float'
p2575
S'bias'
p2576
g2576
S'bias'
p2577
I01
I0
I01
Ntp2578
ag291
ag94
ag99
asg29
(dp2579
sbsS'TTreeDescender_UnknownToBranch'
p2580
(i__main__
ClassDefinition
p2581
(dp2582
g4
I1
sg5
I01
sg6
g2580
sg7
g1599
sg9
I0
sg10
(lp2583
sg12
(lp2584
sg29
(dp2585
sbsS'TSubsetsGenerator_constSize'
p2586
(i__main__
ClassDefinition
p2587
(dp2588
g4
I1
sg5
I01
sg6
g2586
sg7
S'TSubsetsGenerator'
p2589
sg9
I00
sg10
(lp2590
sg12
(lp2591
(S'int'
p2592
S'B'
p2593
g2593
S'subset size'
p2594
I0
I0
I01
Ntp2595
ag207
asg29
(dp2596
sbsS'TColorIG_MCF'
p2597
(i__main__
ClassDefinition
p2598
(dp2599
g4
I1
sg5
I01
sg6
g2597
sg7
S'TColorIG'
p2600
sg9
I00
sg10
(lp2601
sg12
(lp2602
sg29
(dp2603
sbsS'TBasicAttrStat'
p2604
(i__main__
ClassDefinition
p2605
(dp2606
g4
I1
sg5
I01
sg6
g2604
sg7
S'TOrange'
p2607
sg9
I00
sg10
(lp2608
sg12
(lp2609
(S'float'
p2610
S'sum'
p2611
g2611
S'sum of values'
p2612
I0
I0
I01
Ntp2613
a(S'float'
p2614
S'sum2'
p2615
g2615
S'sum of squares of values'
p2616
I0
I0
I01
Ntp2617
a(S'float'
p2618
g1018
g1018
S'number of examples for which the attribute is defined'
p2619
I0
I0
I01
Ntp2620
a(S'float'
p2621
S'min'
p2622
g2622
S'the lowest value of the attribute'
p2623
I0
I0
I01
Ntp2624
a(S'float'
p2625
S'max'
p2626
g2626
S'the highest value of the attribute'
p2627
I0
I0
I01
Ntp2628
a(S'float'
p2629
S'avg'
p2630
g2630
S'the average value of the attribute'
p2631
I0
I0
I01
Ntp2632
a(S'float'
p2633
S'dev'
p2634
g2634
S'the deviation of the value of the attribute'
p2635
I0
I0
I01
Ntp2636
a(S'TVariable'
p2637
S'variable'
p2638
g2638
S'the attribute to which the data applies'
p2639
I0
I0
I00
Ntp2640
a(S'bool'
p2641
S'holdRecomputation'
p2642
S'hold_recomputation'
p2643
S'temporarily disables recomputation of avg and dev while adding values'
p2644
I0
I0
I01
Ntp2645
asg29
(dp2646
sbsS'TTreeSplitConstructor_Attribute'
p2647
(i__main__
ClassDefinition
p2648
(dp2649
g4
I1
sg5
I01
sg6
g2647
sg7
S'TTreeSplitConstructor_Measure'
p2650
sg9
I00
sg10
(lp2651
sg12
(lp2652
g1302
ag1307
ag787
asg29
(dp2653
sbsS'TRemoveRedundantByInduction'
p2654
(i__main__
ClassDefinition
p2655
(dp2656
g4
I1
sg5
I01
sg6
g2654
sg7
S'TRemoveRedundant'
p2657
sg9
I00
sg10
(lp2658
sg12
(lp2659
(S'TFeatureInducer'
p2660
S'featureReducer'
p2661
S'feature_reducer'
p2662
S'feature construction algorithm'
p2663
I0
I0
I00
Ntp2664
a(S'TMeasureAttribute'
p2665
S'measure'
p2666
g2666
S'measure for initial ordering of attributes'
p2667
I0
I0
I00
Ntp2668
a(S'TDiscretization'
p2669
S'discretization'
p2670
g2670
S'discretization method'
p2671
I0
I0
I00
Ntp2672
ag1345
asg29
(dp2673
sbsS'TFilter_conjunction'
p2674
(i__main__
ClassDefinition
p2675
(dp2676
g4
I1
sg5
I01
sg6
g2674
sg7
S'TFilter'
p2677
sg9
I00
sg10
(lp2678
sg12
(lp2679
(S'TFilterList'
p2680
S'filters'
p2681
g2681
S'a list of filters;'
p2682
I0
I0
I00
Ntp2683
ag695
ag699
asg29
(dp2684
sbsS'TExampleForMissing'
p2685
(i__main__
ClassDefinition
p2686
(dp2687
g4
I1
sg5
I01
sg6
g2685
sg7
S'TExample'
p2688
sg9
I00
sg10
(lp2689
sg12
(lp2690
(S'TEFMDataDescription'
p2691
S'dataDescription'
p2692
S'data_description'
p2693
S'data description'
p2694
I0
I0
I00
Ntp2695
a(S'TDomain'
p2696
S'domain'
p2697
g2697
S"Example's domain"
p2698
I01
I0
I00
Ntp2699
a(S'int'
p2700
S'id'
p2701
g2701
g573
I0
I0
I01
Ntp2702
asg29
(dp2703
sbsS'TRuleBeamFilter'
p2704
(i__main__
ClassDefinition
p2705
(dp2706
g4
I1
sg5
I01
sg6
g2704
sg7
S'TOrange'
p2707
sg9
I01
sg10
(lp2708
sg12
(lp2709
sg29
(dp2710
sbsS'TBayesClassifier'
p2711
(i__main__
ClassDefinition
p2712
(dp2713
g4
I1
sg5
I01
sg6
g2711
sg7
S'TClassifierFD'
p2714
sg9
I00
sg10
(lp2715
sg12
(lp2716
(S'TDistribution'
p2717
S'distribution'
p2718
g2718
S'class distributions (P(C))'
p2719
I0
I0
I00
Ntp2720
a(S'TDomainContingency'
p2721
S'conditionalDistributions'
p2722
S'conditional_distributions'
p2723
S'conditional distributions, P(C|A)'
p2724
I0
I0
I00
Ntp2725
a(S'TProbabilityEstimator'
p2726
S'estimator'
p2727
g2727
S'a probability estimator for P(C)'
p2728
I0
I0
I00
Ntp2729
a(S'TConditionalProbabilityEstimatorList'
p2730
S'conditionalEstimators'
p2731
S'conditional_estimators'
p2732
S'a probability estimator for P(C|A)'
p2733
I0
I0
I00
Ntp2734
a(S'bool'
p2735
S'normalizePredictions'
p2736
S'normalize_predictions'
p2737
S'if true, classifier will normalize predictions'
p2738
I0
I0
I01
Ntp2739
a(S'float'
p2740
S'threshold'
p2741
g2741
S'threshold probability for class 1 (for binary classes only)'
p2742
I0
I0
I01
Ntp2743
ag291
ag94
ag99
asg29
(dp2744
sbsS'TGraph'
p2745
(i__main__
ClassDefinition
p2746
(dp2747
g4
I1
sg5
I01
sg6
g2745
sg7
S'TOrange'
p2748
sg9
I01
sg10
(lp2749
sg12
(lp2750
g1490
ag1495
ag1499
asg29
(dp2751
sbsS'TPreprocessor_addClassWeight'
p2752
(i__main__
ClassDefinition
p2753
(dp2754
g4
I1
sg5
I01
sg6
g2752
sg7
S'TPreprocessor'
p2755
sg9
I00
sg10
(lp2756
sg12
(lp2757
(S'TFloatList'
p2758
S'classWeights'
p2759
S'class_weights'
p2760
S'weights of examples of particular classes'
p2761
I0
I0
I00
Ntp2762
a(S'bool'
p2763
S'equalize'
p2764
g2764
S'reweight examples to equalize class proportions'
p2765
I0
I0
I01
Ntp2766
a(S'TRandomGenerator'
p2767
S'randomGenerator'
p2768
S'random_generator'
p2769
S'random number generator'
p2770
I0
I0
I00
Ntp2771
asg29
(dp2772
sbsS'THierarchicalClusterList'
p2773
(ipyprops
ClassDefinition
p2774
(dp2775
g4
I0
sg5
I01
sg6
g2773
sg7
g143
sg9
I0
sg10
(lp2776
sg12
(lp2777
sg29
(dp2778
sbsS'TStopIMClusteringByAssessor'
p2779
(i__main__
ClassDefinition
p2780
(dp2781
g4
I1
sg5
I01
sg6
g2779
sg7
S'TOrange'
p2782
sg9
I01
sg10
(lp2783
sg12
(lp2784
sg29
(dp2785
sbsS'TValueFilter_continuous'
p2786
(i__main__
ClassDefinition
p2787
(dp2788
g4
I1
sg5
I01
sg6
g2786
sg7
S'TValueFilter'
p2789
sg9
I00
sg10
(lp2790
sg12
(lp2791
(S'float'
p2792
S'min'
p2793
(g2793
S'ref'
p2794
tp2795
S' reference value (lower bound for interval operators)'
p2796
I0
I0
I01
Ntp2797
a(S'float'
p2798
S'max'
p2799
g2799
S'upper bound for interval operators'
p2800
I0
I0
I01
Ntp2801
a(S'bool'
p2802
S'outside'
p2803
g2803
S'obsolete: if true, the filter accepts the values outside the interval, not inside'
p2804
I0
I0
I01
Ntp2805
a(S'int'
p2806
S'oper'
p2807
g2807
S' operator'
p2808
I0
I0
I01
S'ValueFilter_Operator'
p2809
tp2810
ag1061
ag1066
asg29
(dp2811
sbsS'TAssociationRule'
p2812
(i__main__
ClassDefinition
p2813
(dp2814
g4
I1
sg5
I01
sg6
g2812
sg7
S'TOrange'
p2815
sg9
I00
sg10
(lp2816
sg12
(lp2817
(S'TExample'
p2818
S'left'
p2819
g2819
S'left side of the rule'
p2820
I01
I0
I00
Ntp2821
a(S'TExample'
p2822
S'right'
p2823
g2823
S'right side of the rule'
p2824
I01
I0
I00
Ntp2825
a(S'float'
p2826
S'support'
p2827
g2827
S'support for the rule'
p2828
I0
I0
I01
Ntp2829
a(S'float'
p2830
S'confidence'
p2831
g2831
S'confidence of the rule'
p2832
I0
I0
I01
Ntp2833
a(S'float'
p2834
S'coverage'
p2835
g2835
S"rule's coverage"
p2836
I0
I0
I01
Ntp2837
a(S'float'
p2838
S'strength'
p2839
g2839
S"rule's strength"
p2840
I0
I0
I01
Ntp2841
a(S'float'
p2842
S'lift'
p2843
g2843
S"rule's lift"
p2844
I0
I0
I01
Ntp2845
a(S'float'
p2846
S'leverage'
p2847
g2847
S"rule's leverage"
p2848
I0
I0
I01
Ntp2849
a(S'float'
p2850
S'nAppliesLeft'
p2851
S'n_applies_left'
p2852
S"number of examples covered by the rule's left side"
p2853
I0
I0
I01
Ntp2854
a(S'float'
p2855
S'nAppliesRight'
p2856
S'n_applies_right'
p2857
S"number of examples covered by the rule's right side"
p2858
I0
I0
I01
Ntp2859
a(S'float'
p2860
S'nAppliesBoth'
p2861
S'n_applies_both'
p2862
S'number of examples covered by the rule'
p2863
I0
I0
I01
Ntp2864
a(S'float'
p2865
S'nExamples'
p2866
S'n_examples'
p2867
S'number of learning examples'
p2868
I0
I0
I01
Ntp2869
a(S'int'
p2870
S'nLeft'
p2871
S'n_left'
p2872
S"number of items on the rule's left side"
p2873
I01
I0
I01
Ntp2874
a(S'int'
p2875
S'nRight'
p2876
S'n_right'
p2877
S"number of items on the rule's right side"
p2878
I01
I0
I01
Ntp2879
a(S'TExampleTable'
p2880
S'examples'
p2881
g2881
S'examples which the rule was built from'
p2882
I01
I0
I00
Ntp2883
a(S'TIntList'
p2884
S'matchLeft'
p2885
S'match_left'
p2886
S'indices of examples that match the left side of the rule'
p2887
I01
I0
I00
Ntp2888
a(S'TIntList'
p2889
S'matchBoth'
p2890
S'match_both'
p2891
S'indices to examples that match both sides of the rule'
p2892
I01
I0
I00
Ntp2893
asg29
(dp2894
sbsS'TValueFilter'
p2895
(i__main__
ClassDefinition
p2896
(dp2897
g4
I1
sg5
I01
sg6
g2895
sg7
S'TOrange'
p2898
sg9
I01
sg10
(lp2899
sg12
(lp2900
g1061
ag1066
asg29
(dp2901
S'Operator'
p2902
(lp2903
(S'None'
p2904
I0
tp2905
a(S'Equal'
p2906
I1
tp2907
a(S'NotEqual'
p2908
I2
tp2909
a(S'Less'
p2910
I3
tp2911
a(S'LessEqual'
p2912
I4
tp2913
a(S'Greater'
p2914
I5
tp2915
a(S'GreaterEqual'
p2916
I6
tp2917
a(S'Between'
p2918
I7
tp2919
a(S'Outside'
p2920
I8
tp2921
a(S'Contains'
p2922
I9
tp2923
a(S'NotContains'
p2924
I10
tp2925
a(S'BeginsWith'
p2926
I11
tp2927
a(S'EndsWith'
p2928
I12
tp2929
a(S'Listed'
p2930
I13
tp2931
assbsS'TClustersFromDistributions'
p2932
(i__main__
ClassDefinition
p2933
(dp2934
g4
I1
sg5
I01
sg6
g2932
sg7
S'TOrange'
p2935
sg9
I01
sg10
(lp2936
sg12
(lp2937
sg29
(dp2938
sbsS'TVariable'
p2939
(i__main__
ClassDefinition
p2940
(dp2941
g4
I1
sg5
I01
sg6
g2939
sg7
S'TOrange'
p2942
sg9
I01
sg10
(lp2943
sg12
(lp2944
g333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp2945
S'Type'
p2946
(lp2947
(S'None'
p2948
S'(int)TValue::NONE'
p2949
tp2950
a(S'Discrete'
p2951
S'(int)TValue::INTVAR'
p2952
tp2953
a(S'Continuous'
p2954
S'(int)TValue::FLOATVAR'
p2955
tp2956
a(S'Other'
p2957
S'(int)(TValue::FLOATVAR+1)'
p2958
tp2959
a(S'String'
p2960
S'(int)STRINGVAR'
p2961
tp2962
asS'MakeStatus'
p2963
(lp2964
(S'OK'
p2965
I0
tp2966
a(S'MissingValues'
p2967
I1
tp2968
a(S'NoRecognizedValues'
p2969
I2
tp2970
a(S'Incompatible'
p2971
I3
tp2972
a(S'NotFound'
p2973
I4
tp2974
assbsS'TNoiseValuesGenerator'
p2975
(i__main__
ClassDefinition
p2976
(dp2977
g4
I1
sg5
I01
sg6
g2975
sg7
S'TChangeExampleGenerator'
p2978
sg9
I00
sg10
(lp2979
sg12
(lp2980
(S'TIntFloatList'
p2981
S'replaceProbabilities'
p2982
S'replace_probabilities'
p2983
S"probabilities for replacing attributes' values"
p2984
I0
I0
I00
Ntp2985
a(S'TRandomGenerator'
p2986
S'randomGenerator'
p2987
S'random_generator'
p2988
S'random generator'
p2989
I0
I0
I00
Ntp2990
ag306
ag310
asg29
(dp2991
sbsS'TC45TreeNodeList'
p2992
(ipyprops
ClassDefinition
p2993
(dp2994
g4
I0
sg5
I01
sg6
g2992
sg7
g143
sg9
I0
sg10
(lp2995
sg12
(lp2996
sg29
(dp2997
sbsS'TFilter_sameValue'
p2998
(i__main__
ClassDefinition
p2999
(dp3000
g4
I1
sg5
I01
sg6
g2998
sg7
S'TFilter'
p3001
sg9
I00
sg10
(lp3002
sg12
(lp3003
(S'int'
p3004
S'position'
p3005
g3005
S'position of the observed attribute'
p3006
I0
I0
I01
Ntp3007
a(S'TValue'
p3008
S'value'
p3009
g3009
S'value that the selected examples should have'
p3010
I0
I0
I01
Ntp3011
ag695
ag699
asg29
(dp3012
sbsS'TEquiNDiscretization'
p3013
(i__main__
ClassDefinition
p3014
(dp3015
g4
I1
sg5
I01
sg6
g3013
sg7
S'TDiscretization'
p3016
sg9
I00
sg10
(lp3017
sg12
(lp3018
(S'int'
p3019
S'numberOfIntervals'
p3020
(g3020
g1018
tp3021
S' number of intervals'
p3022
I0
I0
I01
Ntp3023
a(S'bool'
p3024
S'recursiveDivision'
p3025
S'recursive_division'
p3026
S'find cut-off points by recursive division (default = true)'
p3027
I0
I0
I01
Ntp3028
asg29
(dp3029
sbsS'TImputerConstructor_average'
p3030
(i__main__
ClassDefinition
p3031
(dp3032
g4
I1
sg5
I01
sg6
g3030
sg7
S'TImputerConstructor'
p3033
sg9
I00
sg10
(lp3034
sg12
(lp3035
g164
asg29
(dp3036
sbsS'TDomainBasicAttrStat'
p3037
(ipyprops
ClassDefinition
p3038
(dp3039
g4
I0
sg5
I01
sg6
S'TDomainBasicAttrStat'
p3040
sg7
g143
sg9
I0
sg10
(lp3041
sg12
(lp3042
sg29
(dp3043
sbsS'TStopDistributionClustering'
p3044
(i__main__
ClassDefinition
p3045
(dp3046
g4
I1
sg5
I01
sg6
g3044
sg7
S'TOrange'
p3047
sg9
I01
sg10
(lp3048
sg12
(lp3049
sg29
(dp3050
sbsS'TImputerConstructor_random'
p3051
(i__main__
ClassDefinition
p3052
(dp3053
g4
I1
sg5
I01
sg6
g3051
sg7
S'TImputerConstructor'
p3054
sg9
I00
sg10
(lp3055
sg12
(lp3056
(S'bool'
p3057
S'deterministic'
p3058
g3058
S"tells whether to initialize random by example's CRC (default: false)"
p3059
I0
I0
I01
Ntp3060
ag164
asg29
(dp3061
sbsS'TCostWrapperClassifier'
p3062
(i__main__
ClassDefinition
p3063
(dp3064
g4
I1
sg5
I01
sg6
g3062
sg7
S'TClassifier'
p3065
sg9
I00
sg10
(lp3066
sg12
(lp3067
(S'TClassifier'
p3068
S'classifier'
p3069
g3069
S'basic classifier'
p3070
I0
I0
I00
Ntp3071
a(S'TCostMatrix'
p3072
S'costMatrix'
p3073
S'cost_matrix'
p3074
S'cost matrix'
p3075
I0
I0
I00
Ntp3076
ag94
ag99
asg29
(dp3077
sbsS'TPreprocessor_ignore'
p3078
(i__main__
ClassDefinition
p3079
(dp3080
g4
I1
sg5
I01
sg6
g3078
sg7
S'TPreprocessor'
p3081
sg9
I00
sg10
(lp3082
sg12
(lp3083
(S'TVarList'
p3084
S'attributes'
p3085
g3085
S'tells which attributes to remove'
p3086
I0
I0
I00
Ntp3087
asg29
(dp3088
sbsS'TEVDist'
p3089
(i__main__
ClassDefinition
p3090
(dp3091
g4
I1
sg5
I01
sg6
g3089
sg7
S'TOrange'
p3092
sg9
I00
sg10
(lp3093
sg12
(lp3094
(S'float'
p3095
S'mu'
p3096
g3096
S'mu of Fisher-Tippett distribution'
p3097
I0
I0
I01
Ntp3098
a(S'float'
p3099
S'beta'
p3100
g3100
S'beta of Fisher-Tippett distribution'
p3101
I0
I0
I01
Ntp3102
a(S'TFloatList'
p3103
S'percentiles'
p3104
g3104
S'usually 10 values - 0 = 5th percentile, 1 = 15th percentile, 9 = 95th percentile, change maxPercentile and step for other settings'
p3105
I0
I0
I00
Ntp3106
a(S'float'
p3107
S'maxPercentile'
p3108
S'max_percentile'
p3109
S'maxPercentile Value, default 0.95'
p3110
I0
I0
I01
Ntp3111
a(S'float'
p3112
S'step'
p3113
g3113
S'step of percentiles, default 0.1'
p3114
I0
I0
I01
Ntp3115
asg29
(dp3116
sbsS'TMeasureAttribute_Python'
p3117
(i__main__
ClassDefinition
p3118
(dp3119
g4
I1
sg5
I01
sg6
g3117
sg7
S'TMeasureAttribute'
p3120
sg9
I00
sg10
(lp3121
sg12
(lp3122
g926
ag931
ag936
ag941
asg29
(dp3123
sbsS'TDistributionAssessor_Measure'
p3124
(i__main__
ClassDefinition
p3125
(dp3126
g4
I1
sg5
I01
sg6
g3124
sg7
S'TDistributionAssessor'
p3127
sg9
I00
sg10
(lp3128
sg12
(lp3129
(S'TMeasureAttribute'
p3130
S'measure'
p3131
g3131
S'attribute quality measure'
p3132
I0
I0
I00
Ntp3133
asg29
(dp3134
sbsS'TDistributionAssessor_m'
p3135
(i__main__
ClassDefinition
p3136
(dp3137
g4
I1
sg5
I01
sg6
g3135
sg7
S'TDistributionAssessor'
p3138
sg9
I00
sg10
(lp3139
sg12
(lp3140
(S'float'
p3141
g1212
g1212
S'm for m-estimate'
p3142
I0
I0
I01
Ntp3143
asg29
(dp3144
sbsS'TClassifierRandomGenerator'
p3145
(i__main__
ClassDefinition
p3146
(dp3147
g4
I1
sg5
I01
sg6
g3145
sg7
S'TExampleGenerator'
p3148
sg9
I00
sg10
(lp3149
sg12
(lp3150
(S'TClassifier'
p3151
S'classify'
p3152
g3152
S'classifier'
p3153
I0
I0
I00
Ntp3154
a(S'int'
p3155
S'noOfEx'
p3156
S'no_of_ex'
p3157
S'number of examples'
p3158
I0
I0
I01
Ntp3159
ag306
ag310
asg29
(dp3160
sbsS'TThresholdDiscretizer'
p3161
(i__main__
ClassDefinition
p3162
(dp3163
g4
I1
sg5
I01
sg6
g3161
sg7
S'TDiscretizer'
p3164
sg9
I00
sg10
(lp3165
sg12
(lp3166
(S'float'
p3167
S'threshold'
p3168
g3168
S'threshold'
p3169
I0
I0
I01
Ntp3170
ag824
asg29
(dp3171
sbsS'TPathfinder'
p3172
(i__main__
ClassDefinition
p3173
(dp3174
g4
I1
sg5
I0
sg6
g3172
sg7
S'TOrange'
p3175
sg9
I00
sg10
(lp3176
sg12
(lp3177
sg29
(dp3178
sbsS'TExampleTable'
p3179
(i__main__
ClassDefinition
p3180
(dp3181
g4
I1
sg5
I01
sg6
g3179
sg7
S'TExampleGenerator'
p3182
sg9
I00
sg10
(lp3183
sg12
(lp3184
(S'TRandomGenerator'
p3185
S'randomGenerator'
p3186
S'random_generator'
p3187
S'random generator used by randomExample'
p3188
I0
I0
I00
Ntp3189
a(S'TExampleGenerator'
p3190
S'lock'
p3191
(g3191
S'owner'
p3192
tp3193
S' the real owner of examples'
p3194
I01
I0
I00
Ntp3195
a(S'bool'
p3196
S'ownsExamples'
p3197
(g3197
S'owns_instances'
p3198
tp3199
S' if false, examples in this table are references to examples in another table'
p3200
I01
I0
I01
Ntp3201
ag306
ag310
asg29
(dp3202
sbsS'TEVDistGetter'
p3203
(i__main__
ClassDefinition
p3204
(dp3205
g4
I1
sg5
I01
sg6
g3203
sg7
S'TOrange'
p3206
sg9
I01
sg10
(lp3207
sg12
(lp3208
sg29
(dp3209
sbsS'TTreeSplitConstructor_Threshold'
p3210
(i__main__
ClassDefinition
p3211
(dp3212
g4
I1
sg5
I01
sg6
g3210
sg7
S'TTreeSplitConstructor_Measure'
p3213
sg9
I00
sg10
(lp3214
sg12
(lp3215
g1302
ag1307
ag787
asg29
(dp3216
sbsS'TMakeRandomIndicesN'
p3217
(i__main__
ClassDefinition
p3218
(dp3219
g4
I1
sg5
I01
sg6
g3217
sg7
S'TMakeRandomIndices'
p3220
sg9
I00
sg10
(lp3221
sg12
(lp3222
(S'TFloatList'
p3223
g2292
g2292
S'probabilities of indices (last is 1-sum(p))'
p3224
I0
I0
I00
Ntp3225
ag718
ag722
ag727
asg29
(dp3226
sbsS'TStopDistributionClustering_n'
p3227
(i__main__
ClassDefinition
p3228
(dp3229
g4
I1
sg5
I01
sg6
g3227
sg7
S'TStopDistributionClustering'
p3230
sg9
I00
sg10
(lp3231
sg12
(lp3232
(S'int'
p3233
g1018
g1018
S'number of clusters'
p3234
I0
I0
I01
Ntp3235
asg29
(dp3236
sbsS'TTreeExampleSplitter_UnknownsAsSelector'
p3237
(i__main__
ClassDefinition
p3238
(dp3239
g4
I1
sg5
I01
sg6
g3237
sg7
S'TTreeExampleSplitter'
p3240
sg9
I00
sg10
(lp3241
sg12
(lp3242
sg29
(dp3243
sbsS'TClassifier_Python'
p3244
(i__main__
ClassDefinition
p3245
(dp3246
g4
I1
sg5
I01
sg6
g3244
sg7
S'TClassifier'
p3247
sg9
I00
sg10
(lp3248
sg12
(lp3249
g94
ag99
asg29
(dp3250
sbsS'TSgnRelStress'
p3251
(i__main__
ClassDefinition
p3252
(dp3253
g4
I1
sg5
I0
sg6
g3251
sg7
S'TStressFunc'
p3254
sg9
I00
sg10
(lp3255
sg12
(lp3256
sg29
(dp3257
sbsS'TFilter_isDefined'
p3258
(i__main__
ClassDefinition
p3259
(dp3260
g4
I1
sg5
I01
sg6
g3258
sg7
S'TFilter'
p3261
sg9
I00
sg10
(lp3262
sg12
(lp3263
(S'TAttributedBoolList'
p3264
S'check'
p3265
g3265
S'tells which attributes to check; checks all if the list is empty'
p3266
I0
I0
I00
Ntp3267
ag695
ag699
asg29
(dp3268
sbsS'TRemoveRedundantByQuality'
p3269
(i__main__
ClassDefinition
p3270
(dp3271
g4
I1
sg5
I01
sg6
g3269
sg7
S'TRemoveRedundant'
p3272
sg9
I00
sg10
(lp3273
sg12
(lp3274
(S'bool'
p3275
S'remeasure'
p3276
g3276
S'reapply the measure after removal'
p3277
I0
I0
I01
Ntp3278
a(S'float'
p3279
S'minQuality'
p3280
S'min_quality'
p3281
S'minimal acceptable quality'
p3282
I0
I0
I01
Ntp3283
a(S'int'
p3284
S'removeBut'
p3285
S'remove_but'
p3286
S'the desired number of attributes'
p3287
I0
I0
I01
Ntp3288
a(S'TMeasureAttribute'
p3289
S'measure'
p3290
g3290
S'attribute quality measure'
p3291
I0
I0
I00
Ntp3292
ag1345
asg29
(dp3293
sbsS'TGraphAsList'
p3294
(i__main__
ClassDefinition
p3295
(dp3296
g4
I1
sg5
I01
sg6
g3294
sg7
S'TGraph'
p3297
sg9
I00
sg10
(lp3298
sg12
(lp3299
g1490
ag1495
ag1499
asg29
(dp3300
sbsS'TProbabilityEstimatorConstructor_m'
p3301
(i__main__
ClassDefinition
p3302
(dp3303
g4
I1
sg5
I01
sg6
g3301
sg7
S'TProbabilityEstimatorConstructor'
p3304
sg9
I00
sg10
(lp3305
sg12
(lp3306
(S'float'
p3307
g1212
g1212
S'parameter m for m-estimation'
p3308
I0
I0
I01
Ntp3309
a(S'bool'
p3310
S'renormalize'
p3311
g3311
S'computes the estimate on the original (not the normalized) distribution'
p3312
I0
I0
I01
Ntp3313
asg29
(dp3314
sbsS'TDistanceMap'
p3315
(i__main__
ClassDefinition
p3316
(dp3317
g4
I1
sg5
I01
sg6
g3315
sg7
S'TOrange'
p3318
sg9
I00
sg10
(lp3319
sg12
(lp3320
(S'int'
p3321
S'dim'
p3322
g3322
S'bitmap dimension (in cells)'
p3323
I01
I0
I01
Ntp3324
a(S'int'
p3325
S'matrixType'
p3326
S'matrix_type'
p3327
S'0 lower, 1 upper, 2 symmetric'
p3328
I0
I0
I01
Ntp3329
a(S'TIntList'
p3330
S'elementIndices'
p3331
S'element_indices'
p3332
S'indices to elements (one for row + one at the end)'
p3333
I01
I0
I00
Ntp3334
asg29
(dp3335
sbsS'TDistanceMapConstructor'
p3336
(i__main__
ClassDefinition
p3337
(dp3338
g4
I1
sg5
I01
sg6
g3336
sg7
S'TOrange'
p3339
sg9
I00
sg10
(lp3340
sg12
(lp3341
(S'TSymMatrix'
p3342
S'distanceMatrix'
p3343
S'distance_matrix'
p3344
S'distance matrix'
p3345
I0
I0
I00
Ntp3346
a(S'TIntList'
p3347
S'order'
p3348
g3348
S'order of elements'
p3349
I0
I0
I00
Ntp3350
asg29
(dp3351
sbsS'TTransformValue'
p3352
(i__main__
ClassDefinition
p3353
(dp3354
g4
I1
sg5
I01
sg6
g3352
sg7
S'TOrange'
p3355
sg9
I01
sg10
(lp3356
sg12
(lp3357
g824
asg29
(dp3358
sbsS'TComputeDomainContingency_DomainTransformation'
p3359
(i__main__
ClassDefinition
p3360
(dp3361
g4
I1
sg5
I01
sg6
g3359
sg7
S'TComputeDomainContingency'
p3362
sg9
I00
sg10
(lp3363
sg12
(lp3364
(S'TDomainTransformerConstructor'
p3365
S'domainTransformerConstructor'
p3366
S'domain_transformer_constructor'
p3367
S'constructs a domain in which each attribute corresponds one of originals'
p3368
I0
I0
I00
Ntp3369
a(S'bool'
p3370
S'resultInOriginalDomain'
p3371
S'result_in_original_domain'
p3372
S'tells whether the resulting DomainContingency should consist of original attributes'
p3373
I0
I0
I01
Ntp3374
ag28
asg29
(dp3375
sbsS'TStopDistributionClustering_noBigChange'
p3376
(i__main__
ClassDefinition
p3377
(dp3378
g4
I1
sg5
I01
sg6
g3376
sg7
S'TStopDistributionClustering'
p3379
sg9
I00
sg10
(lp3380
sg12
(lp3381
sg29
(dp3382
sbsS'TTreePruner'
p3383
(i__main__
ClassDefinition
p3384
(dp3385
g4
I1
sg5
I01
sg6
g3383
sg7
S'TOrange'
p3386
sg9
I01
sg10
(lp3387
sg12
(lp3388
sg29
(dp3389
sbsg1830
(ipyprops
ClassDefinition
p3390
(dp3391
g4
I0
sg5
I01
sg6
g1830
sg7
g143
sg9
I0
sg10
(lp3392
sg12
(lp3393
sg29
(dp3394
sbsS'TStringValue'
p3395
(i__main__
ClassDefinition
p3396
(dp3397
g4
I1
sg5
I01
sg6
g3395
sg7
S'TSomeValue'
p3398
sg9
I00
sg10
(lp3399
sg12
(lp3400
sg29
(dp3401
sbsS'TVarList'
p3402
(ipyprops
ClassDefinition
p3403
(dp3404
g4
I0
sg5
I01
sg6
g3402
sg7
g143
sg9
I0
sg10
(lp3405
sg12
(lp3406
sg29
(dp3407
sbsS'TRuleLearner'
p3408
(i__main__
ClassDefinition
p3409
(dp3410
g4
I1
sg5
I01
sg6
g3408
sg7
S'TLearner'
p3411
sg9
I00
sg10
(lp3412
sg12
(lp3413
(S'TRuleDataStoppingCriteria'
p3414
S'dataStopping'
p3415
S'data_stopping'
p3416
g573
I0
I0
I00
Ntp3417
a(S'TRuleStoppingCriteria'
p3418
S'ruleStopping'
p3419
S'rule_stopping'
p3420
g573
I0
I0
I00
Ntp3421
a(S'TRuleCovererAndRemover'
p3422
S'coverAndRemove'
p3423
S'cover_and_remove'
p3424
g573
I0
I0
I00
Ntp3425
a(S'TRuleFinder'
p3426
S'ruleFinder'
p3427
S'rule_finder'
p3428
g573
I0
I0
I00
Ntp3429
a(S'TRuleClassifierConstructor'
p3430
S'classifierConstructor'
p3431
S'classifier_constructor'
p3432
S'classifier'
p3433
I0
I0
I00
Ntp3434
a(S'TProgressCallback'
p3435
S'progressCallback'
p3436
S'progress_callback'
p3437
S'progress callback function'
p3438
I0
I0
I00
Ntp3439
a(S'bool'
p3440
S'storeExamples'
p3441
S'store_examples'
p3442
g573
I0
I0
I01
Ntp3443
a(S'int'
p3444
S'targetClass'
p3445
S'target_class'
p3446
g573
I0
I0
I01
Ntp3447
a(S'TRuleList'
p3448
S'baseRules'
p3449
S'base_rules'
p3450
g573
I0
I0
I00
Ntp3451
ag110
asg29
(dp3452
sbsS'TOrdinal2Continuous'
p3453
(i__main__
ClassDefinition
p3454
(dp3455
g4
I1
sg5
I01
sg6
g3453
sg7
S'TTransformValue'
p3456
sg9
I00
sg10
(lp3457
sg12
(lp3458
(S'float'
p3459
S'factor'
p3460
g3460
S'number of values'
p3461
I0
I0
I01
Ntp3462
ag824
asg29
(dp3463
sbsS'TMultiLearner'
p3464
(i__main__
ClassDefinition
p3465
(dp3466
g4
I1
sg5
I01
sg6
g3464
sg7
S'TOrange'
p3467
sg9
I00
sg10
(lp3468
sg12
(lp3469
(S'int'
p3470
S'needs'
p3471
g3471
S'the kind of data that learner needs'
p3472
I01
I0
I01
Ntp3473
a(S'TDomain'
p3474
S'domain'
p3475
g3475
S'domain'
p3476
I0
I0
I00
Ntp3477
asg29
(dp3478
sbsS'TLinearLearner'
p3479
(i__main__
ClassDefinition
p3480
(dp3481
g4
I1
sg5
I01
sg6
g3479
sg7
S'TLearner'
p3482
sg9
I00
sg10
(lp3483
sg12
(lp3484
(S'int'
p3485
S'solver_type'
p3486
g3486
S' Solver type (loss function1)'
p3487
I0
I0
I01
S'LinearLearner_Lossfunction1'
p3488
tp3489
a(S'float'
p3490
S'eps'
p3491
g3491
S'Stopping criteria'
p3492
I0
I0
I01
Ntp3493
a(S'float'
p3494
S'C'
p3495
g3495
S'Regularization parameter'
p3496
I0
I0
I01
Ntp3497
a(S'float'
p3498
S'bias'
p3499
g3499
S'bias parameter (default -1.0 - no bias)'
p3500
I0
I0
I01
Ntp3501
ag110
asg29
(dp3502
S'LIBLINEAR_VERSION'
p3503
(lp3504
(S'VERSION'
p3505
S'180'
p3506
tp3507
asS'Lossfunction1'
p3508
(lp3509
(S'L2R_LR'
p3510
I0
tp3511
a(S'L2R_L2Loss_SVC_Dual'
p3512
I1
tp3513
a(S'L2R_L2Loss_SVC'
p3514
I2
tp3515
a(S'L2R_L1Loss_SVC_Dual'
p3516
I3
tp3517
a(S'MCSVM_CS'
p3518
I4
tp3519
a(S'L1R_L2Loss_SVC'
p3520
I5
tp3521
a(S'L1R_LR'
p3522
I6
tp3523
a(S'L2R_LR_Dual'
p3524
I7
tp3525
asS'Lossfunction1_old_'
p3526
(lp3527
(S'L2_LR'
p3528
I0
tp3529
a(S'L2Loss_SVM_Dual'
p3530
I1
tp3531
a(S'L2Loss_SVM'
p3532
I2
tp3533
a(S'L1Loss_SVM_Dual'
p3534
I3
tp3535
assbsS'TTreeSplitConstructor_Combined'
p3536
(i__main__
ClassDefinition
p3537
(dp3538
g4
I1
sg5
I01
sg6
g3536
sg7
S'TTreeSplitConstructor'
p3539
sg9
I00
sg10
(lp3540
sg12
(lp3541
(S'TTreeSplitConstructor'
p3542
S'discreteSplitConstructor'
p3543
S'discrete_split_constructor'
p3544
S'split constructor for discrete attributes'
p3545
I0
I0
I00
Ntp3546
a(S'TTreeSplitConstructor'
p3547
S'continuousSplitConstructor'
p3548
S'continuous_split_constructor'
p3549
S'split constructor for continuous attributes'
p3550
I0
I0
I00
Ntp3551
ag787
asg29
(dp3552
sbsS'TTransformValue_Python'
p3553
(i__main__
ClassDefinition
p3554
(dp3555
g4
I1
sg5
I01
sg6
g3553
sg7
S'TTransformValue'
p3556
sg9
I00
sg10
(lp3557
sg12
(lp3558
g824
asg29
(dp3559
sbsS'TRuleStoppingCriteria_Python'
p3560
(i__main__
ClassDefinition
p3561
(dp3562
g4
I1
sg5
I01
sg6
g3560
sg7
S'TRuleStoppingCriteria'
p3563
sg9
I00
sg10
(lp3564
sg12
(lp3565
sg29
(dp3566
sbsS'TRuleEvaluator_Python'
p3567
(i__main__
ClassDefinition
p3568
(dp3569
g4
I1
sg5
I01
sg6
g3567
sg7
S'TRuleEvaluator'
p3570
sg9
I00
sg10
(lp3571
sg12
(lp3572
sg29
(dp3573
sbsS'TIGBySorting'
p3574
(i__main__
ClassDefinition
p3575
(dp3576
g4
I1
sg5
I01
sg6
g3574
sg7
S'TIGConstructor'
p3577
sg9
I00
sg10
(lp3578
sg12
(lp3579
sg29
(dp3580
sbsS'TConditionalProbabilityEstimator_ByRows'
p3581
(i__main__
ClassDefinition
p3582
(dp3583
g4
I1
sg5
I01
sg6
g3581
sg7
S'TConditionalProbabilityEstimator'
p3584
sg9
I00
sg10
(lp3585
sg12
(lp3586
(S'TProbabilityEstimatorList'
p3587
S'estimatorList'
p3588
S'estimator_list'
p3589
S'A list of probability estimators'
p3590
I0
I0
I00
Ntp3591
ag133
ag138
asg29
(dp3592
sbsS'TFindNearest'
p3593
(i__main__
ClassDefinition
p3594
(dp3595
g4
I1
sg5
I01
sg6
g3593
sg7
S'TOrange'
p3596
sg9
I01
sg10
(lp3597
sg12
(lp3598
g1091
ag1096
asg29
(dp3599
sbsS'TProgressCallback'
p3600
(i__main__
ClassDefinition
p3601
(dp3602
g4
I1
sg5
I01
sg6
g3600
sg7
S'TOrange'
p3603
sg9
I01
sg10
(lp3604
sg12
(lp3605
sg29
(dp3606
sbsS'THierarchicalClustering'
p3607
(i__main__
ClassDefinition
p3608
(dp3609
g4
I1
sg5
I01
sg6
g3607
sg7
S'TOrange'
p3610
sg9
I00
sg10
(lp3611
sg12
(lp3612
(S'int'
p3613
S'linkage'
p3614
g3614
S' linkage'
p3615
I0
I0
I01
S'HierarchicalClustering_Linkage'
p3616
tp3617
a(S'bool'
p3618
S'overwriteMatrix'
p3619
S'overwrite_matrix'
p3620
S'if true (default is false) it will use (and destroy) the distance matrix given as argument'
p3621
I0
I0
I01
Ntp3622
a(S'TProgressCallback'
p3623
S'progressCallback'
p3624
S'progress_callback'
p3625
S'progress callback function'
p3626
I0
I0
I00
Ntp3627
asg29
(dp3628
S'Linkage'
p3629
(lp3630
(S'Single'
p3631
I0
tp3632
a(S'Average'
p3633
I1
tp3634
a(S'Complete'
p3635
I2
tp3636
a(S'Ward'
p3637
I3
tp3638
assbsS'TLogRegFitter_Cholesky'
p3639
(i__main__
ClassDefinition
p3640
(dp3641
g4
I1
sg5
I01
sg6
g3639
sg7
S'TLogRegFitter'
p3642
sg9
I00
sg10
(lp3643
sg12
(lp3644
sg29
(dp3645
sbsS'TClassifierFromVar'
p3646
(i__main__
ClassDefinition
p3647
(dp3648
g4
I1
sg5
I01
sg6
g3646
sg7
S'TClassifier'
p3649
sg9
I00
sg10
(lp3650
sg12
(lp3651
(S'TVariable'
p3652
S'whichVar'
p3653
(g3653
S'variable'
p3654
tp3655
S' variable'
p3656
I0
I0
I00
Ntp3657
a(S'TTransformValue'
p3658
S'transformer'
p3659
g3659
S'transformer'
p3660
I0
I0
I00
Ntp3661
a(S'TDistribution'
p3662
S'distributionForUnknown'
p3663
S'distribution_for_unknown'
p3664
S'distribution for unknown value'
p3665
I0
I0
I00
Ntp3666
a(S'bool'
p3667
S'transformUnknowns'
p3668
S'transform_unknowns'
p3669
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p3670
I0
I0
I01
Ntp3671
ag94
ag99
asg29
(dp3672
sbsg2348
(ipyprops
ClassDefinition
p3673
(dp3674
g4
I0
sg5
I01
sg6
g2348
sg7
g143
sg9
I0
sg10
(lp3675
sg12
(lp3676
sg29
(dp3677
sbsS'TFilter_index'
p3678
(ipyprops
ClassDefinition
p3679
(dp3680
g4
I0
sg5
I01
sg6
g3678
sg7
g143
sg9
I0
sg10
(lp3681
sg12
(lp3682
sg29
(dp3683
sbsS'TIM'
p3684
(i__main__
ClassDefinition
p3685
(dp3686
g4
I1
sg5
I01
sg6
g3684
sg7
S'TOrange'
p3687
sg9
I00
sg10
(lp3688
sg12
(lp3689
(S'int'
p3690
S'varType'
p3691
S'var_type'
p3692
S' class variable type'
p3693
I0
I0
I01
S'Variable_Type'
p3694
tp3695
a(S'TExampleTable'
p3696
S'rowExamples'
p3697
S'row_examples'
p3698
S'examples with free attributes for each row'
p3699
I0
I0
I00
Ntp3700
asg29
(dp3701
sbsS'TTreeSplitConstructor_OneAgainstOthers'
p3702
(i__main__
ClassDefinition
p3703
(dp3704
g4
I1
sg5
I01
sg6
g3702
sg7
S'TTreeSplitConstructor_Measure'
p3705
sg9
I00
sg10
(lp3706
sg12
(lp3707
g1302
ag1307
ag787
asg29
(dp3708
sbsS'TClassifier'
p3709
(i__main__
ClassDefinition
p3710
(dp3711
g4
I1
sg5
I01
sg6
g3709
sg7
S'TOrange'
p3712
sg9
I00
sg10
(lp3713
sg12
(lp3714
g94
ag99
asg29
(dp3715
sbsS'TTreeSplitConstructor_Python'
p3716
(i__main__
ClassDefinition
p3717
(dp3718
g4
I1
sg5
I01
sg6
g3716
sg7
S'TTreeSplitConstructor'
p3719
sg9
I00
sg10
(lp3720
sg12
(lp3721
g787
asg29
(dp3722
sbsS'TIG'
p3723
(i__main__
ClassDefinition
p3724
(dp3725
g4
I1
sg5
I01
sg6
g3723
sg7
S'TOrange'
p3726
sg9
I00
sg10
(lp3727
sg12
(lp3728
sg29
(dp3729
sbsS'TMeasureAttribute_relief'
p3730
(i__main__
ClassDefinition
p3731
(dp3732
g4
I1
sg5
I01
sg6
g3730
sg7
S'TMeasureAttribute'
p3733
sg9
I00
sg10
(lp3734
sg12
(lp3735
(S'float'
p3736
g1208
g1208
S'number of neighbours'
p3737
I0
I0
I01
Ntp3738
a(S'float'
p3739
g1212
g1212
S'number of reference examples'
p3740
I0
I0
I01
Ntp3741
a(S'bool'
p3742
S'checkCachedData'
p3743
S'check_cached_data'
p3744
S'tells whether to check the checksum of the data before reusing the cached neighbours'
p3745
I0
I0
I01
Ntp3746
ag926
ag931
ag936
ag941
asg29
(dp3747
sbsS'TEarthLearner'
p3748
(i__main__
ClassDefinition
p3749
(dp3750
g4
I1
sg5
I01
sg6
g3748
sg7
S'TLearner'
p3751
sg9
I00
sg10
(lp3752
sg12
(lp3753
(S'int'
p3754
S'max_terms'
p3755
g3755
S'Maximum number of terms.'
p3756
I0
I0
I01
Ntp3757
a(S'int'
p3758
S'max_degree'
p3759
g3759
S'Maximum degree of terms.'
p3760
I0
I0
I01
Ntp3761
a(S'float'
p3762
S'penalty'
p3763
g3763
S'Penalty.'
p3764
I0
I0
I01
Ntp3765
a(S'float'
p3766
S'threshold'
p3767
g3767
S'Forward step threshold.'
p3768
I0
I0
I01
Ntp3769
a(S'bool'
p3770
S'prune'
p3771
g3771
S'Prune terms (do backward pass).'
p3772
I0
I0
I01
Ntp3773
a(S'float'
p3774
S'fast_beta'
p3775
g3775
S'Fast beta (aging coefficient).'
p3776
I0
I0
I01
Ntp3777
a(S'float'
p3778
S'trace'
p3779
g3779
S'Execution trace (for debugging only).'
p3780
I0
I0
I01
Ntp3781
a(S'int'
p3782
S'min_span'
p3783
g3783
S'Min. span (training instances) between knots.'
p3784
I0
I0
I01
Ntp3785
a(S'int'
p3786
S'fast_k'
p3787
g3787
S'Fast K.'
p3788
I0
I0
I01
Ntp3789
a(S'bool'
p3790
S'new_var_penalty'
p3791
g3791
S'Penalty for adding a new variable.'
p3792
I0
I0
I01
Ntp3793
a(S'bool'
p3794
S'use_beta_cache'
p3795
g3795
S'Use caching for betas.'
p3796
I0
I0
I01
Ntp3797
ag110
asg29
(dp3798
sbsS'TMeasureAttribute_logOddsRatio'
p3799
(i__main__
ClassDefinition
p3800
(dp3801
g4
I1
sg5
I01
sg6
g3799
sg7
S'TMeasureAttributeFromProbabilities'
p3802
sg9
I00
sg10
(lp3803
sg12
(lp3804
g910
ag915
ag921
ag926
ag931
ag936
ag941
asg29
(dp3805
sbsS'TTreeExampleSplitter_Python'
p3806
(i__main__
ClassDefinition
p3807
(dp3808
g4
I1
sg5
I01
sg6
g3806
sg7
S'TTreeExampleSplitter'
p3809
sg9
I00
sg10
(lp3810
sg12
(lp3811
sg29
(dp3812
sbsS'TKernelFunc_Python'
p3813
(i__main__
ClassDefinition
p3814
(dp3815
g4
I1
sg5
I01
sg6
g3813
sg7
S'TKernelFunc'
p3816
sg9
I00
sg10
(lp3817
sg12
(lp3818
sg29
(dp3819
sbsS'TAdapterGenerator'
p3820
(i__main__
ClassDefinition
p3821
(dp3822
g4
I1
sg5
I01
sg6
g3820
sg7
S'TExampleGenerator'
p3823
sg9
I00
sg10
(lp3824
sg12
(lp3825
g306
ag310
asg29
(dp3826
sbsS'TIMFromExamples'
p3827
(i__main__
ClassDefinition
p3828
(dp3829
g4
I1
sg5
I01
sg6
g3827
sg7
S'TOrange'
p3830
sg9
I01
sg10
(lp3831
sg12
(lp3832
sg29
(dp3833
sbsS'TFilter_random'
p3834
(i__main__
ClassDefinition
p3835
(dp3836
g4
I1
sg5
I01
sg6
g3834
sg7
S'TFilter'
p3837
sg9
I00
sg10
(lp3838
sg12
(lp3839
(S'float'
p3840
S'prob'
p3841
g3841
S'probability of selecting an example'
p3842
I0
I0
I01
Ntp3843
a(S'TRandomGenerator'
p3844
S'randomGenerator'
p3845
S'random_generator'
p3846
S'random generator'
p3847
I0
I0
I00
Ntp3848
ag695
ag699
asg29
(dp3849
sbsS'TC45ExampleGenerator'
p3850
(i__main__
ClassDefinition
p3851
(dp3852
g4
I1
sg5
I01
sg6
g3850
sg7
S'TFileExampleGenerator'
p3853
sg9
I00
sg10
(lp3854
sg12
(lp3855
(S'TBoolList'
p3856
S'skip'
p3857
g3857
S'a boolean list, one element per attribute, denoting which attributes to skip'
p3858
I0
I0
I00
Ntp3859
ag1655
ag1660
ag1665
ag306
ag310
asg29
(dp3860
sbsS'TProbabilityEstimatorConstructor_loess'
p3861
(i__main__
ClassDefinition
p3862
(dp3863
g4
I1
sg5
I01
sg6
g3861
sg7
S'TProbabilityEstimatorConstructor'
p3864
sg9
I00
sg10
(lp3865
sg12
(lp3866
(S'float'
p3867
S'windowProportion'
p3868
S'window_proportion'
p3869
S'The proportion of points in a window for LR'
p3870
I0
I0
I01
Ntp3871
a(S'int'
p3872
S'nPoints'
p3873
S'n_points'
p3874
S'The number of points on curve (negative means the given number of points is inserted in each interval)'
p3875
I0
I0
I01
Ntp3876
a(S'int'
p3877
S'distributionMethod'
p3878
S'distribution_method'
p3879
S" Meaning of the 'nPoints'"
p3880
I0
I0
I01
S'ProbabilityEstimatorConstructor_loess_DistributionMethod'
p3881
tp3882
asg29
(dp3883
S'DistributionMethod'
p3884
(lp3885
(S'Minimal'
p3886
S'DISTRIBUTE_MINIMAL'
p3887
tp3888
a(S'Factor'
p3889
S'DISTRIBUTE_FACTOR'
p3890
tp3891
a(S'Fixed'
p3892
S'DISTRIBUTE_FIXED'
p3893
tp3894
a(S'Uniform'
p3895
S'DISTRIBUTE_UNIFORM'
p3896
tp3897
a(S'Maximal'
p3898
S'DISTRIBUTE_MAXIMAL'
p3899
tp3900
assbsS'TExamplesDistance_Lp'
p3901
(i__main__
ClassDefinition
p3902
(dp3903
g4
I1
sg5
I01
sg6
g3901
sg7
S'TExamplesDistance_Normalized'
p3904
sg9
I00
sg10
(lp3905
sg12
(lp3906
(S'float'
p3907
g2292
g2292
g2292
I01
I0
I01
Ntp3908
ag454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp3909
sbsS'TLogRegFitter'
p3910
(i__main__
ClassDefinition
p3911
(dp3912
g4
I1
sg5
I01
sg6
g3910
sg7
S'TOrange'
p3913
sg9
I01
sg10
(lp3914
sg12
(lp3915
sg29
(dp3916
S'ErrorCode'
p3917
(lp3918
(S'OK'
p3919
I0
tp3920
a(S'Infinity'
p3921
I1
tp3922
a(S'Divergence'
p3923
I2
tp3924
a(S'Constant'
p3925
I3
tp3926
a(S'Singularity'
p3927
I4
tp3928
assbsS'TProbabilityEstimatorList'
p3929
(ipyprops
ClassDefinition
p3930
(dp3931
g4
I0
sg5
I01
sg6
g3929
sg7
g143
sg9
I0
sg10
(lp3932
sg12
(lp3933
sg29
(dp3934
sbsS'TMakeRandomIndicesCV'
p3935
(i__main__
ClassDefinition
p3936
(dp3937
g4
I1
sg5
I01
sg6
g3935
sg7
S'TMakeRandomIndices'
p3938
sg9
I00
sg10
(lp3939
sg12
(lp3940
(S'int'
p3941
S'folds'
p3942
g3942
S'number of folds'
p3943
I0
I0
I01
Ntp3944
ag718
ag722
ag727
asg29
(dp3945
sbsS'TClassifierList'
p3946
(ipyprops
ClassDefinition
p3947
(dp3948
g4
I0
sg5
I01
sg6
g3946
sg7
g143
sg9
I0
sg10
(lp3949
sg12
(lp3950
sg29
(dp3951
sbsS'TPreprocessor_removeDuplicates'
p3952
(i__main__
ClassDefinition
p3953
(dp3954
g4
I1
sg5
I01
sg6
g3952
sg7
S'TPreprocessor'
p3955
sg9
I00
sg10
(lp3956
sg12
(lp3957
sg29
(dp3958
sbsS'TTreeExampleSplitter_UnknownsAsBranchSizes'
p3959
(i__main__
ClassDefinition
p3960
(dp3961
g4
I1
sg5
I01
sg6
g3959
sg7
S'TTreeExampleSplitter'
p3962
sg9
I00
sg10
(lp3963
sg12
(lp3964
sg29
(dp3965
sbsS'TExamplesDistanceConstructor_Normalized'
p3966
(i__main__
ClassDefinition
p3967
(dp3968
g4
I1
sg5
I01
sg6
g3966
sg7
S'TExamplesDistanceConstructor'
p3969
sg9
I01
sg10
(lp3970
sg12
(lp3971
g2125
ag2130
ag1367
asg29
(dp3972
sbsS'TCostWrapperLearner'
p3973
(i__main__
ClassDefinition
p3974
(dp3975
g4
I1
sg5
I01
sg6
g3973
sg7
S'TLearner'
p3976
sg9
I00
sg10
(lp3977
sg12
(lp3978
(S'TLearner'
p3979
S'basicLearner'
p3980
S'basic_learner'
p3981
S'basic learner'
p3982
I0
I0
I00
Ntp3983
a(S'TCostMatrix'
p3984
S'costMatrix'
p3985
S'cost_matrix'
p3986
S'cost matrix'
p3987
I0
I0
I00
Ntp3988
ag110
asg29
(dp3989
sbsS'TRandomLearner'
p3990
(i__main__
ClassDefinition
p3991
(dp3992
g4
I1
sg5
I01
sg6
g3990
sg7
S'TLearner'
p3993
sg9
I00
sg10
(lp3994
sg12
(lp3995
(S'TDistribution'
p3996
S'probabilities'
p3997
g3997
S'probabilities of predictions'
p3998
I0
I0
I00
Ntp3999
ag110
asg29
(dp4000
sbsS'TImputer_asValue'
p4001
(i__main__
ClassDefinition
p4002
(dp4003
g4
I1
sg5
I01
sg6
g4001
sg7
S'TImputer'
p4004
sg9
I00
sg10
(lp4005
sg12
(lp4006
(S'TDomain'
p4007
S'domain'
p4008
g4008
S'domain to which the values are converted'
p4009
I0
I0
I00
Ntp4010
a(S'TExample'
p4011
S'defaults'
p4012
g4012
S'values to impute instead of missing ones - for continuous attributes only!'
p4013
I0
I0
I00
Ntp4014
asg29
(dp4015
sbsS'TPearsonCorrelation'
p4016
(i__main__
ClassDefinition
p4017
(dp4018
g4
I1
sg5
I01
sg6
g4016
sg7
S'TOrange'
p4019
sg9
I00
sg10
(lp4020
sg12
(lp4021
(S'float'
p4022
S'r'
p4023
g4023
S'correlation coefficient'
p4024
I0
I0
I01
Ntp4025
a(S'float'
p4026
g2321
g2321
S't-statics significance'
p4027
I0
I0
I01
Ntp4028
a(S'int'
p4029
S'df'
p4030
g4030
S'degrees of freedom'
p4031
I0
I0
I01
Ntp4032
a(S'float'
p4033
g2292
g2292
S'significance'
p4034
I0
I0
I01
Ntp4035
asg29
(dp4036
sbsS'TDistributionAssessor_Laplace'
p4037
(i__main__
ClassDefinition
p4038
(dp4039
g4
I1
sg5
I01
sg6
g4037
sg7
S'TDistributionAssessor'
p4040
sg9
I00
sg10
(lp4041
sg12
(lp4042
sg29
(dp4043
sbsS'TColumnAssessor_Relief'
p4044
(i__main__
ClassDefinition
p4045
(dp4046
g4
I1
sg5
I01
sg6
g4044
sg7
S'TColumnAssessor'
p4047
sg9
I00
sg10
(lp4048
sg12
(lp4049
sg29
(dp4050
sbsS'TClassifierByLookupTable'
p4051
(i__main__
ClassDefinition
p4052
(dp4053
g4
I1
sg5
I01
sg6
g4051
sg7
S'TClassifier'
p4054
sg9
I01
sg10
(lp4055
sg12
(lp4056
g85
ag89
ag94
ag99
asg29
(dp4057
sbsS'TRuleBeamFinder'
p4058
(i__main__
ClassDefinition
p4059
(dp4060
g4
I1
sg5
I01
sg6
g4058
sg7
S'TRuleFinder'
p4061
sg9
I00
sg10
(lp4062
sg12
(lp4063
(S'TRuleBeamInitializer'
p4064
S'initializer'
p4065
g4065
g573
I0
I0
I00
Ntp4066
a(S'TRuleBeamRefiner'
p4067
S'refiner'
p4068
g4068
g573
I0
I0
I00
Ntp4069
a(S'TRuleBeamCandidateSelector'
p4070
S'candidateSelector'
p4071
S'candidate_selector'
p4072
g573
I0
I0
I00
Ntp4073
a(S'TRuleBeamFilter'
p4074
S'ruleFilter'
p4075
S'rule_filter'
p4076
g573
I0
I0
I00
Ntp4077
a(S'TRuleValidator'
p4078
S'ruleStoppingValidator'
p4079
S'rule_stopping_validator'
p4080
g573
I0
I0
I00
Ntp4081
a(S'TRuleValidator'
p4082
S'validator'
p4083
g4083
g573
I0
I0
I00
Ntp4084
a(S'TRuleEvaluator'
p4085
S'evaluator'
p4086
g4086
g573
I0
I0
I00
Ntp4087
asg29
(dp4088
sbsS'TC45Classifier'
p4089
(i__main__
ClassDefinition
p4090
(dp4091
g4
I1
sg5
I01
sg6
g4089
sg7
S'TClassifierFD'
p4092
sg9
I00
sg10
(lp4093
sg12
(lp4094
(S'TC45TreeNode'
p4095
S'tree'
p4096
g4096
S'tree'
p4097
I0
I0
I00
Ntp4098
ag291
ag94
ag99
asg29
(dp4099
sbsS'TGeneralExampleClustering'
p4100
(i__main__
ClassDefinition
p4101
(dp4102
g4
I1
sg5
I01
sg6
g4100
sg7
S'TOrange'
p4103
sg9
I01
sg10
(lp4104
sg12
(lp4105
sg29
(dp4106
sbsS'TMeasureAttribute_cost'
p4107
(i__main__
ClassDefinition
p4108
(dp4109
g4
I1
sg5
I01
sg6
g4107
sg7
S'TMeasureAttributeFromProbabilities'
p4110
sg9
I00
sg10
(lp4111
sg12
(lp4112
(S'TCostMatrix'
p4113
S'cost'
p4114
g4114
S'cost matrix'
p4115
I0
I0
I00
Ntp4116
ag910
ag915
ag921
ag926
ag931
ag936
ag941
asg29
(dp4117
sbsS'TImputerConstructor_minimal'
p4118
(i__main__
ClassDefinition
p4119
(dp4120
g4
I1
sg5
I01
sg6
g4118
sg7
S'TImputerConstructor'
p4121
sg9
I00
sg10
(lp4122
sg12
(lp4123
g164
asg29
(dp4124
sbsS'TClustersFromIM'
p4125
(i__main__
ClassDefinition
p4126
(dp4127
g4
I1
sg5
I01
sg6
g4125
sg7
S'TOrange'
p4128
sg9
I01
sg10
(lp4129
sg12
(lp4130
sg29
(dp4131
sbsS'TFilter_values'
p4132
(i__main__
ClassDefinition
p4133
(dp4134
g4
I1
sg5
I01
sg6
g4132
sg7
S'TFilter'
p4135
sg9
I00
sg10
(lp4136
sg12
(lp4137
(S'TValueFilterList'
p4138
S'conditions'
p4139
g4139
S'a list of filters'
p4140
I0
I0
I00
Ntp4141
a(S'bool'
p4142
S'conjunction'
p4143
g4143
S'if true, filter computes conjunction, otherwise disjunction'
p4144
I0
I0
I01
Ntp4145
ag695
ag699
asg29
(dp4146
S'Operator'
p4147
(lp4148
(S'None'
p4149
I0
tp4150
a(S'Equal'
p4151
I1
tp4152
a(S'NotEqual'
p4153
I2
tp4154
a(S'Less'
p4155
I3
tp4156
a(S'LessEqual'
p4157
I4
tp4158
a(S'Greater'
p4159
I5
tp4160
a(S'GreaterEqual'
p4161
I6
tp4162
a(S'Between'
p4163
I7
tp4164
a(S'Outside'
p4165
I8
tp4166
a(S'Contains'
p4167
I9
tp4168
a(S'NotContains'
p4169
I10
tp4170
a(S'BeginsWith'
p4171
I11
tp4172
a(S'EndsWith'
p4173
I12
tp4174
a(S'Listed'
p4175
I13
tp4176
assbsS'TRuleClassifier'
p4177
(i__main__
ClassDefinition
p4178
(dp4179
g4
I1
sg5
I01
sg6
g4177
sg7
S'TClassifier'
p4180
sg9
I01
sg10
(lp4181
sg12
(lp4182
g605
ag608
ag612
ag94
ag99
asg29
(dp4183
sbsS'TAssociationRules'
p4184
(ipyprops
ClassDefinition
p4185
(dp4186
g4
I0
sg5
I01
sg6
g4184
sg7
g143
sg9
I0
sg10
(lp4187
sg12
(lp4188
sg29
(dp4189
sbsS'TSymMatrix'
p4190
(i__main__
ClassDefinition
p4191
(dp4192
g4
I1
sg5
I01
sg6
g4190
sg7
S'TOrange'
p4193
sg9
I00
sg10
(lp4194
sg12
(lp4195
(S'int'
p4196
S'dim'
p4197
g4197
S'matrix dimension'
p4198
I01
I0
I01
Ntp4199
a(S'int'
p4200
S'matrixType'
p4201
S'matrix_type'
p4202
S' 0 lower, 1 upper, 2 symmetric, 3 lower_filled, 4 upper_filled'
p4203
I0
I0
I01
S'SymMatrix_Shape'
p4204
tp4205
asg29
(dp4206
S'Shape'
p4207
(lp4208
(S'Lower'
p4209
I0
tp4210
a(S'Upper'
p4211
I1
tp4212
a(S'Symmetric'
p4213
I2
tp4214
a(S'LowerFilled'
p4215
I3
tp4216
a(S'UpperFilled'
p4217
I4
tp4218
assbsS'TSVMLearner'
p4219
(i__main__
ClassDefinition
p4220
(dp4221
g4
I1
sg5
I01
sg6
g4219
sg7
S'TLearner'
p4222
sg9
I00
sg10
(lp4223
sg12
(lp4224
(S'int'
p4225
S'svm_type'
p4226
g4226
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p4227
I0
I0
I01
S'SVMLearner_SVMType'
p4228
tp4229
a(S'int'
p4230
S'kernel_type'
p4231
g4231
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p4232
I0
I0
I01
S'SVMLearner_Kernel'
p4233
tp4234
a(S'float'
p4235
S'degree'
p4236
g4236
S'polynomial kernel degree'
p4237
I0
I0
I01
Ntp4238
a(S'float'
p4239
S'gamma'
p4240
g4240
S'poly/rbf/sigm parameter'
p4241
I0
I0
I01
Ntp4242
a(S'float'
p4243
S'coef0'
p4244
g4244
S'poly/sigm parameter'
p4245
I0
I0
I01
Ntp4246
a(S'float'
p4247
S'cache_size'
p4248
g4248
S'cache size in MB'
p4249
I0
I0
I01
Ntp4250
a(S'float'
p4251
S'eps'
p4252
g4252
S'stopping criteria'
p4253
I0
I0
I01
Ntp4254
a(S'float'
p4255
g3495
g3495
S'for C_SVC and C_SVR'
p4256
I0
I0
I01
Ntp4257
a(S'float'
p4258
S'nu'
p4259
g4259
S'for NU_SVC and ONE_CLASS'
p4260
I0
I0
I01
Ntp4261
a(S'float'
p4262
g2292
g2292
S'for C_SVR'
p4263
I0
I0
I01
Ntp4264
a(S'int'
p4265
S'shrinking'
p4266
g4266
S'shrinking'
p4267
I0
I0
I01
Ntp4268
a(S'int'
p4269
S'probability'
p4270
g4270
S'probability'
p4271
I0
I0
I01
Ntp4272
a(S'bool'
p4273
S'verbose'
p4274
g4274
S'verbose'
p4275
I0
I0
I01
Ntp4276
a(S'TKernelFunc'
p4277
S'kernelFunc'
p4278
S'kernel_func'
p4279
S'custom kernel function'
p4280
I0
I0
I00
Ntp4281
ag110
asg29
(dp4282
S'Kernel'
p4283
(lp4284
(S'Linear'
p4285
S'LINEAR'
p4286
tp4287
a(S'Polynomial'
p4288
S'POLY'
p4289
tp4290
a(S'RBF'
p4291
S'RBF'
p4292
tp4293
a(S'Sigmoid'
p4294
S'SIGMOID'
p4295
tp4296
a(S'Custom'
p4297
S'PRECOMPUTED'
p4298
tp4299
asS'LIBSVM_VERSION'
p4300
(lp4301
(S'VERSION'
p4302
S'LIBSVM_VERSION'
p4303
tp4304
asS'SVMType'
p4305
(lp4306
(S'C_SVC'
p4307
S'C_SVC'
p4308
tp4309
a(S'Nu_SVC'
p4310
S'NU_SVC'
p4311
tp4312
a(S'OneClass'
p4313
S'ONE_CLASS'
p4314
tp4315
a(S'Epsilon_SVR'
p4316
S'EPSILON_SVR'
p4317
tp4318
a(S'Nu_SVR'
p4319
S'NU_SVR'
p4320
tp4321
assbsS'TPNN'
p4322
(i__main__
ClassDefinition
p4323
(dp4324
g4
I1
sg5
I01
sg6
g4322
sg7
S'TClassifierFD'
p4325
sg9
I00
sg10
(lp4326
sg12
(lp4327
g749
ag753
ag757
ag761
ag766
ag771
ag775
ag291
ag94
ag99
asg29
(dp4328
sbsS'TImputerConstructor_defaults'
p4329
(i__main__
ClassDefinition
p4330
(dp4331
g4
I1
sg5
I01
sg6
g4329
sg7
S'TImputerConstructor'
p4332
sg9
I00
sg10
(lp4333
sg12
(lp4334
(S'TExample'
p4335
S'defaults'
p4336
g4336
S'default values to be imputed instead missing ones'
p4337
I0
I0
I00
Ntp4338
ag164
asg29
(dp4339
sbsS'TConditionalProbabilityEstimatorConstructor'
p4340
(i__main__
ClassDefinition
p4341
(dp4342
g4
I1
sg5
I01
sg6
g4340
sg7
S'TOrange'
p4343
sg9
I01
sg10
(lp4344
sg12
(lp4345
sg29
(dp4346
sbsS'TPreprocessor_takeMissingClasses'
p4347
(i__main__
ClassDefinition
p4348
(dp4349
g4
I1
sg5
I01
sg6
g4347
sg7
S'TPreprocessor'
p4350
sg9
I00
sg10
(lp4351
sg12
(lp4352
sg29
(dp4353
sbsS'TClustersFromIMByAssessor'
p4354
(i__main__
ClassDefinition
p4355
(dp4356
g4
I1
sg5
I01
sg6
g4354
sg7
S'TClustersFromIM'
p4357
sg9
I00
sg10
(lp4358
sg12
(lp4359
(S'TColumnAssessor'
p4360
S'columnAssessor'
p4361
S'column_assessor'
p4362
S'column quality assessor'
p4363
I0
I0
I00
Ntp4364
a(S'TStopIMClusteringByAssessor'
p4365
S'stopCriterion'
p4366
S'stop_criterion'
p4367
S'stop criterion'
p4368
I0
I0
I00
Ntp4369
asg29
(dp4370
sbsS'TRuleValidator_LRS'
p4371
(i__main__
ClassDefinition
p4372
(dp4373
g4
I1
sg5
I01
sg6
g4371
sg7
S'TRuleValidator'
p4374
sg9
I00
sg10
(lp4375
sg12
(lp4376
(S'float'
p4377
S'alpha'
p4378
g4378
g573
I0
I0
I01
Ntp4379
a(S'float'
p4380
S'min_coverage'
p4381
g4381
g573
I0
I0
I01
Ntp4382
a(S'int'
p4383
S'max_rule_complexity'
p4384
g4384
g573
I0
I0
I01
Ntp4385
a(S'float'
p4386
S'min_quality'
p4387
g4387
g573
I0
I0
I01
Ntp4388
asg29
(dp4389
sbsS'TLogRegFitter_Python'
p4390
(i__main__
ClassDefinition
p4391
(dp4392
g4
I1
sg5
I01
sg6
g4390
sg7
S'TLogRegFitter'
p4393
sg9
I00
sg10
(lp4394
sg12
(lp4395
sg29
(dp4396
sbsS'TNetwork'
p4397
(i__main__
ClassDefinition
p4398
(dp4399
g4
I1
sg5
I0
sg6
g4397
sg7
S'TGraphAsList'
p4400
sg9
I00
sg10
(lp4401
sg12
(lp4402
(S'TExampleTable'
p4403
S'items'
p4404
g4404
S'ExampleTable of vertices data'
p4405
I0
I0
I00
Ntp4406
a(S'TExampleTable'
p4407
S'links'
p4408
g4408
S'ExampleTable of edges data'
p4409
I0
I0
I00
Ntp4410
ag1490
ag1495
ag1499
asg29
(dp4411
sbsS'TEarthClassifier'
p4412
(i__main__
ClassDefinition
p4413
(dp4414
g4
I1
sg5
I01
sg6
g4412
sg7
S'TClassifierFD'
p4415
sg9
I00
sg10
(lp4416
sg12
(lp4417
(S'int'
p4418
S'num_preds'
p4419
g4419
S'Number of predictor variables'
p4420
I0
I0
I01
Ntp4421
a(S'int'
p4422
S'num_terms'
p4423
g4423
S'Number of used terms'
p4424
I0
I0
I01
Ntp4425
a(S'int'
p4426
S'max_terms'
p4427
g4427
S'Maximum number of terms'
p4428
I0
I0
I01
Ntp4429
a(S'int'
p4430
S'num_responses'
p4431
g4431
S'Number of response variables'
p4432
I0
I0
I01
Ntp4433
a(S'TBoolList'
p4434
S'best_set'
p4435
g4435
S'Used terms.'
p4436
I0
I0
I00
Ntp4437
a(S'TFloatListList'
p4438
S'dirs'
p4439
g4439
S'max_preds x num_preds matrix'
p4440
I0
I0
I00
Ntp4441
a(S'TFloatListList'
p4442
S'cuts'
p4443
g4443
S'max_preds x num_preds matrix of cuts'
p4444
I0
I0
I00
Ntp4445
a(S'TFloatList'
p4446
S'betas'
p4447
g4447
S'Term coefficients;'
p4448
I0
I0
I00
Ntp4449
ag291
ag94
ag99
asg29
(dp4450
sbsS'TValueList'
p4451
(ipyprops
ClassDefinition
p4452
(dp4453
g4
I0
sg5
I01
sg6
S'TValueList'
p4454
sg7
g143
sg9
I0
sg10
(lp4455
sg12
(lp4456
sg29
(dp4457
sbsS'TTreeExampleSplitter_UnknownsToCommon'
p4458
(i__main__
ClassDefinition
p4459
(dp4460
g4
I1
sg5
I01
sg6
g4458
sg7
S'TTreeExampleSplitter'
p4461
sg9
I00
sg10
(lp4462
sg12
(lp4463
sg29
(dp4464
sbsS'TContDistribution'
p4465
(i__main__
ClassDefinition
p4466
(dp4467
g4
I1
sg5
I01
sg6
g4465
sg7
S'TDistribution'
p4468
sg9
I00
sg10
(lp4469
sg12
(lp4470
(S'TFloatList'
p4471
S'variances'
p4472
g4472
S'variances'
p4473
I0
I0
I00
Ntp4474
a(S'float'
p4475
S'sum'
p4476
g4476
S'weighted sum of elements (i.e. N*average)'
p4477
I01
I0
I01
Ntp4478
a(S'float'
p4479
S'sum2'
p4480
g4480
S'weighted sum of squares of elements'
p4481
I01
I0
I01
Ntp4482
ag1132
ag1136
ag1140
ag1144
ag1148
ag1153
ag1158
ag1163
asg29
(dp4483
sbsS'TTreeDescender_UnknownMergeAsSelector'
p4484
(i__main__
ClassDefinition
p4485
(dp4486
g4
I1
sg5
I01
sg6
g4484
sg7
g1599
sg9
I0
sg10
(lp4487
sg12
(lp4488
sg29
(dp4489
sbsS'TContingencyAttrClass'
p4490
(i__main__
ClassDefinition
p4491
(dp4492
g4
I1
sg5
I01
sg6
g4490
sg7
S'TContingencyClass'
p4493
sg9
I00
sg10
(lp4494
sg12
(lp4495
g1684
ag1689
ag1695
ag1700
ag1705
ag1710
asg29
(dp4496
sbsS'TDomainTransformerConstructor'
p4497
(i__main__
ClassDefinition
p4498
(dp4499
g4
I1
sg5
I01
sg6
g4497
sg7
S'TOrange'
p4500
sg9
I01
sg10
(lp4501
sg12
(lp4502
(S'bool'
p4503
S'preservesOrder'
p4504
S'preserves_order'
p4505
S'a flag telling that original attributes have corresponding attribute in the same order'
p4506
I01
I0
I01
Ntp4507
a(S'bool'
p4508
S'preservesAttributes'
p4509
S'preserves_attributes'
p4510
S'a flag telling whether each original has a corresponding new attribute'
p4511
I01
I0
I01
Ntp4512
asg29
(dp4513
sbsS'TPythonValueSpecial'
p4514
(i__main__
ClassDefinition
p4515
(dp4516
g4
I1
sg5
I01
sg6
g4514
sg7
S'TOrange'
p4517
sg9
I00
sg10
(lp4518
sg12
(lp4519
(S'int'
p4520
S'valueType'
p4521
S'value_type'
p4522
S'value type'
p4523
I0
I0
I01
Ntp4524
asg29
(dp4525
sbsS'TIGConstructor'
p4526
(i__main__
ClassDefinition
p4527
(dp4528
g4
I1
sg5
I01
sg6
g4526
sg7
S'TOrange'
p4529
sg9
I01
sg10
(lp4530
sg12
(lp4531
sg29
(dp4532
sbsS'TProbabilityEstimatorConstructor'
p4533
(i__main__
ClassDefinition
p4534
(dp4535
g4
I1
sg5
I01
sg6
g4533
sg7
S'TOrange'
p4536
sg9
I01
sg10
(lp4537
sg12
(lp4538
sg29
(dp4539
sbsS'TTreeNodeList'
p4540
(ipyprops
ClassDefinition
p4541
(dp4542
g4
I0
sg5
I01
sg6
g4540
sg7
g143
sg9
I0
sg10
(lp4543
sg12
(lp4544
sg29
(dp4545
sbsS'TFloatVariable'
p4546
(i__main__
ClassDefinition
p4547
(dp4548
g4
I1
sg5
I01
sg6
g4546
sg7
S'TVariable'
p4549
sg9
I00
sg10
(lp4550
sg12
(lp4551
(S'float'
p4552
S'startValue'
p4553
S'start_value'
p4554
S'lowest value'
p4555
I0
I0
I01
Ntp4556
a(S'float'
p4557
S'endValue'
p4558
S'end_value'
p4559
S'highest value'
p4560
I0
I0
I01
Ntp4561
a(S'float'
p4562
S'stepValue'
p4563
S'step_value'
p4564
S'step'
p4565
I0
I0
I01
Ntp4566
a(S'int'
p4567
S'numberOfDecimals'
p4568
S'number_of_decimals'
p4569
S'number of digits after decimal point'
p4570
I0
I0
I01
Ntp4571
a(S'bool'
p4572
S'scientificFormat'
p4573
S'scientific_format'
p4574
S'use scientific format in output'
p4575
I0
I0
I01
Ntp4576
a(S'int'
p4577
S'adjustDecimals'
p4578
S'adjust_decimals'
p4579
S"adjust number of decimals according to the values converted (0 - no, 1 - yes, 2 - yes, but haven't seen any yet)"
p4580
I0
I0
I01
Ntp4581
ag333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp4582
sbsS'TImputer_random'
p4583
(i__main__
ClassDefinition
p4584
(dp4585
g4
I1
sg5
I01
sg6
g4583
sg7
S'TImputer'
p4586
sg9
I00
sg10
(lp4587
sg12
(lp4588
(S'bool'
p4589
S'imputeClass'
p4590
S'impute_class'
p4591
S'Tells whether to impute the class values, too (default: true)'
p4592
I0
I0
I01
Ntp4593
a(S'bool'
p4594
S'deterministic'
p4595
g4595
S"tells whether to initialize random by example's CRC (default: false)"
p4596
I0
I0
I01
Ntp4597
a(S'TDistributionList'
p4598
S'distributions'
p4599
g4599
S'probability functions'
p4600
I0
I0
I00
Ntp4601
asg29
(dp4602
sbsS'TFilter_hasMeta'
p4603
(i__main__
ClassDefinition
p4604
(dp4605
g4
I1
sg5
I01
sg6
g4603
sg7
S'TFilter'
p4606
sg9
I00
sg10
(lp4607
sg12
(lp4608
(S'int'
p4609
S'id'
p4610
g4610
S'meta attribute id'
p4611
I0
I0
I01
Ntp4612
ag695
ag699
asg29
(dp4613
sbsS'TProbabilityEstimatorConstructor_kernel'
p4614
(i__main__
ClassDefinition
p4615
(dp4616
g4
I1
sg5
I01
sg6
g4614
sg7
S'TProbabilityEstimatorConstructor'
p4617
sg9
I00
sg10
(lp4618
sg12
(lp4619
(S'float'
p4620
S'minImpact'
p4621
S'min_impact'
p4622
S'Minimal impact the point must have to be counted'
p4623
I0
I0
I01
Ntp4624
a(S'float'
p4625
S'smoothing'
p4626
g4626
S'Smoothing factor'
p4627
I0
I0
I01
Ntp4628
a(S'int'
p4629
S'nPoints'
p4630
S'n_points'
p4631
S'Number of points for curve (negative means the given number of points is inserted in each interval)'
p4632
I0
I0
I01
Ntp4633
asg29
(dp4634
sbsS'TRuleCovererAndRemover_Default'
p4635
(i__main__
ClassDefinition
p4636
(dp4637
g4
I1
sg5
I01
sg6
g4635
sg7
S'TRuleCovererAndRemover'
p4638
sg9
I00
sg10
(lp4639
sg12
(lp4640
sg29
(dp4641
sbsS'TMakeRandomIndices'
p4642
(i__main__
ClassDefinition
p4643
(dp4644
g4
I1
sg5
I01
sg6
g4642
sg7
S'TOrange'
p4645
sg9
I00
sg10
(lp4646
sg12
(lp4647
g718
ag722
ag727
asg29
(dp4648
S'Stratification'
p4649
(lp4650
(S'StratifiedIfPossible'
p4651
S'-1'
p4652
tp4653
a(S'NotStratified'
p4654
I0
tp4655
a(S'Stratified'
p4656
I1
tp4657
assbsS'TFilter_Python'
p4658
(i__main__
ClassDefinition
p4659
(dp4660
g4
I1
sg5
I01
sg6
g4658
sg7
S'TFilter'
p4661
sg9
I00
sg10
(lp4662
sg12
(lp4663
g695
ag699
asg29
(dp4664
sbsS'TRuleBeamInitializer_Default'
p4665
(i__main__
ClassDefinition
p4666
(dp4667
g4
I1
sg5
I01
sg6
g4665
sg7
S'TRuleBeamInitializer'
p4668
sg9
I00
sg10
(lp4669
sg12
(lp4670
sg29
(dp4671
sbsS'TExamplesDistanceConstructor_Python'
p4672
(i__main__
ClassDefinition
p4673
(dp4674
g4
I1
sg5
I01
sg6
g4672
sg7
S'TExamplesDistanceConstructor'
p4675
sg9
I00
sg10
(lp4676
sg12
(lp4677
g1367
asg29
(dp4678
sbsS'TTreeDescender_Python'
p4679
(i__main__
ClassDefinition
p4680
(dp4681
g4
I1
sg5
I01
sg6
g4679
sg7
S'TTreeDescender'
p4682
sg9
I00
sg10
(lp4683
sg12
(lp4684
sg29
(dp4685
sbsS'TSubsetsGenerator_constant'
p4686
(i__main__
ClassDefinition
p4687
(dp4688
g4
I1
sg5
I01
sg6
g4686
sg7
S'TSubsetsGenerator'
p4689
sg9
I00
sg10
(lp4690
sg12
(lp4691
(S'TVarList'
p4692
S'constant'
p4693
g4693
S'a subset that is returned (once!)'
p4694
I0
I0
I00
Ntp4695
ag207
asg29
(dp4696
sbsS'TGaussianNoiseGenerator'
p4697
(i__main__
ClassDefinition
p4698
(dp4699
g4
I1
sg5
I01
sg6
g4697
sg7
S'TChangeExampleGenerator'
p4700
sg9
I00
sg10
(lp4701
sg12
(lp4702
(S'TIntFloatList'
p4703
S'deviations'
p4704
g4704
S"deviations for attributes' values"
p4705
I0
I0
I00
Ntp4706
a(S'TRandomGenerator'
p4707
S'randomGenerator'
p4708
S'random_generator'
p4709
S'random generator'
p4710
I0
I0
I00
Ntp4711
ag306
ag310
asg29
(dp4712
sbsS'TClustersFromDistributionsByAssessor'
p4713
(i__main__
ClassDefinition
p4714
(dp4715
g4
I1
sg5
I01
sg6
g4713
sg7
S'TClustersFromDistributions'
p4716
sg9
I00
sg10
(lp4717
sg12
(lp4718
(S'TDistributionAssessor'
p4719
S'distributionAssessor'
p4720
S'distribution_assessor'
p4721
S'column quality assessor'
p4722
I0
I0
I00
Ntp4723
a(S'TStopDistributionClustering'
p4724
S'stopCriterion'
p4725
S'stop_criterion'
p4726
S'stop criterion'
p4727
I0
I0
I00
Ntp4728
a(S'float'
p4729
S'minProfitProportion'
p4730
S'min_profit_proportion'
p4731
S'minimal merge profit'
p4732
I0
I0
I01
Ntp4733
asg29
(dp4734
sbsS'TExamplesDistance_Hamming'
p4735
(i__main__
ClassDefinition
p4736
(dp4737
g4
I1
sg5
I01
sg6
g4735
sg7
S'TExamplesDistance'
p4738
sg9
I00
sg10
(lp4739
sg12
(lp4740
(S'bool'
p4741
S'ignoreClass'
p4742
S'ignore_class'
p4743
S'if true (default), class value is ignored when computing distances'
p4744
I0
I0
I01
Ntp4745
a(S'bool'
p4746
S'ignoreUnknowns'
p4747
S'ignore_unknowns'
p4748
S'if true (default: false) unknown values are ignored in computation'
p4749
I0
I0
I01
Ntp4750
asg29
(dp4751
sbsS'TDefaultClassifier'
p4752
(i__main__
ClassDefinition
p4753
(dp4754
g4
I1
sg5
I01
sg6
g4752
sg7
S'TClassifier'
p4755
sg9
I00
sg10
(lp4756
sg12
(lp4757
(S'TValue'
p4758
S'defaultVal'
p4759
S'default_val'
p4760
S'default prediction'
p4761
I0
I0
I01
Ntp4762
a(S'TDistribution'
p4763
S'defaultDistribution'
p4764
S'default_distribution'
p4765
S'default distribution'
p4766
I0
I0
I00
Ntp4767
ag94
ag99
asg29
(dp4768
sbsS'TColumnAssessor_Kramer'
p4769
(i__main__
ClassDefinition
p4770
(dp4771
g4
I1
sg5
I01
sg6
g4769
sg7
S'TColumnAssessor'
p4772
sg9
I00
sg10
(lp4773
sg12
(lp4774
sg29
(dp4775
sbsS'TEVDistGetter_Python'
p4776
(i__main__
ClassDefinition
p4777
(dp4778
g4
I1
sg5
I01
sg6
g4776
sg7
S'TEVDistGetter'
p4779
sg9
I00
sg10
(lp4780
sg12
(lp4781
sg29
(dp4782
sbsS'TDiscretization'
p4783
(i__main__
ClassDefinition
p4784
(dp4785
g4
I1
sg5
I01
sg6
g4783
sg7
S'TOrange'
p4786
sg9
I01
sg10
(lp4787
sg12
(lp4788
sg29
(dp4789
sbsS'TTreeSplitConstructor_Measure'
p4790
(i__main__
ClassDefinition
p4791
(dp4792
g4
I1
sg5
I01
sg6
g4790
sg7
S'TTreeSplitConstructor'
p4793
sg9
I01
sg10
(lp4794
sg12
(lp4795
g1302
ag1307
ag787
asg29
(dp4796
sbsS'TTreeNode'
p4797
(i__main__
ClassDefinition
p4798
(dp4799
g4
I1
sg5
I01
sg6
g4797
sg7
S'TOrange'
p4800
sg9
I00
sg10
(lp4801
sg12
(lp4802
(S'TClassifier'
p4803
S'nodeClassifier'
p4804
S'node_classifier'
p4805
S'classifies an example'
p4806
I0
I0
I00
Ntp4807
a(S'TDistribution'
p4808
S'distribution'
p4809
g4809
S'distribution of classes in the node'
p4810
I0
I0
I00
Ntp4811
a(S'TDomainContingency'
p4812
S'contingency'
p4813
g4813
S'domain contingency for examples in the node'
p4814
I0
I0
I00
Ntp4815
a(S'TExampleGenerator'
p4816
S'examples'
p4817
g4817
S'learning examples (if stored)'
p4818
I0
I0
I00
Ntp4819
a(S'int'
p4820
S'weightID'
p4821
S'weight_ID'
p4822
S'weightID used to construct this node'
p4823
I0
I0
I01
Ntp4824
a(S'TClassifier'
p4825
S'branchSelector'
p4826
S'branch_selector'
p4827
S'classifier that select a branch for an example'
p4828
I0
I0
I00
Ntp4829
a(S'TTreeNodeList'
p4830
S'branches'
p4831
g4831
S'classifiers presenting the branches'
p4832
I0
I0
I00
Ntp4833
a(S'TStringList'
p4834
S'branchDescriptions'
p4835
S'branch_descriptions'
p4836
S'descriptions of branches'
p4837
I0
I0
I00
Ntp4838
a(S'TDiscDistribution'
p4839
S'branchSizes'
p4840
S'branch_sizes'
p4841
S'numbers of examples in branches'
p4842
I0
I0
I00
Ntp4843
asg29
(dp4844
sbsS'TTransformValue_IsDefined'
p4845
(i__main__
ClassDefinition
p4846
(dp4847
g4
I1
sg5
I01
sg6
g4845
sg7
S'TTransformValue'
p4848
sg9
I00
sg10
(lp4849
sg12
(lp4850
g824
asg29
(dp4851
sbsS'TFilter_hasClassValue'
p4852
(i__main__
ClassDefinition
p4853
(dp4854
g4
I1
sg5
I01
sg6
g4852
sg7
S'TFilter'
p4855
sg9
I00
sg10
(lp4856
sg12
(lp4857
g695
ag699
asg29
(dp4858
sbsS'TStopDistributionClustering_binary'
p4859
(i__main__
ClassDefinition
p4860
(dp4861
g4
I1
sg5
I01
sg6
g4859
sg7
S'TStopDistributionClustering'
p4862
sg9
I00
sg10
(lp4863
sg12
(lp4864
sg29
(dp4865
sbsS'TIMByRows'
p4866
(i__main__
ClassDefinition
p4867
(dp4868
g4
I1
sg5
I01
sg6
g4866
sg7
S'TOrange'
p4869
sg9
I00
sg10
(lp4870
sg12
(lp4871
(S'int'
p4872
S'varType'
p4873
S'var_type'
p4874
S' class variable type'
p4875
I0
I0
I01
S'Variable_Type'
p4876
tp4877
asg29
(dp4878
sbsS'TRuleFinder'
p4879
(i__main__
ClassDefinition
p4880
(dp4881
g4
I1
sg5
I01
sg6
g4879
sg7
S'TOrange'
p4882
sg9
I01
sg10
(lp4883
sg12
(lp4884
g4084
ag4087
asg29
(dp4885
sbsS'TClassifierByExampleTable'
p4886
(i__main__
ClassDefinition
p4887
(dp4888
g4
I1
sg5
I01
sg6
g4886
sg7
S'TClassifierFD'
p4889
sg9
I00
sg10
(lp4890
sg12
(lp4891
(S'TExampleTable'
p4892
S'sortedExamples'
p4893
S'sorted_examples'
p4894
S'a table of examples'
p4895
I0
I0
I00
Ntp4896
a(S'bool'
p4897
S'containsUnknowns'
p4898
S'contains_unknowns'
p4899
S'if true, the table contains unknown values'
p4900
I0
I0
I01
Ntp4901
a(S'TClassifier'
p4902
S'classifierForUnknown'
p4903
S'classifier_for_unknown'
p4904
S'a classifier for unknown cases'
p4905
I0
I0
I00
Ntp4906
a(S'TEFMDataDescription'
p4907
S'dataDescription'
p4908
S'data_description'
p4909
S'data description'
p4910
I0
I0
I00
Ntp4911
ag291
ag94
ag99
asg29
(dp4912
sbsS'TNetworkOptimization'
p4913
(i__main__
ClassDefinition
p4914
(dp4915
g4
I1
sg5
I0
sg6
g4913
sg7
S'TOrange'
p4916
sg9
I00
sg10
(lp4917
sg12
(lp4918
(S'TNetwork'
p4919
S'network'
p4920
g4920
S'Network'
p4921
I0
I0
I00
Ntp4922
asg29
(dp4923
sbsS'TKernelFunc'
p4924
(i__main__
ClassDefinition
p4925
(dp4926
g4
I1
sg5
I01
sg6
g4924
sg7
S'TOrange'
p4927
sg9
I01
sg10
(lp4928
sg12
(lp4929
sg29
(dp4930
sbsS'TChangeExampleGenerator'
p4931
(i__main__
ClassDefinition
p4932
(dp4933
g4
I1
sg5
I01
sg6
g4931
sg7
S'TAdapterGenerator'
p4934
sg9
I01
sg10
(lp4935
sg12
(lp4936
g306
ag310
asg29
(dp4937
sbsS'TRule'
p4938
(i__main__
ClassDefinition
p4939
(dp4940
g4
I1
sg5
I01
sg6
g4938
sg7
S'TOrange'
p4941
sg9
I00
sg10
(lp4942
sg12
(lp4943
(S'TFilter'
p4944
S'filter'
p4945
g4945
S'stored filter for this rule'
p4946
I0
I0
I00
Ntp4947
a(S'TFilter'
p4948
S'valuesFilter'
p4949
S'values_filter'
p4950
S'Filter_values representation of main filter (sometimes needed)'
p4951
I0
I0
I00
Ntp4952
a(S'TClassifier'
p4953
S'classifier'
p4954
g4954
S'classifies an example'
p4955
I0
I0
I00
Ntp4956
a(S'TLearner'
p4957
S'learner'
p4958
g4958
S'learns a classifier from data'
p4959
I0
I0
I00
Ntp4960
a(S'TRule'
p4961
S'parentRule'
p4962
S'parent_rule'
p4963
g573
I0
I0
I00
Ntp4964
a(S'TDistribution'
p4965
S'baseDist'
p4966
S'base_dist'
p4967
S'initial distribution'
p4968
I0
I0
I00
Ntp4969
a(S'TDistribution'
p4970
S'classDistribution'
p4971
S'class_distribution'
p4972
S'distribution of classes covered by the rule'
p4973
I0
I0
I00
Ntp4974
a(S'TExampleTable'
p4975
S'examples'
p4976
g4976
S'covered examples'
p4977
I0
I0
I00
Ntp4978
a(S'int'
p4979
S'weightID'
p4980
S'weight_ID'
p4981
S'weight for the stored examples'
p4982
I0
I0
I01
Ntp4983
a(S'float'
p4984
S'quality'
p4985
g4985
S'some measure of rule quality'
p4986
I0
I0
I01
Ntp4987
a(S'int'
p4988
S'complexity'
p4989
g4989
g573
I0
I0
I01
Ntp4990
a(S'float'
p4991
S'chi'
p4992
g4992
g573
I0
I0
I01
Ntp4993
a(S'int'
p4994
S'requiredConditions'
p4995
S'required_conditions'
p4996
S'conditions that are mandatory in rule - rule attribute significance avoids these'
p4997
I0
I0
I01
Ntp4998
asg29
(dp4999
sbsS'TIntervalDiscretizer'
p5000
(i__main__
ClassDefinition
p5001
(dp5002
g4
I1
sg5
I01
sg6
g5000
sg7
S'TDiscretizer'
p5003
sg9
I00
sg10
(lp5004
sg12
(lp5005
(S'TFloatList'
p5006
S'points'
p5007
g5007
S'cut-off points'
p5008
I0
I0
I00
Ntp5009
ag824
asg29
(dp5010
sbsS'TClassifierByLookupTable2'
p5011
(i__main__
ClassDefinition
p5012
(dp5013
g4
I1
sg5
I01
sg6
g5011
sg7
S'TClassifierByLookupTable'
p5014
sg9
I00
sg10
(lp5015
sg12
(lp5016
(S'TVariable'
p5017
S'variable1'
p5018
g5018
S'the first attribute used for classification'
p5019
I01
I0
I00
Ntp5020
a(S'TVariable'
p5021
S'variable2'
p5022
g5022
S'the second attribute used for classification'
p5023
I01
I0
I00
Ntp5024
a(S'int'
p5025
S'noOfValues1'
p5026
S'no_of_values1'
p5027
S'number of values of the first attribute'
p5028
I01
I0
I01
Ntp5029
a(S'int'
p5030
S'noOfValues2'
p5031
S'no_of_values2'
p5032
S'number of values of the second attribute'
p5033
I01
I0
I01
Ntp5034
a(S'TEFMDataDescription'
p5035
S'dataDescription'
p5036
S'data_description'
p5037
S'data description'
p5038
I0
I0
I00
Ntp5039
ag85
ag89
ag94
ag99
asg29
(dp5040
sbsS'TPreprocessor_addClassNoise'
p5041
(i__main__
ClassDefinition
p5042
(dp5043
g4
I1
sg5
I01
sg6
g5041
sg7
S'TPreprocessor'
p5044
sg9
I00
sg10
(lp5045
sg12
(lp5046
(S'float'
p5047
S'proportion'
p5048
g5048
S'proportion of changed class values'
p5049
I0
I0
I01
Ntp5050
a(S'TRandomGenerator'
p5051
S'randomGenerator'
p5052
S'random_generator'
p5053
S'random number generator'
p5054
I0
I0
I00
Ntp5055
asg29
(dp5056
sbsS'TExampleGenerator'
p5057
(i__main__
ClassDefinition
p5058
(dp5059
g4
I1
sg5
I01
sg6
g5057
sg7
S'TOrange'
p5060
sg9
I01
sg10
(lp5061
sg12
(lp5062
g306
ag310
asg29
(dp5063
sbsS'TClassifierByLookupTable1'
p5064
(i__main__
ClassDefinition
p5065
(dp5066
g4
I1
sg5
I01
sg6
g5064
sg7
S'TClassifierByLookupTable'
p5067
sg9
I00
sg10
(lp5068
sg12
(lp5069
(S'TVariable'
p5070
S'variable1'
p5071
(g5071
S'variable'
p5072
tp5073
S' attribute used for classification'
p5074
I01
I0
I00
Ntp5075
ag85
ag89
ag94
ag99
asg29
(dp5076
sbsS'TRuleClassifierConstructor_Python'
p5077
(i__main__
ClassDefinition
p5078
(dp5079
g4
I1
sg5
I01
sg6
g5077
sg7
S'TRuleClassifierConstructor'
p5080
sg9
I00
sg10
(lp5081
sg12
(lp5082
sg29
(dp5083
sbsS'TRemoveRedundantOneValue'
p5084
(i__main__
ClassDefinition
p5085
(dp5086
g4
I1
sg5
I01
sg6
g5084
sg7
S'TRemoveRedundant'
p5087
sg9
I00
sg10
(lp5088
sg12
(lp5089
(S'bool'
p5090
S'onData'
p5091
S'on_data'
p5092
S'observe the actual number of value on the data (not on attribute definitions)'
p5093
I0
I0
I01
Ntp5094
ag1345
asg29
(dp5095
sbsS'TDistributionAssessor_Relief'
p5096
(i__main__
ClassDefinition
p5097
(dp5098
g4
I1
sg5
I01
sg6
g5096
sg7
S'TDistributionAssessor'
p5099
sg9
I00
sg10
(lp5100
sg12
(lp5101
sg29
(dp5102
sbsS'TEnumVariable'
p5103
(i__main__
ClassDefinition
p5104
(dp5105
g4
I1
sg5
I01
sg6
g5103
sg7
S'TVariable'
p5106
sg9
I00
sg10
(lp5107
sg12
(lp5108
(S'TStringList'
p5109
S'values'
p5110
g5110
S"attribute's values"
p5111
I0
I0
I00
Ntp5112
a(S'int'
p5113
S'baseValue'
p5114
S'base_value'
p5115
S'the index of the base value'
p5116
I0
I0
I01
Ntp5117
ag333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp5118
sbsS'TConditionalProbabilityEstimatorConstructor_loess'
p5119
(i__main__
ClassDefinition
p5120
(dp5121
g4
I1
sg5
I01
sg6
g5119
sg7
S'TConditionalProbabilityEstimatorConstructor'
p5122
sg9
I00
sg10
(lp5123
sg12
(lp5124
(S'float'
p5125
S'windowProportion'
p5126
S'window_proportion'
p5127
S'The proportion of points in a window for LR'
p5128
I0
I0
I01
Ntp5129
a(S'int'
p5130
S'nPoints'
p5131
S'n_points'
p5132
S'The number of points on curve'
p5133
I0
I0
I01
Ntp5134
a(S'int'
p5135
S'distributionMethod'
p5136
S'distribution_method'
p5137
S" Meaning of the 'nPoints'"
p5138
I0
I0
I01
S'ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod'
p5139
tp5140
asg29
(dp5141
S'DistributionMethod'
p5142
(lp5143
(S'Minimal'
p5144
S'DISTRIBUTE_MINIMAL'
p5145
tp5146
a(S'Factor'
p5147
S'DISTRIBUTE_FACTOR'
p5148
tp5149
a(S'Fixed'
p5150
S'DISTRIBUTE_FIXED'
p5151
tp5152
a(S'Uniform'
p5153
S'DISTRIBUTE_UNIFORM'
p5154
tp5155
a(S'Maximal'
p5156
S'DISTRIBUTE_MAXIMAL'
p5157
tp5158
assbsS'TPreprocessor_addMissing'
p5159
(i__main__
ClassDefinition
p5160
(dp5161
g4
I1
sg5
I01
sg6
g5159
sg7
S'TPreprocessor'
p5162
sg9
I00
sg10
(lp5163
sg12
(lp5164
(S'TVariableFloatMap'
p5165
S'proportions'
p5166
g5166
S'proportion of removed values for individual values'
p5167
I0
I0
I00
Ntp5168
a(S'float'
p5169
S'defaultProportion'
p5170
S'default_proportion'
p5171
S'default proportion of removed values (for attributes not specified above)'
p5172
I0
I0
I01
Ntp5173
a(S'int'
p5174
S'specialType'
p5175
S'special_type'
p5176
S'special value type (1=DC, 2=DK)'
p5177
I0
I0
I01
Ntp5178
a(S'TRandomGenerator'
p5179
S'randomGenerator'
p5180
S'random_generator'
p5181
S'random number generator'
p5182
I0
I0
I00
Ntp5183
asg29
(dp5184
sbsS'TRuleBeamCandidateSelector'
p5185
(i__main__
ClassDefinition
p5186
(dp5187
g4
I1
sg5
I01
sg6
g5185
sg7
S'TOrange'
p5188
sg9
I01
sg10
(lp5189
sg12
(lp5190
sg29
(dp5191
sbsS'TStringList'
p5192
(ipyprops
ClassDefinition
p5193
(dp5194
g4
I0
sg5
I01
sg6
g5192
sg7
g143
sg9
I0
sg10
(lp5195
sg12
(lp5196
sg29
(dp5197
sbsS'TSubsetsGenerator_minMaxSize'
p5198
(i__main__
ClassDefinition
p5199
(dp5200
g4
I1
sg5
I01
sg6
g5198
sg7
S'TSubsetsGenerator'
p5201
sg9
I00
sg10
(lp5202
sg12
(lp5203
(S'int'
p5204
S'min'
p5205
g5205
S'minimal subset size'
p5206
I0
I0
I01
Ntp5207
a(S'int'
p5208
S'max'
p5209
g5209
S'maximal subset size'
p5210
I0
I0
I01
Ntp5211
ag207
asg29
(dp5212
sbsS'TClusteringTreeLearner'
p5213
(i__main__
ClassDefinition
p5214
(dp5215
g4
I1
sg5
I01
sg6
g5213
sg7
S'TMultiLearner'
p5216
sg9
I00
sg10
(lp5217
sg12
(lp5218
(S'float'
p5219
S'minMajority'
p5220
S'min_majority'
p5221
S'the minimal majority each class variable must exceed to stop building'
p5222
I0
I0
I01
Ntp5223
a(S'float'
p5224
S'minMSE'
p5225
S'min_MSE'
p5226
S'the minimal MSE each class variable must be lower than to stop building'
p5227
I0
I0
I01
Ntp5228
a(S'int'
p5229
S'minInstances'
p5230
S'min_instances'
p5231
S'the minimal number of examples for division to continue'
p5232
I0
I0
I01
Ntp5233
a(S'int'
p5234
S'maxDepth'
p5235
S'max_depth'
p5236
S'the maximal depth a tree can reach'
p5237
I0
I0
I01
Ntp5238
a(S'int'
p5239
S'method'
p5240
g5240
g573
I0
I0
I01
Ntp5241
a(S'float'
p5242
S'skipProb'
p5243
S'skip_prob'
p5244
g573
I0
I0
I01
Ntp5245
a(S'TRandomGenerator'
p5246
S'randomGenerator'
p5247
S'random_generator'
p5248
g573
I0
I0
I00
Ntp5249
ag3473
ag3477
asg29
(dp5250
sbsS'TTreeExampleSplitter_UnknownsToAll'
p5251
(i__main__
ClassDefinition
p5252
(dp5253
g4
I1
sg5
I01
sg6
g5251
sg7
S'TTreeExampleSplitter'
p5254
sg9
I00
sg10
(lp5255
sg12
(lp5256
sg29
(dp5257
sbsS'TValueFilter_stringList'
p5258
(i__main__
ClassDefinition
p5259
(dp5260
g4
I1
sg5
I01
sg6
g5258
sg7
S'TValueFilter'
p5261
sg9
I00
sg10
(lp5262
sg12
(lp5263
(S'TStringList'
p5264
S'values'
p5265
g5265
S'accepted values'
p5266
I0
I0
I00
Ntp5267
a(S'bool'
p5268
S'caseSensitive'
p5269
S'case_sensitive'
p5270
S'if true (default), the comparison is case sensitive'
p5271
I0
I0
I01
Ntp5272
ag1061
ag1066
asg29
(dp5273
sbsS'TContingencyClass'
p5274
(i__main__
ClassDefinition
p5275
(dp5276
g4
I1
sg5
I01
sg6
g5274
sg7
S'TContingency'
p5277
sg9
I01
sg10
(lp5278
sg12
(lp5279
g1684
ag1689
ag1695
ag1700
ag1705
ag1710
asg29
(dp5280
sbsS'TAssociationClassifier'
p5281
(i__main__
ClassDefinition
p5282
(dp5283
g4
I1
sg5
I01
sg6
g5281
sg7
S'TClassifierFD'
p5284
sg9
I00
sg10
(lp5285
sg12
(lp5286
(S'TAssociationRules'
p5287
S'rules'
p5288
g5288
S'association rules'
p5289
I0
I0
I00
Ntp5290
a(S'int'
p5291
S'voteWeight'
p5292
S'vote_weight'
p5293
S'vote weight (s=support, c=confidence, p=product)'
p5294
I0
I0
I01
Ntp5295
ag291
ag94
ag99
asg29
(dp5296
sbsS'TDomainDistributions'
p5297
(ipyprops
ClassDefinition
p5298
(dp5299
g4
I0
sg5
I01
sg6
S'TDomainDistributions'
p5300
sg7
g143
sg9
I0
sg10
(lp5301
sg12
(lp5302
sg29
(dp5303
sbsS'TSVMLearnerSparse'
p5304
(i__main__
ClassDefinition
p5305
(dp5306
g4
I1
sg5
I01
sg6
g5304
sg7
S'TSVMLearner'
p5307
sg9
I00
sg10
(lp5308
sg12
(lp5309
(S'bool'
p5310
S'useNonMeta'
p5311
S'use_non_meta'
p5312
S'include non meta attributes in the learning process'
p5313
I0
I0
I01
Ntp5314
ag4229
ag4234
ag4238
ag4242
ag4246
ag4250
ag4254
ag4257
ag4261
ag4264
ag4268
ag4272
ag4276
ag4281
ag110
asg29
(dp5315
sbsS'TDomain'
p5316
(i__main__
ClassDefinition
p5317
(dp5318
g4
I1
sg5
I01
sg6
g5316
sg7
S'TOrange'
p5319
sg9
I00
sg10
(lp5320
sg12
(lp5321
(S'TVariable'
p5322
S'classVar'
p5323
S'class_var'
p5324
S'class variable'
p5325
I01
I0
I00
Ntp5326
a(S'TVarList'
p5327
S'attributes'
p5328
(g5328
S'features'
p5329
tp5330
S' list of attributes, excluding the class'
p5331
I01
I0
I00
Ntp5332
a(S'TVarList'
p5333
S'variables'
p5334
g5334
S'list of attributes, including the class at the end of the list'
p5335
I01
I0
I00
Ntp5336
a(S'TVarList'
p5337
S'classVars'
p5338
S'class_vars'
p5339
S'list of class variables, if multiple; else None'
p5340
I01
I0
I00
Ntp5341
a(S'int'
p5342
S'version'
p5343
g5343
S"unique version identifier; it's changed each time a domain is changed"
p5344
I01
I0
I01
Ntp5345
asg29
(dp5346
sbsS'TTreePruner_SameMajority'
p5347
(i__main__
ClassDefinition
p5348
(dp5349
g4
I1
sg5
I01
sg6
g5347
sg7
S'TTreePruner'
p5350
sg9
I00
sg10
(lp5351
sg12
(lp5352
sg29
(dp5353
sbsS'TSubsetsGenerator_constant_iterator'
p5354
(i__main__
ClassDefinition
p5355
(dp5356
g4
I1
sg5
I01
sg6
g5354
sg7
S'TSubsetsGenerator_iterator'
p5357
sg9
I00
sg10
(lp5358
sg12
(lp5359
(S'TVarList'
p5360
S'constant'
p5361
g5361
S'a subset that is returned (once!)'
p5362
I0
I0
I00
Ntp5363
a(S'bool'
p5364
S'moreToCome'
p5365
S'more_to_come'
p5366
g573
I0
I0
I01
Ntp5367
ag510
asg29
(dp5368
sbsS'TExampleDistConstructor'
p5369
(i__main__
ClassDefinition
p5370
(dp5371
g4
I1
sg5
I01
sg6
g5369
sg7
S'TOrange'
p5372
sg9
I01
sg10
(lp5373
sg12
(lp5374
sg29
(dp5375
sbsS'TIMByIMByRows'
p5376
(i__main__
ClassDefinition
p5377
(dp5378
g4
I1
sg5
I01
sg6
g5376
sg7
S'TIMConstructor'
p5379
sg9
I00
sg10
(lp5380
sg12
(lp5381
g1249
asg29
(dp5382
sbsS'TAlignmentList'
p5383
(ipyprops
ClassDefinition
p5384
(dp5385
g4
I0
sg5
I01
sg6
g5383
sg7
g143
sg9
I0
sg10
(lp5386
sg12
(lp5387
sg29
(dp5388
sbsS'TDiscrete2Continuous'
p5389
(i__main__
ClassDefinition
p5390
(dp5391
g4
I1
sg5
I01
sg6
g5389
sg7
S'TTransformValue'
p5392
sg9
I00
sg10
(lp5393
sg12
(lp5394
(S'int'
p5395
S'value'
p5396
g5396
S'target value'
p5397
I0
I0
I01
Ntp5398
a(S'bool'
p5399
S'invert'
p5400
g5400
S'give 1.0 to values not equal to the target'
p5401
I0
I0
I01
Ntp5402
a(S'bool'
p5403
S'zeroBased'
p5404
S'zero_based'
p5405
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p5406
I0
I0
I01
Ntp5407
ag824
asg29
(dp5408
sbsS'TDomainDiscretization'
p5409
(i__main__
ClassDefinition
p5410
(dp5411
g4
I1
sg5
I01
sg6
g5409
sg7
S'TOrange'
p5412
sg9
I00
sg10
(lp5413
sg12
(lp5414
(S'TDiscretization'
p5415
S'discretization'
p5416
g5416
S'discretization'
p5417
I0
I0
I00
Ntp5418
asg29
(dp5419
sbsS'TColumnAssessor_m'
p5420
(i__main__
ClassDefinition
p5421
(dp5422
g4
I1
sg5
I01
sg6
g5420
sg7
S'TColumnAssessor'
p5423
sg9
I00
sg10
(lp5424
sg12
(lp5425
(S'float'
p5426
g1212
g1212
S'm for m-estimate'
p5427
I0
I0
I01
Ntp5428
asg29
(dp5429
sbsS'TImputer_defaults'
p5430
(i__main__
ClassDefinition
p5431
(dp5432
g4
I1
sg5
I01
sg6
g5430
sg7
S'TImputer'
p5433
sg9
I00
sg10
(lp5434
sg12
(lp5435
(S'TExample'
p5436
S'defaults'
p5437
g5437
S'values that are to be inserted instead of missing ones'
p5438
I0
I0
I00
Ntp5439
asg29
(dp5440
sbsS'TRuleEvaluator_mEVC'
p5441
(i__main__
ClassDefinition
p5442
(dp5443
g4
I1
sg5
I01
sg6
g5441
sg7
S'TRuleEvaluator'
p5444
sg9
I00
sg10
(lp5445
sg12
(lp5446
(S'float'
p5447
g1212
g1212
S'Parameter m for m-estimate after EVC correction'
p5448
I0
I0
I01
Ntp5449
a(S'TEVDistGetter'
p5450
S'evDistGetter'
p5451
S'ev_dist_getter'
p5452
S'get EVC distribution for chi correction'
p5453
I0
I0
I00
Ntp5454
a(S'TVariable'
p5455
S'probVar'
p5456
S'prob_var'
p5457
S'probability coverage variable (meta usually)'
p5458
I0
I0
I00
Ntp5459
a(S'TRuleValidator'
p5460
S'validator'
p5461
g5461
S'rule validator for best rule'
p5462
I0
I0
I00
Ntp5463
a(S'int'
p5464
S'min_improved'
p5465
g5465
S'minimal number of improved examples'
p5466
I0
I0
I01
Ntp5467
a(S'float'
p5468
S'min_improved_perc'
p5469
g5469
S'minimal percentage of improved examples'
p5470
I0
I0
I01
Ntp5471
a(S'TRule'
p5472
S'bestRule'
p5473
S'best_rule'
p5474
S'best rule found and evaluated given conditions (min_improved, validator)'
p5475
I0
I0
I00
Ntp5476
a(S'float'
p5477
S'ruleAlpha'
p5478
S'rule_alpha'
p5479
S"minimal 'true' rule significance"
p5480
I0
I0
I01
Ntp5481
a(S'float'
p5482
S'attributeAlpha'
p5483
S'attribute_alpha'
p5484
S'minimal attribute significance'
p5485
I0
I0
I01
Ntp5486
a(S'bool'
p5487
S'returnExpectedProb'
p5488
S'return_expected_prob'
p5489
S'if true, evaluator returns expected class probability, if false, current class probability'
p5490
I0
I0
I01
Ntp5491
a(S'int'
p5492
S'optimismReduction'
p5493
S'optimism_reduction'
p5494
S'to select optimstic (0), pessimistic (1) or EVC (2) evaluation'
p5495
I0
I0
I01
Ntp5496
asg29
(dp5497
sbsS'TContingency'
p5498
(i__main__
ClassDefinition
p5499
(dp5500
g4
I1
sg5
I01
sg6
g5498
sg7
S'TOrange'
p5501
sg9
I00
sg10
(lp5502
sg12
(lp5503
g1684
ag1689
ag1695
ag1700
ag1705
ag1710
asg29
(dp5504
sbsS'TImputer_Python'
p5505
(i__main__
ClassDefinition
p5506
(dp5507
g4
I1
sg5
I01
sg6
g5505
sg7
S'TImputer'
p5508
sg9
I00
sg10
(lp5509
sg12
(lp5510
sg29
(dp5511
sbsS'TClassifierGenerator'
p5512
(i__main__
ClassDefinition
p5513
(dp5514
g4
I1
sg5
I01
sg6
g5512
sg7
S'TExampleGenerator'
p5515
sg9
I00
sg10
(lp5516
sg12
(lp5517
(S'TClassifier'
p5518
S'classify'
p5519
g5519
S'classifier'
p5520
I0
I0
I00
Ntp5521
ag306
ag310
asg29
(dp5522
sbsS'TRuleDataStoppingCriteria_Python'
p5523
(i__main__
ClassDefinition
p5524
(dp5525
g4
I1
sg5
I01
sg6
g5523
sg7
S'TRuleDataStoppingCriteria'
p5526
sg9
I00
sg10
(lp5527
sg12
(lp5528
sg29
(dp5529
sbsS'TTreeDescender_UnknownToCommonSelector'
p5530
(i__main__
ClassDefinition
p5531
(dp5532
g4
I1
sg5
I01
sg6
g5530
sg7
g1599
sg9
I0
sg10
(lp5533
sg12
(lp5534
sg29
(dp5535
sbsS'THierarchicalCluster'
p5536
(i__main__
ClassDefinition
p5537
(dp5538
g4
I1
sg5
I01
sg6
g5536
sg7
S'TOrange'
p5539
sg9
I00
sg10
(lp5540
sg12
(lp5541
(S'THierarchicalClusterList'
p5542
S'branches'
p5543
g5543
S'subclusters'
p5544
I0
I0
I00
Ntp5545
a(S'float'
p5546
S'height'
p5547
g5547
S'height'
p5548
I0
I0
I01
Ntp5549
a(S'TIntList'
p5550
S'mapping'
p5551
g5551
S'indices to the list of all elements in the clustering'
p5552
I0
I0
I00
Ntp5553
a(S'int'
p5554
S'first'
p5555
g5555
S"the index into 'elements' to the first element of the cluster"
p5556
I0
I0
I01
Ntp5557
a(S'int'
p5558
S'last'
p5559
g5559
S"the index into 'elements' to the one after the last element of the cluster"
p5560
I0
I0
I01
Ntp5561
asg29
(dp5562
sbsS'TPreprocessIM'
p5563
(i__main__
ClassDefinition
p5564
(dp5565
g4
I1
sg5
I01
sg6
g5563
sg7
S'TOrange'
p5566
sg9
I01
sg10
(lp5567
sg12
(lp5568
sg29
(dp5569
sbsS'TLongList'
p5570
(ipyprops
ClassDefinition
p5571
(dp5572
g4
I0
sg5
I01
sg6
g5570
sg7
g143
sg9
I0
sg10
(lp5573
sg12
(lp5574
sg29
(dp5575
sbsS'TBasketFeeder'
p5576
(i__main__
ClassDefinition
p5577
(dp5578
g4
I1
sg5
I01
sg6
g5576
sg7
S'TOrange'
p5579
sg9
I00
sg10
(lp5580
sg12
(lp5581
(S'bool'
p5582
S'dontStore'
p5583
S'dont_store'
p5584
S'disables items storing'
p5585
I0
I0
I01
Ntp5586
a(S'bool'
p5587
S'dontCheckStored'
p5588
S'dont_check_stored'
p5589
S'disables items lookup in the global cache'
p5590
I0
I0
I01
Ntp5591
a(S'TDomain'
p5592
S'domain'
p5593
g5593
S'domain where the meta attributes are stored'
p5594
I0
I0
I00
Ntp5595
a(S'TDomain'
p5596
S'sourceDomain'
p5597
S'source_domain'
p5598
S'domain with items that can be reused'
p5599
I0
I0
I00
Ntp5600
asg29
(dp5601
sbsS'TRuleEvaluator_Laplace'
p5602
(i__main__
ClassDefinition
p5603
(dp5604
g4
I1
sg5
I01
sg6
g5602
sg7
S'TRuleEvaluator'
p5605
sg9
I00
sg10
(lp5606
sg12
(lp5607
sg29
(dp5608
sbsS'TColumnAssessor_N'
p5609
(i__main__
ClassDefinition
p5610
(dp5611
g4
I1
sg5
I01
sg6
g5609
sg7
S'TColumnAssessor'
p5612
sg9
I00
sg10
(lp5613
sg12
(lp5614
sg29
(dp5615
sbsS'TSubsetsGenerator_minMaxSize_iterator'
p5616
(i__main__
ClassDefinition
p5617
(dp5618
g4
I1
sg5
I01
sg6
g5616
sg7
S'TSubsetsGenerator_iterator'
p5619
sg9
I00
sg10
(lp5620
sg12
(lp5621
(S'int'
p5622
g2593
g2593
g573
I01
I0
I01
Ntp5623
a(S'int'
p5624
S'max'
p5625
g5625
S'maximal subset size'
p5626
I0
I0
I01
Ntp5627
a(S'bool'
p5628
S'moreToCome'
p5629
S'more_to_come'
p5630
g573
I01
I0
I01
Ntp5631
ag510
asg29
(dp5632
sbsS'TExamplesDistanceConstructor_Lp'
p5633
(i__main__
ClassDefinition
p5634
(dp5635
g4
I1
sg5
I01
sg6
g5633
sg7
S'TExamplesDistanceConstructor_Normalized'
p5636
sg9
I00
sg10
(lp5637
sg12
(lp5638
(S'float'
p5639
g2292
g2292
g2292
I0
I0
I01
Ntp5640
ag2125
ag2130
ag1367
asg29
(dp5641
sbsS'TComputeDomainContingency'
p5642
(i__main__
ClassDefinition
p5643
(dp5644
g4
I1
sg5
I01
sg6
g5642
sg7
S'TOrange'
p5645
sg9
I00
sg10
(lp5646
sg12
(lp5647
g28
asg29
(dp5648
sbsS'TExample'
p5649
(i__main__
ClassDefinition
p5650
(dp5651
g4
I1
sg5
I01
sg6
g5649
sg7
S'TOrange'
p5652
sg9
I00
sg10
(lp5653
sg12
(lp5654
g2699
ag2702
asg29
(dp5655
sbsS'TFixedDiscretization'
p5656
(i__main__
ClassDefinition
p5657
(dp5658
g4
I1
sg5
I01
sg6
g5656
sg7
S'TDiscretization'
p5659
sg9
I00
sg10
(lp5660
sg12
(lp5661
(S'TFloatList'
p5662
S'points'
p5663
g5663
S'cut-off points'
p5664
I0
I0
I00
Ntp5665
asg29
(dp5666
sbsS'TDomainContingency'
p5667
(ipyprops
ClassDefinition
p5668
(dp5669
g4
I0
sg5
I01
sg6
S'TDomainContingency'
p5670
sg7
g143
sg9
I0
sg10
(lp5671
sg12
(lp5672
sg29
(dp5673
sbsS'TPreprocessor_addGaussianClassNoise'
p5674
(i__main__
ClassDefinition
p5675
(dp5676
g4
I1
sg5
I01
sg6
g5674
sg7
S'TPreprocessor'
p5677
sg9
I00
sg10
(lp5678
sg12
(lp5679
(S'float'
p5680
S'deviation'
p5681
g5681
S'class deviation'
p5682
I0
I0
I01
Ntp5683
a(S'TRandomGenerator'
p5684
S'randomGenerator'
p5685
S'random_generator'
p5686
S'random number generator'
p5687
I0
I0
I00
Ntp5688
asg29
(dp5689
sbsS'TRuleDataStoppingCriteria'
p5690
(i__main__
ClassDefinition
p5691
(dp5692
g4
I1
sg5
I01
sg6
g5690
sg7
S'TOrange'
p5693
sg9
I01
sg10
(lp5694
sg12
(lp5695
sg29
(dp5696
sbsS'TPreprocessor_filter'
p5697
(i__main__
ClassDefinition
p5698
(dp5699
g4
I1
sg5
I01
sg6
g5697
sg7
S'TPreprocessor'
p5700
sg9
I00
sg10
(lp5701
sg12
(lp5702
(S'TFilter'
p5703
S'filter'
p5704
g5704
S'filter'
p5705
I0
I0
I00
Ntp5706
asg29
(dp5707
sbsS'TSOMNodeList'
p5708
(ipyprops
ClassDefinition
p5709
(dp5710
g4
I0
sg5
I01
sg6
g5708
sg7
g143
sg9
I0
sg10
(lp5711
sg12
(lp5712
sg29
(dp5713
sbsS'TExampleDistBySorting'
p5714
(i__main__
ClassDefinition
p5715
(dp5716
g4
I1
sg5
I01
sg6
g5714
sg7
S'TExampleDistConstructor'
p5717
sg9
I00
sg10
(lp5718
sg12
(lp5719
sg29
(dp5720
sbsS'TGraphAsMatrix'
p5721
(i__main__
ClassDefinition
p5722
(dp5723
g4
I1
sg5
I01
sg6
g5721
sg7
S'TGraph'
p5724
sg9
I00
sg10
(lp5725
sg12
(lp5726
g1490
ag1495
ag1499
asg29
(dp5727
sbsS'TMDS'
p5728
(i__main__
ClassDefinition
p5729
(dp5730
g4
I1
sg5
I0
sg6
g5728
sg7
S'TOrange'
p5731
sg9
I00
sg10
(lp5732
sg12
(lp5733
(S'TSymMatrix'
p5734
S'distances'
p5735
g5735
S'SymMatrix that holds the original real distances'
p5736
I0
I0
I00
Ntp5737
a(S'TSymMatrix'
p5738
S'projectedDistances'
p5739
S'projected_distances'
p5740
S'SymMatrix that holds the projected distances'
p5741
I0
I0
I00
Ntp5742
a(S'TSymMatrix'
p5743
S'stress'
p5744
g5744
S'SymMatrix that holds the pointwise stress values'
p5745
I0
I0
I00
Ntp5746
a(S'TFloatListList'
p5747
S'points'
p5748
g5748
S'Holds the current projected point configuration'
p5749
I0
I0
I00
Ntp5750
a(S'TProgressCallback'
p5751
S'progressCallback'
p5752
S'progress_callback'
p5753
S'progressCallback function'
p5754
I0
I0
I00
Ntp5755
a(S'bool'
p5756
S'freshD'
p5757
S'fresh_d'
p5758
g573
I01
I0
I01
Ntp5759
a(S'float'
p5760
S'avgStress'
p5761
S'avg_stress'
p5762
g573
I01
I0
I01
Ntp5763
a(S'int'
p5764
S'dim'
p5765
g5765
g573
I01
I0
I01
Ntp5766
a(S'int'
p5767
S'n'
p5768
g5768
g573
I01
I0
I01
Ntp5769
asg29
(dp5770
sbsS'TValueFilter_discrete'
p5771
(i__main__
ClassDefinition
p5772
(dp5773
g4
I1
sg5
I01
sg6
g5771
sg7
S'TValueFilter'
p5774
sg9
I00
sg10
(lp5775
sg12
(lp5776
(S'TValueList'
p5777
S'values'
p5778
g5778
S'accepted values'
p5779
I0
I0
I00
Ntp5780
a(S'bool'
p5781
S'negate'
p5782
g5782
S'negate'
p5783
I0
I0
I01
Ntp5784
ag1061
ag1066
asg29
(dp5785
sbsS'TAssociationRulesInducer'
p5786
(i__main__
ClassDefinition
p5787
(dp5788
g4
I1
sg5
I01
sg6
g5786
sg7
S'TOrange'
p5789
sg9
I00
sg10
(lp5790
sg12
(lp5791
(S'int'
p5792
S'maxItemSets'
p5793
S'max_item_sets'
p5794
S'maximal number of itemsets (increase if you want)'
p5795
I0
I0
I01
Ntp5796
a(S'float'
p5797
S'confidence'
p5798
g5798
S'required confidence'
p5799
I0
I0
I01
Ntp5800
a(S'float'
p5801
S'support'
p5802
g5802
S'required support'
p5803
I0
I0
I01
Ntp5804
a(S'bool'
p5805
S'classificationRules'
p5806
S'classification_rules'
p5807
S'if true, rules will have the class and only the class attribute on the right-hand side'
p5808
I0
I0
I01
Ntp5809
a(S'bool'
p5810
S'storeExamples'
p5811
S'store_examples'
p5812
S'if true, each rule is going to have tables with references to examples which match its left side or both sides'
p5813
I0
I0
I01
Ntp5814
asg29
(dp5815
sbsS'TMakeRandomIndices2'
p5816
(i__main__
ClassDefinition
p5817
(dp5818
g4
I1
sg5
I01
sg6
g5816
sg7
S'TMakeRandomIndices'
p5819
sg9
I00
sg10
(lp5820
sg12
(lp5821
(S'float'
p5822
S'p0'
p5823
g5823
S"a proportion or a number of 0's"
p5824
I0
I0
I01
Ntp5825
ag718
ag722
ag727
asg29
(dp5826
sbsS'TTreeStopCriteria'
p5827
(i__main__
ClassDefinition
p5828
(dp5829
g4
I1
sg5
I01
sg6
g5827
sg7
S'TOrange'
p5830
sg9
I00
sg10
(lp5831
sg12
(lp5832
sg29
(dp5833
sbsS'TPreprocessor_addMissingClasses'
p5834
(i__main__
ClassDefinition
p5835
(dp5836
g4
I1
sg5
I01
sg6
g5834
sg7
S'TPreprocessor'
p5837
sg9
I00
sg10
(lp5838
sg12
(lp5839
(S'float'
p5840
S'proportion'
p5841
g5841
S'proportion of removed class values'
p5842
I0
I0
I01
Ntp5843
a(S'int'
p5844
S'specialType'
p5845
S'special_type'
p5846
S'special value type (1=DC, 2=DK)'
p5847
I0
I0
I01
Ntp5848
a(S'TRandomGenerator'
p5849
S'randomGenerator'
p5850
S'random_generator'
p5851
S'random number generator'
p5852
I0
I0
I00
Ntp5853
asg29
(dp5854
sbsS'TLookupLearner'
p5855
(i__main__
ClassDefinition
p5856
(dp5857
g4
I1
sg5
I01
sg6
g5855
sg7
S'TLearner'
p5858
sg9
I00
sg10
(lp5859
sg12
(lp5860
(S'TLearner'
p5861
S'learnerForUnknown'
p5862
S'learner_for_unknown'
p5863
S'a learner for classifying cases not found in the table'
p5864
I0
I0
I00
Ntp5865
a(S'bool'
p5866
S'allowFastLookups'
p5867
S'allow_fast_lookups'
p5868
S'if true, it constructs LookupClassifiers for <=3 attributes'
p5869
I0
I0
I01
Ntp5870
a(S'int'
p5871
S'unknownsHandling'
p5872
S'unknowns_handling'
p5873
S'0 omit examples with unknowns, 1 distribute them, 2 keep them in table'
p5874
I0
I0
I01
Ntp5875
ag110
asg29
(dp5876
sbsS'TBasketExampleGenerator'
p5877
(i__main__
ClassDefinition
p5878
(dp5879
g4
I1
sg5
I01
sg6
g5877
sg7
S'TFileExampleGenerator'
p5880
sg9
I00
sg10
(lp5881
sg12
(lp5882
g1655
ag1660
ag1665
ag306
ag310
asg29
(dp5883
sbsS'TRuleEvaluator_Entropy'
p5884
(i__main__
ClassDefinition
p5885
(dp5886
g4
I1
sg5
I01
sg6
g5884
sg7
S'TRuleEvaluator'
p5887
sg9
I00
sg10
(lp5888
sg12
(lp5889
sg29
(dp5890
sbsS'TMeasureAttribute_chiSquare'
p5891
(i__main__
ClassDefinition
p5892
(dp5893
g4
I1
sg5
I01
sg6
g5891
sg7
S'TMeasureAttributeFromProbabilities'
p5894
sg9
I00
sg10
(lp5895
sg12
(lp5896
(S'bool'
p5897
S'computeProbabilities'
p5898
S'compute_probabilities'
p5899
g573
I0
I0
I01
Ntp5900
ag910
ag915
ag921
ag926
ag931
ag936
ag941
asg29
(dp5901
sbsS'TDistribution'
p5902
(i__main__
ClassDefinition
p5903
(dp5904
g4
I1
sg5
I01
sg6
g5902
sg7
S'TSomeValue'
p5905
sg9
I01
sg10
(lp5906
sg12
(lp5907
g1132
ag1136
ag1140
ag1144
ag1148
ag1153
ag1158
ag1163
asg29
(dp5908
sbsS'TExamplesDistance_DTW'
p5909
(i__main__
ClassDefinition
p5910
(dp5911
g4
I1
sg5
I01
sg6
g5909
sg7
S'TExamplesDistance_Normalized'
p5912
sg9
I00
sg10
(lp5913
sg12
(lp5914
(S'int'
p5915
S'dtwDistance'
p5916
S'dtw_distance'
p5917
S' distance measure between individual attributes (default: square of difference)'
p5918
I0
I0
I01
S'ExamplesDistance_DTW_DistanceType'
p5919
tp5920
ag454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp5921
S'DistanceType'
p5922
(lp5923
(S'Euclidean'
p5924
I0
tp5925
a(S'Derivative'
p5926
I1
tp5927
assbsS'TTreeExampleSplitter_UnknownsToRandom'
p5928
(i__main__
ClassDefinition
p5929
(dp5930
g4
I1
sg5
I01
sg6
g5928
sg7
S'TTreeExampleSplitter'
p5931
sg9
I00
sg10
(lp5932
sg12
(lp5933
sg29
(dp5934
sbsS'TTreePruner_m'
p5935
(i__main__
ClassDefinition
p5936
(dp5937
g4
I1
sg5
I01
sg6
g5935
sg7
S'TTreePruner'
p5938
sg9
I00
sg10
(lp5939
sg12
(lp5940
(S'float'
p5941
g1212
g1212
S'm for m-estimate'
p5942
I0
I0
I01
Ntp5943
asg29
(dp5944
sbsS'TImputer'
p5945
(i__main__
ClassDefinition
p5946
(dp5947
g4
I1
sg5
I01
sg6
g5945
sg7
S'TOrange'
p5948
sg9
I01
sg10
(lp5949
sg12
(lp5950
sg29
(dp5951
sbsS'TExamplesDistanceConstructor_DTW'
p5952
(i__main__
ClassDefinition
p5953
(dp5954
g4
I1
sg5
I01
sg6
g5952
sg7
S'TExamplesDistanceConstructor_Normalized'
p5955
sg9
I00
sg10
(lp5956
sg12
(lp5957
(S'int'
p5958
S'dtwDistance'
p5959
S'dtw_distance'
p5960
S'distance measure between individual attributes (default: square of difference)'
p5961
I0
I0
I01
Ntp5962
ag2125
ag2130
ag1367
asg29
(dp5963
sbsS'TStopIMClusteringByAssessor_n'
p5964
(i__main__
ClassDefinition
p5965
(dp5966
g4
I1
sg5
I01
sg6
g5964
sg7
S'TStopIMClusteringByAssessor'
p5967
sg9
I00
sg10
(lp5968
sg12
(lp5969
(S'int'
p5970
g1018
g1018
S'number of clusters'
p5971
I0
I0
I01
Ntp5972
asg29
(dp5973
sbsS'TVarListList'
p5974
(ipyprops
ClassDefinition
p5975
(dp5976
g4
I0
sg5
I01
sg6
g5974
sg7
g143
sg9
I0
sg10
(lp5977
sg12
(lp5978
sg29
(dp5979
sbsS'TRandomGenerator'
p5980
(i__main__
ClassDefinition
p5981
(dp5982
g4
I1
sg5
I01
sg6
g5980
sg7
S'TOrange'
p5983
sg9
I00
sg10
(lp5984
sg12
(lp5985
(S'int'
p5986
S'initseed'
p5987
g5987
S'initial random seed'
p5988
I0
I0
I01
Ntp5989
a(S'int'
p5990
S'uses'
p5991
g5991
S'#times a number was returned'
p5992
I0
I0
I01
Ntp5993
asg29
(dp5994
sbsS'TThresholdCA'
p5995
(i__main__
ClassDefinition
p5996
(dp5997
g4
I1
sg5
I01
sg6
g5995
sg7
S'TOrange'
p5998
sg9
I00
sg10
(lp5999
sg12
(lp6000
sg29
(dp6001
sbsS'TFloatListList'
p6002
(ipyprops
ClassDefinition
p6003
(dp6004
g4
I0
sg5
I01
sg6
g6002
sg7
g143
sg9
I0
sg10
(lp6005
sg12
(lp6006
sg29
(dp6007
sbsS'TPreprocessor_imputeByLearner'
p6008
(i__main__
ClassDefinition
p6009
(dp6010
g4
I1
sg5
I01
sg6
g6008
sg7
S'TPreprocessor'
p6011
sg9
I00
sg10
(lp6012
sg12
(lp6013
(S'TLearner'
p6014
S'learner'
p6015
g6015
S'learner used for inducing a model for imputation'
p6016
I0
I0
I00
Ntp6017
asg29
(dp6018
sbsS'TRuleBeamRefiner_Python'
p6019
(i__main__
ClassDefinition
p6020
(dp6021
g4
I1
sg5
I01
sg6
g6019
sg7
S'TRuleBeamRefiner'
p6022
sg9
I00
sg10
(lp6023
sg12
(lp6024
sg29
(dp6025
sbsS'TClassifierFromVarFD'
p6026
(i__main__
ClassDefinition
p6027
(dp6028
g4
I1
sg5
I01
sg6
g6026
sg7
S'TClassifierFD'
p6029
sg9
I00
sg10
(lp6030
sg12
(lp6031
(S'int'
p6032
S'position'
p6033
g6033
S'position of the attribute in domain'
p6034
I0
I0
I01
Ntp6035
a(S'TTransformValue'
p6036
S'transformer'
p6037
g6037
S'transformer'
p6038
I0
I0
I00
Ntp6039
a(S'TDistribution'
p6040
S'distributionForUnknown'
p6041
S'distribution_for_unknown'
p6042
S'distribution for unknown value'
p6043
I0
I0
I00
Ntp6044
a(S'bool'
p6045
S'transformUnknowns'
p6046
S'transform_unknowns'
p6047
S'if false (default is true), unknowns stay unknown or are changed into distribution if given'
p6048
I0
I0
I01
Ntp6049
ag291
ag94
ag99
asg29
(dp6050
sbsS'TSimpleTreeLearner'
p6051
(i__main__
ClassDefinition
p6052
(dp6053
g4
I1
sg5
I01
sg6
g6051
sg7
S'TLearner'
p6054
sg9
I00
sg10
(lp6055
sg12
(lp6056
(S'float'
p6057
S'maxMajority'
p6058
S'max_majority'
p6059
g573
I0
I0
I01
Ntp6060
a(S'int'
p6061
S'minInstances'
p6062
S'min_instances'
p6063
g573
I0
I0
I01
Ntp6064
a(S'int'
p6065
S'maxDepth'
p6066
S'max_depth'
p6067
g573
I0
I0
I01
Ntp6068
a(S'float'
p6069
S'skipProb'
p6070
S'skip_prob'
p6071
g573
I0
I0
I01
Ntp6072
a(S'TRandomGenerator'
p6073
S'randomGenerator'
p6074
S'random_generator'
p6075
g573
I0
I0
I00
Ntp6076
ag110
asg29
(dp6077
sbsS'TImputer_model'
p6078
(i__main__
ClassDefinition
p6079
(dp6080
g4
I1
sg5
I01
sg6
g6078
sg7
S'TImputer'
p6081
sg9
I00
sg10
(lp6082
sg12
(lp6083
(S'TClassifierList'
p6084
S'models'
p6085
g6085
S'classifiers'
p6086
I0
I0
I00
Ntp6087
asg29
(dp6088
sbsS'TLogRegLearner'
p6089
(i__main__
ClassDefinition
p6090
(dp6091
g4
I1
sg5
I01
sg6
g6089
sg7
S'TLearner'
p6092
sg9
I00
sg10
(lp6093
sg12
(lp6094
(S'TLogRegFitter'
p6095
S'fitter'
p6096
g6096
S'fits beta coefficients and calculates beta errors.'
p6097
I0
I0
I00
Ntp6098
a(S'TImputerConstructor'
p6099
S'imputerConstructor'
p6100
S'imputer_constructor'
p6101
S'if present, it constructs an imputer for unknown values'
p6102
I0
I0
I00
Ntp6103
a(S'TDomainContinuizer'
p6104
S'domainContinuizer'
p6105
S'domain_continuizer'
p6106
S'if present, it constructs continuous domain if needed; if absent, default is used'
p6107
I0
I0
I00
Ntp6108
ag110
asg29
(dp6109
sbsS'TPreprocessor_takeMissing'
p6110
(i__main__
ClassDefinition
p6111
(dp6112
g4
I1
sg5
I01
sg6
g6110
sg7
S'TPreprocessor'
p6113
sg9
I00
sg10
(lp6114
sg12
(lp6115
sg29
(dp6116
sbsS'TMeasureAttribute_IM'
p6117
(i__main__
ClassDefinition
p6118
(dp6119
g4
I1
sg5
I01
sg6
g6117
sg7
S'TMeasureAttribute'
p6120
sg9
I00
sg10
(lp6121
sg12
(lp6122
(S'TIMConstructor'
p6123
S'IMconstructor'
p6124
g6124
S'incompatibility matrix constructor'
p6125
I0
I0
I00
Ntp6126
a(S'TColumnAssessor'
p6127
S'columnAssessor'
p6128
S'column_assessor'
p6129
S'column quality assessor'
p6130
I0
I0
I00
Ntp6131
ag926
ag931
ag936
ag941
asg29
(dp6132
sbsS'TFeatureByDistributions'
p6133
(i__main__
ClassDefinition
p6134
(dp6135
g4
I1
sg5
I01
sg6
g6133
sg7
S'TFeatureInducer'
p6136
sg9
I00
sg10
(lp6137
sg12
(lp6138
(S'TClustersFromDistributions'
p6139
S'clustersFromDistributions'
p6140
S'clusters_from_distributions'
p6141
S'clustering algorithm'
p6142
I0
I0
I00
Ntp6143
a(S'int'
p6144
S'completion'
p6145
g6145
S' decides how to determine the class for points not covered by any cluster'
p6146
I0
I0
I01
S'FeatureByDistributions_Completion'
p6147
tp6148
asg29
(dp6149
S'Completion'
p6150
(lp6151
(S'NoCompletion'
p6152
S'completion_no'
p6153
tp6154
a(S'CompletionByDefault'
p6155
S'completion_default'
p6156
tp6157
a(S'CompletionByBayes'
p6158
S'completion_bayes'
p6159
tp6160
assbsS'TCostMatrix'
p6161
(i__main__
ClassDefinition
p6162
(dp6163
g4
I1
sg5
I01
sg6
g6161
sg7
S'TOrange'
p6164
sg9
I00
sg10
(lp6165
sg12
(lp6166
(S'TVariable'
p6167
S'classVar'
p6168
S'class_var'
p6169
S'attribute to which the matrix applies'
p6170
I0
I0
I00
Ntp6171
a(S'int'
p6172
S'dimension'
p6173
g6173
S'dimension (should equal classVar.noOfValues())'
p6174
I01
I0
I01
Ntp6175
asg29
(dp6176
sbsS'TStopIMClusteringByAssessor_noProfit'
p6177
(i__main__
ClassDefinition
p6178
(dp6179
g4
I1
sg5
I01
sg6
g6177
sg7
S'TStopIMClusteringByAssessor'
p6180
sg9
I00
sg10
(lp6181
sg12
(lp6182
(S'float'
p6183
S'minProfitProportion'
p6184
S'min_profit_proportion'
p6185
S'minimal allowable profit proportion'
p6186
I0
I0
I01
Ntp6187
asg29
(dp6188
sbsS'TRemoveUnusedValues'
p6189
(i__main__
ClassDefinition
p6190
(dp6191
g4
I1
sg5
I01
sg6
g6189
sg7
S'TOrange'
p6192
sg9
I00
sg10
(lp6193
sg12
(lp6194
(S'bool'
p6195
S'removeOneValued'
p6196
S'remove_one_valued'
p6197
S'if true (default is false), one valued attributes are also removed'
p6198
I0
I0
I01
Ntp6199
asg29
(dp6200
sbsS'TExamplesDistance_Normalized'
p6201
(i__main__
ClassDefinition
p6202
(dp6203
g4
I1
sg5
I01
sg6
g6201
sg7
S'TExamplesDistance'
p6204
sg9
I01
sg10
(lp6205
sg12
(lp6206
g454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp6207
sbsS'TExamplesDistance_Euclidean'
p6208
(i__main__
ClassDefinition
p6209
(dp6210
g4
I1
sg5
I01
sg6
g6208
sg7
S'TExamplesDistance_Normalized'
p6211
sg9
I00
sg10
(lp6212
sg12
(lp6213
(S'TDomainDistributions'
p6214
S'distributions'
p6215
g6215
S'distributions (of discrete attributes only)'
p6216
I0
I0
I00
Ntp6217
a(S'TAttributedFloatList'
p6218
S'bothSpecialDist'
p6219
S'both_special_dist'
p6220
S'distances between discrete attributes if both values are unknown'
p6221
I0
I0
I00
Ntp6222
ag454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp6223
sbsS'TPreprocessor_take'
p6224
(i__main__
ClassDefinition
p6225
(dp6226
g4
I1
sg5
I01
sg6
g6224
sg7
S'TPreprocessor'
p6227
sg9
I00
sg10
(lp6228
sg12
(lp6229
(S'TVariableFilterMap'
p6230
S'values'
p6231
g6231
S'variable-filter pairs'
p6232
I0
I0
I00
Ntp6233
a(S'bool'
p6234
S'conjunction'
p6235
g6235
S'decides whether to take conjunction or disjunction of values'
p6236
I0
I0
I01
Ntp6237
asg29
(dp6238
sbsS'TIMConstructor'
p6239
(i__main__
ClassDefinition
p6240
(dp6241
g4
I1
sg5
I01
sg6
g6239
sg7
S'TOrange'
p6242
sg9
I01
sg10
(lp6243
sg12
(lp6244
g1249
asg29
(dp6245
sbsS'TRuleFinder_Python'
p6246
(i__main__
ClassDefinition
p6247
(dp6248
g4
I1
sg5
I01
sg6
g6246
sg7
S'TRuleFinder'
p6249
sg9
I00
sg10
(lp6250
sg12
(lp6251
g4084
ag4087
asg29
(dp6252
sbsS'TTabDelimExampleGenerator'
p6253
(i__main__
ClassDefinition
p6254
(dp6255
g4
I1
sg5
I01
sg6
g6253
sg7
S'TFileExampleGenerator'
p6256
sg9
I00
sg10
(lp6257
sg12
(lp6258
(S'TIntList'
p6259
S'attributeTypes'
p6260
S'attribute_types'
p6261
S'types of attributes (-1 normal, 0 skip, <-1 = meta ID)'
p6262
I0
I0
I00
Ntp6263
a(S'int'
p6264
S'classPos'
p6265
S'class_pos'
p6266
S'position of the class attribute'
p6267
I0
I0
I01
Ntp6268
a(S'TIntList'
p6269
S'classPoses'
p6270
S'class_poses'
p6271
S'positions of class attributes if there are multiple; otherwise None'
p6272
I0
I0
I00
Ntp6273
a(S'int'
p6274
S'basketPos'
p6275
S'basket_pos'
p6276
S'position of the (virtual) basket attribute'
p6277
I0
I0
I01
Ntp6278
a(S'int'
p6279
S'headerLines'
p6280
S'header_lines'
p6281
S'number of header lines (3 for .tab, 1 for .txt)'
p6282
I0
I0
I01
Ntp6283
a(S'bool'
p6284
S'csv'
p6285
g6285
S"also allow ',' as a separator"
p6286
I0
I0
I01
Ntp6287
a(S'TBasketFeeder'
p6288
S'basketFeeder'
p6289
S'basket_feeder'
p6290
S'takes care of inserting the meta attributes from the basket if need be'
p6291
I0
I0
I00
Ntp6292
ag1655
ag1660
ag1665
ag306
ag310
asg29
(dp6293
sbsS'TRandomClassifier'
p6294
(i__main__
ClassDefinition
p6295
(dp6296
g4
I1
sg5
I01
sg6
g6294
sg7
S'TClassifier'
p6297
sg9
I00
sg10
(lp6298
sg12
(lp6299
(S'TDistribution'
p6300
S'probabilities'
p6301
g6301
S'probabilities of predictions'
p6302
I0
I0
I00
Ntp6303
ag94
ag99
asg29
(dp6304
sbsS'TkNNLearner'
p6305
(i__main__
ClassDefinition
p6306
(dp6307
g4
I1
sg5
I01
sg6
g6305
sg7
S'TLearner'
p6308
sg9
I00
sg10
(lp6309
sg12
(lp6310
(S'float'
p6311
g1208
g1208
S'number of neighbours (0 for sqrt of #examples)'
p6312
I0
I0
I01
Ntp6313
a(S'bool'
p6314
S'rankWeight'
p6315
S'rank_weight'
p6316
S'enable weighting by ranks'
p6317
I0
I0
I01
Ntp6318
a(S'TExamplesDistanceConstructor'
p6319
S'distanceConstructor'
p6320
S'distance_constructor'
p6321
S'metrics'
p6322
I0
I0
I00
Ntp6323
ag110
asg29
(dp6324
sbsS'TTreeDescender_UnknownToNode'
p6325
(i__main__
ClassDefinition
p6326
(dp6327
g4
I1
sg5
I01
sg6
g6325
sg7
g1599
sg9
I0
sg10
(lp6328
sg12
(lp6329
sg29
(dp6330
sbsS'TIntFloatList'
p6331
(ipyprops
ClassDefinition
p6332
(dp6333
g4
I0
sg5
I01
sg6
g6331
sg7
g143
sg9
I0
sg10
(lp6334
sg12
(lp6335
sg29
(dp6336
sbsS'TDistributionAssessor_mf'
p6337
(i__main__
ClassDefinition
p6338
(dp6339
g4
I1
sg5
I01
sg6
g6337
sg7
S'TDistributionAssessor'
p6340
sg9
I00
sg10
(lp6341
sg12
(lp6342
(S'float'
p6343
g1212
g1212
S'm for m-estimate'
p6344
I0
I0
I01
Ntp6345
asg29
(dp6346
sbsS'TExampleClusters'
p6347
(i__main__
ClassDefinition
p6348
(dp6349
g4
I1
sg5
I01
sg6
g6347
sg7
S'TGeneralExampleClustering'
p6350
sg9
I00
sg10
(lp6351
sg12
(lp6352
(S'TExampleCluster'
p6353
S'root'
p6354
g6354
S'root of cluster hierarchy'
p6355
I0
I0
I00
Ntp6356
a(S'float'
p6357
S'quality'
p6358
g6358
S"'quality' of clustering"
p6359
I0
I0
I01
Ntp6360
asg29
(dp6361
sbsS'TExamplesDistance_Python'
p6362
(i__main__
ClassDefinition
p6363
(dp6364
g4
I1
sg5
I01
sg6
g6362
sg7
S'TExamplesDistance'
p6365
sg9
I00
sg10
(lp6366
sg12
(lp6367
sg29
(dp6368
sbsS'TCostLearner'
p6369
(i__main__
ClassDefinition
p6370
(dp6371
g4
I1
sg5
I01
sg6
g6369
sg7
S'TMajorityLearner'
p6372
sg9
I00
sg10
(lp6373
sg12
(lp6374
(S'TCostMatrix'
p6375
S'cost'
p6376
g6376
S'cost matrix'
p6377
I0
I0
I00
Ntp6378
ag850
ag855
ag110
asg29
(dp6379
sbsS'TEFMDataDescription'
p6380
(i__main__
ClassDefinition
p6381
(dp6382
g4
I1
sg5
I01
sg6
g6380
sg7
S'TOrange'
p6383
sg9
I00
sg10
(lp6384
S'domainDistributions'
p6385
asg12
(lp6386
(S'TDomain'
p6387
S'domain'
p6388
g6388
S'domain'
p6389
I01
I0
I00
Ntp6390
asg29
(dp6391
sbsS'TClassifierFD'
p6392
(i__main__
ClassDefinition
p6393
(dp6394
g4
I1
sg5
I01
sg6
g6392
sg7
S'TClassifier'
p6395
sg9
I00
sg10
(lp6396
sg12
(lp6397
g291
ag94
ag99
asg29
(dp6398
sbsS'TPreprocessor_drop'
p6399
(i__main__
ClassDefinition
p6400
(dp6401
g4
I1
sg5
I01
sg6
g6399
sg7
S'TPreprocessor'
p6402
sg9
I00
sg10
(lp6403
sg12
(lp6404
(S'TVariableFilterMap'
p6405
S'values'
p6406
g6406
S'variable-filter pairs'
p6407
I0
I0
I00
Ntp6408
a(S'bool'
p6409
S'conjunction'
p6410
g6410
S'decides whether to take conjunction or disjunction of values'
p6411
I0
I0
I01
Ntp6412
asg29
(dp6413
sbsS'TTreeDescender_UnknownToCommonBranch'
p6414
(i__main__
ClassDefinition
p6415
(dp6416
g4
I1
sg5
I01
sg6
g6414
sg7
g1599
sg9
I0
sg10
(lp6417
sg12
(lp6418
sg29
(dp6419
sbsS'TPreprocessor_addNoise'
p6420
(i__main__
ClassDefinition
p6421
(dp6422
g4
I1
sg5
I01
sg6
g6420
sg7
S'TPreprocessor'
p6423
sg9
I00
sg10
(lp6424
sg12
(lp6425
(S'TVariableFloatMap'
p6426
S'proportions'
p6427
g6427
S'proportion of changed values for individual attributes'
p6428
I0
I0
I00
Ntp6429
a(S'float'
p6430
S'defaultProportion'
p6431
S'default_proportion'
p6432
S'default proportion of changed values (for attributes not specified above)'
p6433
I0
I0
I01
Ntp6434
a(S'TRandomGenerator'
p6435
S'randomGenerator'
p6436
S'random_generator'
p6437
S'random number generator'
p6438
I0
I0
I00
Ntp6439
asg29
(dp6440
sbsS'TStopIMClusteringByAssessor_binary'
p6441
(i__main__
ClassDefinition
p6442
(dp6443
g4
I1
sg5
I01
sg6
g6441
sg7
S'TStopIMClusteringByAssessor'
p6444
sg9
I00
sg10
(lp6445
sg12
(lp6446
sg29
(dp6447
sbsS'TColumnAssessor_mf'
p6448
(i__main__
ClassDefinition
p6449
(dp6450
g4
I1
sg5
I01
sg6
g6448
sg7
S'TColumnAssessor'
p6451
sg9
I00
sg10
(lp6452
sg12
(lp6453
(S'float'
p6454
g1212
g1212
S'm for m-estimate'
p6455
I0
I0
I01
Ntp6456
asg29
(dp6457
sbsS'TKruskalStress'
p6458
(i__main__
ClassDefinition
p6459
(dp6460
g4
I1
sg5
I0
sg6
g6458
sg7
S'TStressFunc'
p6461
sg9
I00
sg10
(lp6462
sg12
(lp6463
sg29
(dp6464
sbsS'TExamplesDistanceConstructor'
p6465
(i__main__
ClassDefinition
p6466
(dp6467
g4
I1
sg5
I01
sg6
g6465
sg7
S'TOrange'
p6468
sg9
I01
sg10
(lp6469
sg12
(lp6470
g1367
asg29
(dp6471
sbsS'TSubsetsGenerator'
p6472
(i__main__
ClassDefinition
p6473
(dp6474
g4
I1
sg5
I01
sg6
g6472
sg7
S'TOrange'
p6475
sg9
I01
sg10
(lp6476
sg12
(lp6477
g207
asg29
(dp6478
sbsS'TPreprocessor_addCensorWeight'
p6479
(i__main__
ClassDefinition
p6480
(dp6481
g4
I1
sg5
I01
sg6
g6479
sg7
S'TPreprocessor'
p6482
sg9
I00
sg10
(lp6483
sg12
(lp6484
(S'TVariable'
p6485
S'outcomeVar'
p6486
S'outcome_var'
p6487
S'outcome variable'
p6488
I0
I0
I00
Ntp6489
a(S'TVariable'
p6490
S'timeVar'
p6491
S'time_var'
p6492
S'time variable'
p6493
I0
I0
I00
Ntp6494
a(S'TValue'
p6495
S'eventValue'
p6496
S'event_value'
p6497
S'event (fail) value'
p6498
I0
I0
I01
Ntp6499
a(S'int'
p6500
S'method'
p6501
g6501
S' weighting method'
p6502
I0
I0
I01
S'Preprocessor_addCensorWeight_Method'
p6503
tp6504
a(S'float'
p6505
S'maxTime'
p6506
S'max_time'
p6507
S'maximal time'
p6508
I0
I0
I01
Ntp6509
a(S'bool'
p6510
S'addComplementary'
p6511
S'add_complementary'
p6512
S'if true (default is false), complementary examples are added for censored examples'
p6513
I0
I0
I01
Ntp6514
asg29
(dp6515
S'Method'
p6516
(lp6517
(S'Linear'
p6518
S'TPreprocessor_addCensorWeight::linear'
p6519
tp6520
a(S'KM'
p6521
S'TPreprocessor_addCensorWeight::km'
p6522
tp6523
a(S'Bayes'
p6524
S'TPreprocessor_addCensorWeight::bayes'
p6525
tp6526
assbsS'TRuleBeamCandidateSelector_Python'
p6527
(i__main__
ClassDefinition
p6528
(dp6529
g4
I1
sg5
I01
sg6
g6527
sg7
S'TRuleBeamCandidateSelector'
p6530
sg9
I00
sg10
(lp6531
sg12
(lp6532
sg29
(dp6533
sbsS'TIntList'
p6534
(ipyprops
ClassDefinition
p6535
(dp6536
g4
I0
sg5
I01
sg6
g6534
sg7
g143
sg9
I0
sg10
(lp6537
sg12
(lp6538
sg29
(dp6539
sbsS'TEntropyDiscretization'
p6540
(i__main__
ClassDefinition
p6541
(dp6542
g4
I1
sg5
I01
sg6
g6540
sg7
S'TDiscretization'
p6543
sg9
I00
sg10
(lp6544
sg12
(lp6545
(S'int'
p6546
S'maxNumberOfIntervals'
p6547
(g6547
g1018
tp6548
S' maximal number of intervals; default = 0 (no limits)'
p6549
I0
I0
I01
Ntp6550
a(S'bool'
p6551
S'forceAttribute'
p6552
(g6552
S'forced'
p6553
tp6554
S' minimal number of intervals; default = 0 (no limits)'
p6555
I0
I0
I01
Ntp6556
asg29
(dp6557
sbsS'TIMBySorting'
p6558
(i__main__
ClassDefinition
p6559
(dp6560
g4
I1
sg5
I01
sg6
g6558
sg7
S'TIMConstructor'
p6561
sg9
I00
sg10
(lp6562
sg12
(lp6563
g1249
asg29
(dp6564
sbsS'TImputerConstructor_asValue'
p6565
(i__main__
ClassDefinition
p6566
(dp6567
g4
I1
sg5
I01
sg6
g6565
sg7
S'TImputerConstructor'
p6568
sg9
I00
sg10
(lp6569
sg12
(lp6570
g164
asg29
(dp6571
sbsS'TGaussianDistribution'
p6572
(i__main__
ClassDefinition
p6573
(dp6574
g4
I1
sg5
I01
sg6
g6572
sg7
S'TDistribution'
p6575
sg9
I00
sg10
(lp6576
sg12
(lp6577
(S'float'
p6578
S'mean'
p6579
g6579
S'mu'
p6580
I0
I0
I01
Ntp6581
a(S'float'
p6582
S'sigma'
p6583
g6583
S'sigma'
p6584
I0
I0
I01
Ntp6585
ag1132
ag1136
ag1140
ag1144
ag1148
ag1153
ag1158
ag1163
asg29
(dp6586
sbsS'TExampleDistVector'
p6587
(i__main__
ClassDefinition
p6588
(dp6589
g4
I1
sg5
I01
sg6
g6587
sg7
S'TOrange'
p6590
sg9
I00
sg10
(lp6591
sg12
(lp6592
sg29
(dp6593
sbsS'TConditionalProbabilityEstimatorList'
p6594
(ipyprops
ClassDefinition
p6595
(dp6596
g4
I0
sg5
I01
sg6
g6594
sg7
g143
sg9
I0
sg10
(lp6597
sg12
(lp6598
sg29
(dp6599
sbsS'TRuleBeamFilter_Width'
p6600
(i__main__
ClassDefinition
p6601
(dp6602
g4
I1
sg5
I01
sg6
g6600
sg7
S'TRuleBeamFilter'
p6603
sg9
I00
sg10
(lp6604
sg12
(lp6605
(S'int'
p6606
S'width'
p6607
g6607
g573
I0
I0
I01
Ntp6608
asg29
(dp6609
sbsS'TProbabilityEstimator'
p6610
(i__main__
ClassDefinition
p6611
(dp6612
g4
I1
sg5
I01
sg6
g6610
sg7
S'TOrange'
p6613
sg9
I01
sg10
(lp6614
sg12
(lp6615
g1522
ag1527
asg29
(dp6616
sbsS'TIMClustering'
p6617
(i__main__
ClassDefinition
p6618
(dp6619
g4
I1
sg5
I01
sg6
g6617
sg7
S'TOrange'
p6620
sg9
I00
sg10
(lp6621
sg12
(lp6622
(S'TIM'
p6623
S'im'
p6624
g6624
S'incompatibilty matrix'
p6625
I0
I0
I00
Ntp6626
a(S'TIntList'
p6627
S'clusters'
p6628
g6628
S'cluster index for each matrix column'
p6629
I0
I0
I00
Ntp6630
a(S'int'
p6631
S'maxCluster'
p6632
S'max_cluster'
p6633
S'the highest cluster index'
p6634
I0
I0
I01
Ntp6635
a(S'float'
p6636
S'quality'
p6637
g6637
S'cluster quality'
p6638
I0
I0
I01
Ntp6639
asg29
(dp6640
sbsS'TRuleStoppingCriteria'
p6641
(i__main__
ClassDefinition
p6642
(dp6643
g4
I1
sg5
I01
sg6
g6641
sg7
S'TOrange'
p6644
sg9
I01
sg10
(lp6645
sg12
(lp6646
sg29
(dp6647
sbsS'TImputerConstructor_model'
p6648
(i__main__
ClassDefinition
p6649
(dp6650
g4
I1
sg5
I01
sg6
g6648
sg7
S'TImputerConstructor'
p6651
sg9
I00
sg10
(lp6652
sg12
(lp6653
(S'TLearner'
p6654
S'learnerDiscrete'
p6655
S'learner_discrete'
p6656
S'learner for discrete attributes'
p6657
I0
I0
I00
Ntp6658
a(S'TLearner'
p6659
S'learnerContinuous'
p6660
S'learner_continuous'
p6661
S'learner for continuous attributes'
p6662
I0
I0
I00
Ntp6663
a(S'bool'
p6664
S'useClass'
p6665
S'use_class'
p6666
S'tells whether to use class value in imputation (default: false)'
p6667
I0
I0
I01
Ntp6668
ag164
asg29
(dp6669
sbsS'TFindNearestConstructor_BruteForce'
p6670
(i__main__
ClassDefinition
p6671
(dp6672
g4
I1
sg5
I01
sg6
g6670
sg7
S'TFindNearestConstructor'
p6673
sg9
I00
sg10
(lp6674
sg12
(lp6675
g1887
ag1892
asg29
(dp6676
sbsS'TImputerConstructor'
p6677
(i__main__
ClassDefinition
p6678
(dp6679
g4
I1
sg5
I01
sg6
g6677
sg7
S'TOrange'
p6680
sg9
I01
sg10
(lp6681
sg12
(lp6682
g164
asg29
(dp6683
sbsS'TPreprocessor'
p6684
(i__main__
ClassDefinition
p6685
(dp6686
g4
I1
sg5
I01
sg6
g6684
sg7
S'TOrange'
p6687
sg9
I01
sg10
(lp6688
sg12
(lp6689
sg29
(dp6690
sbsS'TDiscretizer'
p6691
(i__main__
ClassDefinition
p6692
(dp6693
g4
I1
sg5
I01
sg6
g6691
sg7
S'TTransformValue'
p6694
sg9
I01
sg10
(lp6695
sg12
(lp6696
g824
asg29
(dp6697
sbsS'TIMByRowsPreprocessor'
p6698
(i__main__
ClassDefinition
p6699
(dp6700
g4
I1
sg5
I01
sg6
g6698
sg7
S'TOrange'
p6701
sg9
I01
sg10
(lp6702
sg12
(lp6703
sg29
(dp6704
sbsS'TTreeStopCriteria_common'
p6705
(i__main__
ClassDefinition
p6706
(dp6707
g4
I1
sg5
I01
sg6
g6705
sg7
S'TTreeStopCriteria'
p6708
sg9
I00
sg10
(lp6709
sg12
(lp6710
(S'float'
p6711
S'maxMajority'
p6712
S'max_majority'
p6713
S'a maximal proportion of majority class for division to continue'
p6714
I0
I0
I01
Ntp6715
a(S'float'
p6716
S'minInstances'
p6717
S'min_instances'
p6718
S'a minimal number of examples for division to continue'
p6719
I0
I0
I01
Ntp6720
asg29
(dp6721
sbsS'TTreeStopCriteria_Python'
p6722
(i__main__
ClassDefinition
p6723
(dp6724
g4
I1
sg5
I01
sg6
g6722
sg7
S'TTreeStopCriteria'
p6725
sg9
I00
sg10
(lp6726
sg12
(lp6727
sg29
(dp6728
sbsS'TExamplesDistanceConstructor_Maximal'
p6729
(i__main__
ClassDefinition
p6730
(dp6731
g4
I1
sg5
I01
sg6
g6729
sg7
S'TExamplesDistanceConstructor_Normalized'
p6732
sg9
I00
sg10
(lp6733
sg12
(lp6734
g2125
ag2130
ag1367
asg29
(dp6735
sbsS'TIGByIM'
p6736
(i__main__
ClassDefinition
p6737
(dp6738
g4
I1
sg5
I01
sg6
g6736
sg7
S'TIGConstructor'
p6739
sg9
I00
sg10
(lp6740
sg12
(lp6741
(S'TIMConstructor'
p6742
S'IMconstructor'
p6743
g6743
S'IM constructor'
p6744
I0
I0
I00
Ntp6745
asg29
(dp6746
sbsS'TRuleEvaluator_LRS'
p6747
(i__main__
ClassDefinition
p6748
(dp6749
g4
I1
sg5
I01
sg6
g6747
sg7
S'TRuleEvaluator'
p6750
sg9
I00
sg10
(lp6751
sg12
(lp6752
(S'TRuleList'
p6753
S'rules'
p6754
g6754
g573
I0
I0
I00
Ntp6755
a(S'bool'
p6756
S'storeRules'
p6757
S'store_rules'
p6758
g573
I0
I0
I01
Ntp6759
asg29
(dp6760
sbs.